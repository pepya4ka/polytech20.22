// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="gauss_blur,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12t-csg325-1Q,HLS_INPUT_CLOCK=6.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.875000,HLS_SYN_LAT=2076643,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=5,HLS_SYN_FF=833,HLS_SYN_LUT=988,HLS_VERSION=2020_1}" *)

module gauss_blur (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        inImage_dout,
        inImage_empty_n,
        inImage_read,
        gauss_kernel_address0,
        gauss_kernel_ce0,
        gauss_kernel_q0,
        outImage_din,
        outImage_full_n,
        outImage_write
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_pp0_stage0 = 7'd32;
parameter    ap_ST_fsm_state14 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] inImage_dout;
input   inImage_empty_n;
output   inImage_read;
output  [3:0] gauss_kernel_address0;
output   gauss_kernel_ce0;
input  [7:0] gauss_kernel_q0;
output  [7:0] outImage_din;
input   outImage_full_n;
output   outImage_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg inImage_read;
reg gauss_kernel_ce0;
reg[7:0] outImage_din;
reg outImage_write;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    inImage_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln46_reg_1038;
reg   [0:0] and_ln50_reg_1080;
reg    outImage_blk_n;
reg    ap_enable_reg_pp0_iter7;
reg   [0:0] and_ln68_reg_1121;
reg   [0:0] and_ln68_reg_1121_pp0_iter6_reg;
reg   [0:0] or_ln73_2_reg_1125;
reg   [0:0] or_ln73_2_reg_1125_pp0_iter6_reg;
reg   [20:0] indvar_flatten_reg_241;
reg   [10:0] row_0_reg_252;
reg   [10:0] col_0_reg_263;
reg   [7:0] window_2_2_reg_274;
wire   [0:0] icmp_ln38_fu_287_p2;
wire    ap_CS_fsm_state2;
wire   [1:0] i_fu_293_p2;
reg   [1:0] i_reg_921;
wire   [4:0] sub_ln40_fu_315_p2;
reg   [4:0] sub_ln40_reg_926;
wire   [15:0] zext_ln16_fu_348_p1;
reg   [15:0] zext_ln16_reg_970;
wire   [15:0] zext_ln16_1_fu_352_p1;
reg   [15:0] zext_ln16_1_reg_975;
wire   [15:0] zext_ln16_2_fu_356_p1;
reg   [15:0] zext_ln16_2_reg_980;
wire   [15:0] zext_ln16_3_fu_360_p1;
reg   [15:0] zext_ln16_3_reg_985;
wire   [15:0] zext_ln16_4_fu_364_p1;
reg   [15:0] zext_ln16_4_reg_990;
wire   [15:0] zext_ln16_5_fu_368_p1;
reg   [15:0] zext_ln16_5_reg_995;
wire   [15:0] zext_ln16_6_fu_372_p1;
reg   [15:0] zext_ln16_6_reg_1000;
wire   [15:0] zext_ln16_7_fu_376_p1;
reg   [15:0] zext_ln16_7_reg_1005;
wire   [15:0] zext_ln46_fu_380_p1;
reg   [15:0] zext_ln46_reg_1010;
wire   [1:0] j_fu_390_p2;
reg   [1:0] j_reg_1018;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln39_fu_384_p2;
wire   [0:0] icmp_ln73_fu_465_p2;
reg   [0:0] icmp_ln73_reg_1028;
wire    ap_block_state6_pp0_stage0_iter0;
reg    ap_predicate_op150_read_state7;
reg    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state8_pp0_stage0_iter2;
wire    ap_block_state9_pp0_stage0_iter3;
wire    ap_block_state10_pp0_stage0_iter4;
wire    ap_block_state11_pp0_stage0_iter5;
wire    ap_block_state12_pp0_stage0_iter6;
reg    ap_predicate_op233_write_state13;
reg    ap_predicate_op235_write_state13;
reg    ap_block_state13_pp0_stage0_iter7;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln73_1_fu_471_p2;
reg   [0:0] icmp_ln73_1_reg_1033;
wire   [0:0] icmp_ln46_fu_477_p2;
wire   [20:0] add_ln46_fu_483_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln47_fu_495_p2;
reg   [0:0] icmp_ln47_reg_1047;
wire   [10:0] select_ln46_fu_501_p3;
reg   [10:0] select_ln46_reg_1053;
wire   [0:0] select_ln46_2_fu_545_p3;
reg   [0:0] select_ln46_2_reg_1060;
wire   [11:0] add_ln69_1_fu_553_p2;
reg   [11:0] add_ln69_1_reg_1065;
wire   [10:0] select_ln46_5_fu_559_p3;
wire   [0:0] icmp_ln50_1_fu_567_p2;
reg   [0:0] icmp_ln50_1_reg_1076;
reg   [0:0] icmp_ln50_1_reg_1076_pp0_iter1_reg;
reg   [0:0] icmp_ln50_1_reg_1076_pp0_iter2_reg;
wire   [0:0] and_ln50_fu_573_p2;
wire   [10:0] col_fu_579_p2;
reg   [7:0] window_1_0_load_reg_1089;
reg   [7:0] window_1_0_load_reg_1089_pp0_iter2_reg;
reg   [7:0] window_2_0_load_reg_1094;
reg   [7:0] window_0_1_1_reg_1099;
reg   [7:0] window_1_1_1_reg_1104;
reg   [10:0] part_buffer_0_addr_reg_1109;
reg   [10:0] part_buffer_0_addr_reg_1109_pp0_iter2_reg;
reg   [10:0] part_buffer_1_addr_reg_1115;
wire   [0:0] and_ln68_fu_655_p2;
reg   [0:0] and_ln68_reg_1121_pp0_iter2_reg;
reg   [0:0] and_ln68_reg_1121_pp0_iter3_reg;
reg   [0:0] and_ln68_reg_1121_pp0_iter4_reg;
reg   [0:0] and_ln68_reg_1121_pp0_iter5_reg;
wire   [0:0] or_ln73_2_fu_689_p2;
reg   [0:0] or_ln73_2_reg_1125_pp0_iter2_reg;
reg   [0:0] or_ln73_2_reg_1125_pp0_iter3_reg;
reg   [0:0] or_ln73_2_reg_1125_pp0_iter4_reg;
reg   [0:0] or_ln73_2_reg_1125_pp0_iter5_reg;
wire   [7:0] part_buffer_1_q0;
reg   [7:0] window_1_2_reg_1139;
reg    ap_enable_reg_pp0_iter2;
wire   [15:0] mul_ln16_1_fu_719_p2;
reg   [15:0] mul_ln16_1_reg_1144;
wire   [15:0] mul_ln16_6_fu_730_p2;
reg   [15:0] mul_ln16_6_reg_1154;
wire   [15:0] mul_ln16_2_fu_752_p2;
reg   [15:0] mul_ln16_2_reg_1164;
wire   [15:0] mul_ln16_5_fu_764_p2;
reg   [15:0] mul_ln16_5_reg_1174;
wire   [16:0] grp_fu_835_p3;
reg   [16:0] add_ln16_reg_1179;
reg    ap_enable_reg_pp0_iter3;
reg   [16:0] add_ln16_reg_1179_pp0_iter4_reg;
wire   [16:0] grp_fu_828_p3;
reg   [16:0] add_ln16_3_reg_1184;
reg   [16:0] add_ln16_3_reg_1184_pp0_iter4_reg;
reg   [16:0] add_ln16_3_reg_1184_pp0_iter5_reg;
wire   [16:0] grp_fu_842_p3;
reg   [16:0] add_ln16_1_reg_1189;
reg    ap_enable_reg_pp0_iter4;
wire   [16:0] grp_fu_849_p3;
reg   [16:0] add_ln16_4_reg_1194;
wire   [17:0] add_ln16_2_fu_784_p2;
reg   [17:0] add_ln16_2_reg_1199;
wire   [17:0] grp_fu_856_p3;
reg   [17:0] add_ln16_5_reg_1204;
reg    ap_enable_reg_pp0_iter5;
reg   [7:0] trunc_ln_reg_1209;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter1_state7;
reg    ap_enable_reg_pp0_iter6;
wire   [10:0] part_buffer_0_address0;
reg    part_buffer_0_ce0;
wire   [7:0] part_buffer_0_q0;
reg    part_buffer_0_ce1;
reg    part_buffer_0_we1;
wire   [10:0] part_buffer_1_address0;
reg    part_buffer_1_ce0;
reg    part_buffer_1_ce1;
reg    part_buffer_1_we1;
reg   [1:0] i_0_reg_217;
reg   [1:0] j_0_reg_229;
wire    ap_CS_fsm_state5;
reg   [7:0] ap_phi_mux_window_2_2_phi_fu_278_p4;
wire   [7:0] ap_phi_reg_pp0_iter1_window_2_2_reg_274;
wire  signed [63:0] sext_ln40_fu_405_p1;
wire   [63:0] zext_ln62_fu_640_p1;
reg   [7:0] kernel_2_2_read_as_fu_90;
wire    ap_CS_fsm_state4;
reg   [7:0] kernel_2_1_read_as_fu_94;
reg   [7:0] kernel_2_0_read_as_fu_98;
reg   [7:0] kernel_0_0_read_as_fu_102;
reg   [7:0] kernel_0_1_read_as_fu_106;
reg   [7:0] kernel_0_2_read_as_fu_110;
reg   [7:0] kernel_1_0_read_as_fu_114;
reg   [7:0] kernel_1_1_read_as_fu_118;
reg   [7:0] kernel_1_2_read_as_fu_122;
reg   [7:0] window_0_0_fu_134;
reg   [7:0] window_1_0_fu_138;
reg   [7:0] window_2_0_fu_142;
reg   [7:0] window_0_1_fu_146;
reg   [7:0] ap_sig_allocacmp_window_0_1_1;
reg   [7:0] window_1_1_fu_150;
reg   [7:0] ap_sig_allocacmp_window_1_1_1;
reg   [7:0] window_2_1_fu_154;
reg    ap_block_pp0_stage0_01001;
wire   [3:0] tmp_fu_303_p3;
wire   [4:0] zext_ln40_1_fu_311_p1;
wire   [4:0] zext_ln40_fu_299_p1;
wire   [4:0] zext_ln40_2_fu_396_p1;
wire   [4:0] add_ln40_fu_400_p2;
wire   [11:0] zext_ln46_1_fu_455_p1;
wire   [11:0] outrow_fu_459_p2;
wire   [10:0] row_fu_489_p2;
wire   [0:0] icmp_ln50_fu_513_p2;
wire   [0:0] icmp_ln50_2_fu_519_p2;
wire   [0:0] icmp_ln68_fu_533_p2;
wire   [0:0] icmp_ln68_2_fu_539_p2;
wire   [11:0] zext_ln46_2_fu_509_p1;
wire   [0:0] select_ln46_1_fu_525_p3;
wire   [0:0] icmp_ln73_4_fu_618_p2;
wire   [0:0] icmp_ln73_5_fu_629_p2;
wire   [0:0] icmp_ln68_1_fu_650_p2;
wire   [10:0] outcol_fu_660_p2;
wire   [0:0] select_ln46_3_fu_623_p3;
wire   [0:0] icmp_ln73_2_fu_665_p2;
wire   [0:0] select_ln46_4_fu_634_p3;
wire   [0:0] icmp_ln73_3_fu_671_p2;
wire   [0:0] or_ln73_1_fu_683_p2;
wire   [0:0] or_ln73_fu_677_p2;
wire   [7:0] mul_ln16_1_fu_719_p0;
wire   [7:0] mul_ln16_1_fu_719_p1;
wire   [7:0] mul_ln16_6_fu_730_p0;
wire   [7:0] mul_ln16_6_fu_730_p1;
wire   [7:0] mul_ln16_2_fu_752_p0;
wire   [7:0] mul_ln16_2_fu_752_p1;
wire   [7:0] mul_ln16_5_fu_764_p0;
wire   [7:0] mul_ln16_5_fu_764_p1;
wire   [17:0] zext_ln16_27_fu_781_p1;
wire   [17:0] zext_ln16_26_fu_778_p1;
wire   [18:0] zext_ln16_31_fu_799_p1;
wire   [18:0] zext_ln16_29_fu_796_p1;
wire   [18:0] add_ln16_6_fu_802_p2;
wire   [19:0] zext_ln16_32_fu_808_p1;
wire   [19:0] zext_ln16_28_fu_793_p1;
wire   [19:0] add_ln16_7_fu_812_p2;
wire   [7:0] grp_fu_828_p0;
wire   [7:0] grp_fu_828_p1;
wire   [15:0] grp_fu_828_p2;
wire   [7:0] grp_fu_835_p0;
wire   [7:0] grp_fu_835_p1;
wire   [15:0] grp_fu_835_p2;
wire   [7:0] grp_fu_842_p0;
wire   [7:0] grp_fu_842_p1;
wire   [15:0] grp_fu_842_p2;
wire   [7:0] grp_fu_849_p0;
wire   [7:0] grp_fu_849_p1;
wire   [15:0] grp_fu_849_p2;
wire   [7:0] grp_fu_856_p0;
wire   [7:0] grp_fu_856_p1;
wire   [16:0] grp_fu_856_p2;
reg    grp_fu_828_ce;
reg    grp_fu_835_ce;
reg    grp_fu_842_ce;
reg    grp_fu_849_ce;
reg    grp_fu_856_ce;
wire    ap_CS_fsm_state14;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [15:0] grp_fu_828_p00;
wire   [16:0] grp_fu_828_p20;
wire   [15:0] grp_fu_835_p00;
wire   [16:0] grp_fu_835_p20;
wire   [15:0] grp_fu_842_p00;
wire   [16:0] grp_fu_842_p20;
wire   [15:0] grp_fu_849_p00;
wire   [16:0] grp_fu_849_p20;
wire   [15:0] grp_fu_856_p00;
wire   [17:0] grp_fu_856_p20;
wire   [15:0] mul_ln16_1_fu_719_p00;
wire   [15:0] mul_ln16_2_fu_752_p00;
wire   [15:0] mul_ln16_5_fu_764_p00;
wire   [15:0] mul_ln16_6_fu_730_p00;
reg    ap_condition_375;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

gauss_blur_part_bbkb #(
    .DataWidth( 8 ),
    .AddressRange( 1080 ),
    .AddressWidth( 11 ))
part_buffer_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(part_buffer_0_address0),
    .ce0(part_buffer_0_ce0),
    .q0(part_buffer_0_q0),
    .address1(part_buffer_0_addr_reg_1109_pp0_iter2_reg),
    .ce1(part_buffer_0_ce1),
    .we1(part_buffer_0_we1),
    .d1(window_1_2_reg_1139)
);

gauss_blur_part_bbkb #(
    .DataWidth( 8 ),
    .AddressRange( 1080 ),
    .AddressWidth( 11 ))
part_buffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(part_buffer_1_address0),
    .ce0(part_buffer_1_ce0),
    .q0(part_buffer_1_q0),
    .address1(part_buffer_1_addr_reg_1115),
    .ce1(part_buffer_1_ce1),
    .we1(part_buffer_1_we1),
    .d1(window_2_2_reg_274)
);

gauss_blur_mac_mudEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
gauss_blur_mac_mudEe_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_828_p0),
    .din1(grp_fu_828_p1),
    .din2(grp_fu_828_p2),
    .ce(grp_fu_828_ce),
    .dout(grp_fu_828_p3)
);

gauss_blur_mac_mudEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
gauss_blur_mac_mudEe_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_835_p0),
    .din1(grp_fu_835_p1),
    .din2(grp_fu_835_p2),
    .ce(grp_fu_835_ce),
    .dout(grp_fu_835_p3)
);

gauss_blur_mac_mudEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
gauss_blur_mac_mudEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_842_p0),
    .din1(grp_fu_842_p1),
    .din2(grp_fu_842_p2),
    .ce(grp_fu_842_ce),
    .dout(grp_fu_842_p3)
);

gauss_blur_mac_mudEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
gauss_blur_mac_mudEe_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_849_p0),
    .din1(grp_fu_849_p1),
    .din2(grp_fu_849_p2),
    .ce(grp_fu_849_ce),
    .dout(grp_fu_849_p3)
);

gauss_blur_mac_mueOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
gauss_blur_mac_mueOg_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_856_p0),
    .din1(grp_fu_856_p1),
    .din2(grp_fu_856_p2),
    .ce(grp_fu_856_ce),
    .dout(grp_fu_856_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((icmp_ln46_fu_477_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln38_fu_287_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter1_state7)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if (((icmp_ln38_fu_287_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_fu_477_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        col_0_reg_263 <= col_fu_579_p2;
    end else if (((icmp_ln38_fu_287_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        col_0_reg_263 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_384_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_217 <= i_reg_921;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_217 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_fu_477_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_241 <= add_ln46_fu_483_p2;
    end else if (((icmp_ln38_fu_287_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_241 <= 21'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_0_reg_229 <= j_reg_1018;
    end else if (((icmp_ln38_fu_287_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_229 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_fu_477_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        row_0_reg_252 <= select_ln46_5_fu_559_p3;
    end else if (((icmp_ln38_fu_287_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        row_0_reg_252 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_375)) begin
        if (((1'd0 == and_ln50_reg_1080) & (icmp_ln46_reg_1038 == 1'd0))) begin
            window_2_2_reg_274 <= 8'd0;
        end else if (((1'd1 == and_ln50_reg_1080) & (icmp_ln46_reg_1038 == 1'd0))) begin
            window_2_2_reg_274 <= inImage_dout;
        end else if ((1'b1 == 1'b1)) begin
            window_2_2_reg_274 <= ap_phi_reg_pp0_iter1_window_2_2_reg_274;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln68_reg_1121_pp0_iter3_reg) & (or_ln73_2_reg_1125_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln16_1_reg_1189 <= grp_fu_842_p3;
        add_ln16_4_reg_1194 <= grp_fu_849_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln68_reg_1121_pp0_iter4_reg) & (or_ln73_2_reg_1125_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln16_2_reg_1199 <= add_ln16_2_fu_784_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln68_reg_1121_pp0_iter2_reg) & (or_ln73_2_reg_1125_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln16_3_reg_1184 <= grp_fu_828_p3;
        add_ln16_reg_1179 <= grp_fu_835_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln16_3_reg_1184_pp0_iter4_reg <= add_ln16_3_reg_1184;
        add_ln16_3_reg_1184_pp0_iter5_reg <= add_ln16_3_reg_1184_pp0_iter4_reg;
        add_ln16_reg_1179_pp0_iter4_reg <= add_ln16_reg_1179;
        and_ln68_reg_1121_pp0_iter2_reg <= and_ln68_reg_1121;
        and_ln68_reg_1121_pp0_iter3_reg <= and_ln68_reg_1121_pp0_iter2_reg;
        and_ln68_reg_1121_pp0_iter4_reg <= and_ln68_reg_1121_pp0_iter3_reg;
        and_ln68_reg_1121_pp0_iter5_reg <= and_ln68_reg_1121_pp0_iter4_reg;
        and_ln68_reg_1121_pp0_iter6_reg <= and_ln68_reg_1121_pp0_iter5_reg;
        icmp_ln50_1_reg_1076_pp0_iter2_reg <= icmp_ln50_1_reg_1076_pp0_iter1_reg;
        or_ln73_2_reg_1125_pp0_iter2_reg <= or_ln73_2_reg_1125;
        or_ln73_2_reg_1125_pp0_iter3_reg <= or_ln73_2_reg_1125_pp0_iter2_reg;
        or_ln73_2_reg_1125_pp0_iter4_reg <= or_ln73_2_reg_1125_pp0_iter3_reg;
        or_ln73_2_reg_1125_pp0_iter5_reg <= or_ln73_2_reg_1125_pp0_iter4_reg;
        or_ln73_2_reg_1125_pp0_iter6_reg <= or_ln73_2_reg_1125_pp0_iter5_reg;
        part_buffer_0_addr_reg_1109_pp0_iter2_reg <= part_buffer_0_addr_reg_1109;
        window_1_0_load_reg_1089_pp0_iter2_reg <= window_1_0_load_reg_1089;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln68_reg_1121_pp0_iter4_reg) & (or_ln73_2_reg_1125_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln16_5_reg_1204 <= grp_fu_856_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_fu_477_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln69_1_reg_1065 <= add_ln69_1_fu_553_p2;
        and_ln50_reg_1080 <= and_ln50_fu_573_p2;
        icmp_ln47_reg_1047 <= icmp_ln47_fu_495_p2;
        icmp_ln50_1_reg_1076 <= icmp_ln50_1_fu_567_p2;
        select_ln46_2_reg_1060 <= select_ln46_2_fu_545_p3;
        select_ln46_reg_1053 <= select_ln46_fu_501_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_reg_1038 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln68_reg_1121 <= and_ln68_fu_655_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_921 <= i_fu_293_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln46_reg_1038 <= icmp_ln46_fu_477_p2;
        icmp_ln50_1_reg_1076_pp0_iter1_reg <= icmp_ln50_1_reg_1076;
        icmp_ln73_1_reg_1033 <= icmp_ln73_1_fu_471_p2;
        icmp_ln73_reg_1028 <= icmp_ln73_fu_465_p2;
        window_0_1_1_reg_1099 <= ap_sig_allocacmp_window_0_1_1;
        window_1_0_load_reg_1089 <= window_1_0_fu_138;
        window_1_1_1_reg_1104 <= ap_sig_allocacmp_window_1_1_1;
        window_2_0_load_reg_1094 <= window_2_0_fu_142;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_1018 <= j_fu_390_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((j_0_reg_229 == 2'd0) & (i_0_reg_217 == 2'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        kernel_0_0_read_as_fu_102 <= gauss_kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((j_0_reg_229 == 2'd1) & (i_0_reg_217 == 2'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        kernel_0_1_read_as_fu_106 <= gauss_kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(j_0_reg_229 == 2'd1) & ~(j_0_reg_229 == 2'd0) & (i_0_reg_217 == 2'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        kernel_0_2_read_as_fu_110 <= gauss_kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((i_0_reg_217 == 2'd1) & (j_0_reg_229 == 2'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        kernel_1_0_read_as_fu_114 <= gauss_kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((j_0_reg_229 == 2'd1) & (i_0_reg_217 == 2'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        kernel_1_1_read_as_fu_118 <= gauss_kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(j_0_reg_229 == 2'd1) & ~(j_0_reg_229 == 2'd0) & (i_0_reg_217 == 2'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        kernel_1_2_read_as_fu_122 <= gauss_kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(i_0_reg_217 == 2'd1) & ~(i_0_reg_217 == 2'd0) & (j_0_reg_229 == 2'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        kernel_2_0_read_as_fu_98 <= gauss_kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(i_0_reg_217 == 2'd1) & ~(i_0_reg_217 == 2'd0) & (j_0_reg_229 == 2'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        kernel_2_1_read_as_fu_94 <= gauss_kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(j_0_reg_229 == 2'd1) & ~(j_0_reg_229 == 2'd0) & ~(i_0_reg_217 == 2'd1) & ~(i_0_reg_217 == 2'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        kernel_2_2_read_as_fu_90 <= gauss_kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln68_reg_1121) & (or_ln73_2_reg_1125 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln16_1_reg_1144 <= mul_ln16_1_fu_719_p2;
        mul_ln16_6_reg_1154 <= mul_ln16_6_fu_730_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln68_reg_1121_pp0_iter2_reg) & (or_ln73_2_reg_1125_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln16_2_reg_1164 <= mul_ln16_2_fu_752_p2;
        mul_ln16_5_reg_1174 <= mul_ln16_5_fu_764_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln68_fu_655_p2) & (icmp_ln46_reg_1038 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        or_ln73_2_reg_1125 <= or_ln73_2_fu_689_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_1_reg_1076 == 1'd1) & (icmp_ln46_reg_1038 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        part_buffer_0_addr_reg_1109 <= zext_ln62_fu_640_p1;
        part_buffer_1_addr_reg_1115 <= zext_ln62_fu_640_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_287_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sub_ln40_reg_926 <= sub_ln40_fu_315_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln68_reg_1121_pp0_iter5_reg) & (or_ln73_2_reg_1125_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln_reg_1209 <= {{add_ln16_7_fu_812_p2[11:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        window_0_0_fu_134 <= ap_sig_allocacmp_window_0_1_1;
        window_1_0_fu_138 <= ap_sig_allocacmp_window_1_1_1;
        window_2_0_fu_142 <= window_2_1_fu_154;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_1_reg_1076_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        window_0_1_fu_146 <= part_buffer_0_q0;
        window_1_1_fu_150 <= part_buffer_1_q0;
        window_1_2_reg_1139 <= part_buffer_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_1_reg_1076 == 1'd1) & (icmp_ln46_reg_1038 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        window_2_1_fu_154 <= ap_phi_mux_window_2_2_phi_fu_278_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_287_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln16_1_reg_975[7 : 0] <= zext_ln16_1_fu_352_p1[7 : 0];
        zext_ln16_2_reg_980[7 : 0] <= zext_ln16_2_fu_356_p1[7 : 0];
        zext_ln16_3_reg_985[7 : 0] <= zext_ln16_3_fu_360_p1[7 : 0];
        zext_ln16_4_reg_990[7 : 0] <= zext_ln16_4_fu_364_p1[7 : 0];
        zext_ln16_5_reg_995[7 : 0] <= zext_ln16_5_fu_368_p1[7 : 0];
        zext_ln16_6_reg_1000[7 : 0] <= zext_ln16_6_fu_372_p1[7 : 0];
        zext_ln16_7_reg_1005[7 : 0] <= zext_ln16_7_fu_376_p1[7 : 0];
        zext_ln16_reg_970[7 : 0] <= zext_ln16_fu_348_p1[7 : 0];
        zext_ln46_reg_1010[7 : 0] <= zext_ln46_fu_380_p1[7 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_condition_pp0_exit_iter1_state7 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln46_reg_1038 == 1'd0)) begin
        if ((1'd0 == and_ln50_reg_1080)) begin
            ap_phi_mux_window_2_2_phi_fu_278_p4 = 8'd0;
        end else if ((1'd1 == and_ln50_reg_1080)) begin
            ap_phi_mux_window_2_2_phi_fu_278_p4 = inImage_dout;
        end else begin
            ap_phi_mux_window_2_2_phi_fu_278_p4 = ap_phi_reg_pp0_iter1_window_2_2_reg_274;
        end
    end else begin
        ap_phi_mux_window_2_2_phi_fu_278_p4 = ap_phi_reg_pp0_iter1_window_2_2_reg_274;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_1_reg_1076_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_window_0_1_1 = part_buffer_0_q0;
    end else begin
        ap_sig_allocacmp_window_0_1_1 = window_0_1_fu_146;
    end
end

always @ (*) begin
    if (((icmp_ln50_1_reg_1076_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_window_1_1_1 = part_buffer_1_q0;
    end else begin
        ap_sig_allocacmp_window_1_1_1 = window_1_1_fu_150;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        gauss_kernel_ce0 = 1'b1;
    end else begin
        gauss_kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_828_ce = 1'b1;
    end else begin
        grp_fu_828_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_835_ce = 1'b1;
    end else begin
        grp_fu_835_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_842_ce = 1'b1;
    end else begin
        grp_fu_842_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_849_ce = 1'b1;
    end else begin
        grp_fu_849_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_856_ce = 1'b1;
    end else begin
        grp_fu_856_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln50_reg_1080) & (icmp_ln46_reg_1038 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inImage_blk_n = inImage_empty_n;
    end else begin
        inImage_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op150_read_state7 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        inImage_read = 1'b1;
    end else begin
        inImage_read = 1'b0;
    end
end

always @ (*) begin
    if ((((1'd1 == and_ln68_reg_1121_pp0_iter6_reg) & (or_ln73_2_reg_1125_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((or_ln73_2_reg_1125_pp0_iter6_reg == 1'd1) & (1'd1 == and_ln68_reg_1121_pp0_iter6_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter7 == 1'b1)))) begin
        outImage_blk_n = outImage_full_n;
    end else begin
        outImage_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        if ((ap_predicate_op235_write_state13 == 1'b1)) begin
            outImage_din = 8'd0;
        end else if ((ap_predicate_op233_write_state13 == 1'b1)) begin
            outImage_din = trunc_ln_reg_1209;
        end else begin
            outImage_din = 'bx;
        end
    end else begin
        outImage_din = 'bx;
    end
end

always @ (*) begin
    if ((((ap_predicate_op235_write_state13 == 1'b1) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_predicate_op233_write_state13 == 1'b1) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        outImage_write = 1'b1;
    end else begin
        outImage_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        part_buffer_0_ce0 = 1'b1;
    end else begin
        part_buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        part_buffer_0_ce1 = 1'b1;
    end else begin
        part_buffer_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_1_reg_1076_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        part_buffer_0_we1 = 1'b1;
    end else begin
        part_buffer_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        part_buffer_1_ce0 = 1'b1;
    end else begin
        part_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        part_buffer_1_ce1 = 1'b1;
    end else begin
        part_buffer_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_1_reg_1076_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        part_buffer_1_we1 = 1'b1;
    end else begin
        part_buffer_1_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln38_fu_287_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln39_fu_384_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0)) & ~((ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter7 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln16_2_fu_784_p2 = (zext_ln16_27_fu_781_p1 + zext_ln16_26_fu_778_p1);

assign add_ln16_6_fu_802_p2 = (zext_ln16_31_fu_799_p1 + zext_ln16_29_fu_796_p1);

assign add_ln16_7_fu_812_p2 = (zext_ln16_32_fu_808_p1 + zext_ln16_28_fu_793_p1);

assign add_ln40_fu_400_p2 = (sub_ln40_reg_926 + zext_ln40_2_fu_396_p1);

assign add_ln46_fu_483_p2 = (indvar_flatten_reg_241 + 21'd1);

assign add_ln69_1_fu_553_p2 = ($signed(zext_ln46_2_fu_509_p1) + $signed(12'd4095));

assign and_ln50_fu_573_p2 = (select_ln46_1_fu_525_p3 & icmp_ln50_1_fu_567_p2);

assign and_ln68_fu_655_p2 = (select_ln46_2_reg_1060 & icmp_ln68_1_fu_650_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter7 == 1'b1) & (((outImage_full_n == 1'b0) & (ap_predicate_op235_write_state13 == 1'b1)) | ((outImage_full_n == 1'b0) & (ap_predicate_op233_write_state13 == 1'b1)))) | ((inImage_empty_n == 1'b0) & (ap_predicate_op150_read_state7 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter7 == 1'b1) & (((outImage_full_n == 1'b0) & (ap_predicate_op235_write_state13 == 1'b1)) | ((outImage_full_n == 1'b0) & (ap_predicate_op233_write_state13 == 1'b1)))) | ((inImage_empty_n == 1'b0) & (ap_predicate_op150_read_state7 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter7 == 1'b1) & (((outImage_full_n == 1'b0) & (ap_predicate_op235_write_state13 == 1'b1)) | ((outImage_full_n == 1'b0) & (ap_predicate_op233_write_state13 == 1'b1)))) | ((inImage_empty_n == 1'b0) & (ap_predicate_op150_read_state7 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_pp0_stage0_iter7 = (((outImage_full_n == 1'b0) & (ap_predicate_op235_write_state13 == 1'b1)) | ((outImage_full_n == 1'b0) & (ap_predicate_op233_write_state13 == 1'b1)));
end

assign ap_block_state6_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter1 = ((inImage_empty_n == 1'b0) & (ap_predicate_op150_read_state7 == 1'b1));
end

assign ap_block_state8_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_375 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter1_window_2_2_reg_274 = 'bx;

always @ (*) begin
    ap_predicate_op150_read_state7 = ((1'd1 == and_ln50_reg_1080) & (icmp_ln46_reg_1038 == 1'd0));
end

always @ (*) begin
    ap_predicate_op233_write_state13 = ((1'd1 == and_ln68_reg_1121_pp0_iter6_reg) & (or_ln73_2_reg_1125_pp0_iter6_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op235_write_state13 = ((or_ln73_2_reg_1125_pp0_iter6_reg == 1'd1) & (1'd1 == and_ln68_reg_1121_pp0_iter6_reg));
end

assign col_fu_579_p2 = (select_ln46_fu_501_p3 + 11'd1);

assign gauss_kernel_address0 = sext_ln40_fu_405_p1;

assign grp_fu_828_p0 = grp_fu_828_p00;

assign grp_fu_828_p00 = window_0_0_fu_134;

assign grp_fu_828_p1 = zext_ln16_reg_970;

assign grp_fu_828_p2 = grp_fu_828_p20;

assign grp_fu_828_p20 = mul_ln16_1_reg_1144;

assign grp_fu_835_p0 = grp_fu_835_p00;

assign grp_fu_835_p00 = window_2_1_fu_154;

assign grp_fu_835_p1 = zext_ln16_7_reg_1005;

assign grp_fu_835_p2 = grp_fu_835_p20;

assign grp_fu_835_p20 = mul_ln16_6_reg_1154;

assign grp_fu_842_p0 = grp_fu_842_p00;

assign grp_fu_842_p00 = window_1_1_1_reg_1104;

assign grp_fu_842_p1 = zext_ln16_4_reg_990;

assign grp_fu_842_p2 = grp_fu_842_p20;

assign grp_fu_842_p20 = mul_ln16_5_reg_1174;

assign grp_fu_849_p0 = grp_fu_849_p00;

assign grp_fu_849_p00 = window_2_1_fu_154;

assign grp_fu_849_p1 = zext_ln46_reg_1010;

assign grp_fu_849_p2 = grp_fu_849_p20;

assign grp_fu_849_p20 = mul_ln16_2_reg_1164;

assign grp_fu_856_p0 = grp_fu_856_p00;

assign grp_fu_856_p00 = window_1_0_load_reg_1089_pp0_iter2_reg;

assign grp_fu_856_p1 = zext_ln16_3_reg_985;

assign grp_fu_856_p2 = grp_fu_856_p20;

assign grp_fu_856_p20 = add_ln16_4_reg_1194;

assign i_fu_293_p2 = (i_0_reg_217 + 2'd1);

assign icmp_ln38_fu_287_p2 = ((i_0_reg_217 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_384_p2 = ((j_0_reg_229 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_477_p2 = ((indvar_flatten_reg_241 == 21'd2076601) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_495_p2 = ((col_0_reg_263 == 11'd1081) ? 1'b1 : 1'b0);

assign icmp_ln50_1_fu_567_p2 = ((select_ln46_fu_501_p3 < 11'd1080) ? 1'b1 : 1'b0);

assign icmp_ln50_2_fu_519_p2 = ((row_0_reg_252 < 11'd1920) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_513_p2 = ((row_fu_489_p2 < 11'd1920) ? 1'b1 : 1'b0);

assign icmp_ln68_1_fu_650_p2 = ((select_ln46_reg_1053 != 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln68_2_fu_539_p2 = ((row_0_reg_252 != 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln68_fu_533_p2 = ((row_fu_489_p2 != 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln73_1_fu_471_p2 = ((outrow_fu_459_p2 == 12'd1919) ? 1'b1 : 1'b0);

assign icmp_ln73_2_fu_665_p2 = ((outcol_fu_660_p2 == 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln73_3_fu_671_p2 = ((outcol_fu_660_p2 == 11'd1079) ? 1'b1 : 1'b0);

assign icmp_ln73_4_fu_618_p2 = ((add_ln69_1_reg_1065 == 12'd0) ? 1'b1 : 1'b0);

assign icmp_ln73_5_fu_629_p2 = ((add_ln69_1_reg_1065 == 12'd1919) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_465_p2 = ((outrow_fu_459_p2 == 12'd0) ? 1'b1 : 1'b0);

assign j_fu_390_p2 = (j_0_reg_229 + 2'd1);

assign mul_ln16_1_fu_719_p0 = mul_ln16_1_fu_719_p00;

assign mul_ln16_1_fu_719_p00 = window_0_1_1_reg_1099;

assign mul_ln16_1_fu_719_p1 = zext_ln16_1_reg_975;

assign mul_ln16_1_fu_719_p2 = (mul_ln16_1_fu_719_p0 * mul_ln16_1_fu_719_p1);

assign mul_ln16_2_fu_752_p0 = mul_ln16_2_fu_752_p00;

assign mul_ln16_2_fu_752_p00 = window_0_1_fu_146;

assign mul_ln16_2_fu_752_p1 = zext_ln16_2_reg_980;

assign mul_ln16_2_fu_752_p2 = (mul_ln16_2_fu_752_p0 * mul_ln16_2_fu_752_p1);

assign mul_ln16_5_fu_764_p0 = mul_ln16_5_fu_764_p00;

assign mul_ln16_5_fu_764_p00 = window_1_1_fu_150;

assign mul_ln16_5_fu_764_p1 = zext_ln16_5_reg_995;

assign mul_ln16_5_fu_764_p2 = (mul_ln16_5_fu_764_p0 * mul_ln16_5_fu_764_p1);

assign mul_ln16_6_fu_730_p0 = mul_ln16_6_fu_730_p00;

assign mul_ln16_6_fu_730_p00 = window_2_0_load_reg_1094;

assign mul_ln16_6_fu_730_p1 = zext_ln16_6_reg_1000;

assign mul_ln16_6_fu_730_p2 = (mul_ln16_6_fu_730_p0 * mul_ln16_6_fu_730_p1);

assign or_ln73_1_fu_683_p2 = (select_ln46_4_fu_634_p3 | icmp_ln73_3_fu_671_p2);

assign or_ln73_2_fu_689_p2 = (or_ln73_fu_677_p2 | or_ln73_1_fu_683_p2);

assign or_ln73_fu_677_p2 = (select_ln46_3_fu_623_p3 | icmp_ln73_2_fu_665_p2);

assign outcol_fu_660_p2 = ($signed(select_ln46_reg_1053) + $signed(11'd2047));

assign outrow_fu_459_p2 = ($signed(zext_ln46_1_fu_455_p1) + $signed(12'd4095));

assign part_buffer_0_address0 = zext_ln62_fu_640_p1;

assign part_buffer_1_address0 = zext_ln62_fu_640_p1;

assign row_fu_489_p2 = (row_0_reg_252 + 11'd1);

assign select_ln46_1_fu_525_p3 = ((icmp_ln47_fu_495_p2[0:0] === 1'b1) ? icmp_ln50_fu_513_p2 : icmp_ln50_2_fu_519_p2);

assign select_ln46_2_fu_545_p3 = ((icmp_ln47_fu_495_p2[0:0] === 1'b1) ? icmp_ln68_fu_533_p2 : icmp_ln68_2_fu_539_p2);

assign select_ln46_3_fu_623_p3 = ((icmp_ln47_reg_1047[0:0] === 1'b1) ? icmp_ln73_4_fu_618_p2 : icmp_ln73_reg_1028);

assign select_ln46_4_fu_634_p3 = ((icmp_ln47_reg_1047[0:0] === 1'b1) ? icmp_ln73_5_fu_629_p2 : icmp_ln73_1_reg_1033);

assign select_ln46_5_fu_559_p3 = ((icmp_ln47_fu_495_p2[0:0] === 1'b1) ? row_fu_489_p2 : row_0_reg_252);

assign select_ln46_fu_501_p3 = ((icmp_ln47_fu_495_p2[0:0] === 1'b1) ? 11'd0 : col_0_reg_263);

assign sext_ln40_fu_405_p1 = $signed(add_ln40_fu_400_p2);

assign sub_ln40_fu_315_p2 = (zext_ln40_1_fu_311_p1 - zext_ln40_fu_299_p1);

assign tmp_fu_303_p3 = {{i_0_reg_217}, {2'd0}};

assign zext_ln16_1_fu_352_p1 = kernel_0_1_read_as_fu_106;

assign zext_ln16_26_fu_778_p1 = add_ln16_reg_1179_pp0_iter4_reg;

assign zext_ln16_27_fu_781_p1 = add_ln16_1_reg_1189;

assign zext_ln16_28_fu_793_p1 = add_ln16_2_reg_1199;

assign zext_ln16_29_fu_796_p1 = add_ln16_3_reg_1184_pp0_iter5_reg;

assign zext_ln16_2_fu_356_p1 = kernel_0_2_read_as_fu_110;

assign zext_ln16_31_fu_799_p1 = add_ln16_5_reg_1204;

assign zext_ln16_32_fu_808_p1 = add_ln16_6_fu_802_p2;

assign zext_ln16_3_fu_360_p1 = kernel_1_0_read_as_fu_114;

assign zext_ln16_4_fu_364_p1 = kernel_1_1_read_as_fu_118;

assign zext_ln16_5_fu_368_p1 = kernel_1_2_read_as_fu_122;

assign zext_ln16_6_fu_372_p1 = kernel_2_0_read_as_fu_98;

assign zext_ln16_7_fu_376_p1 = kernel_2_1_read_as_fu_94;

assign zext_ln16_fu_348_p1 = kernel_0_0_read_as_fu_102;

assign zext_ln40_1_fu_311_p1 = tmp_fu_303_p3;

assign zext_ln40_2_fu_396_p1 = j_0_reg_229;

assign zext_ln40_fu_299_p1 = i_0_reg_217;

assign zext_ln46_1_fu_455_p1 = row_0_reg_252;

assign zext_ln46_2_fu_509_p1 = row_fu_489_p2;

assign zext_ln46_fu_380_p1 = kernel_2_2_read_as_fu_90;

assign zext_ln62_fu_640_p1 = select_ln46_reg_1053;

always @ (posedge ap_clk) begin
    zext_ln16_reg_970[15:8] <= 8'b00000000;
    zext_ln16_1_reg_975[15:8] <= 8'b00000000;
    zext_ln16_2_reg_980[15:8] <= 8'b00000000;
    zext_ln16_3_reg_985[15:8] <= 8'b00000000;
    zext_ln16_4_reg_990[15:8] <= 8'b00000000;
    zext_ln16_5_reg_995[15:8] <= 8'b00000000;
    zext_ln16_6_reg_1000[15:8] <= 8'b00000000;
    zext_ln16_7_reg_1005[15:8] <= 8'b00000000;
    zext_ln46_reg_1010[15:8] <= 8'b00000000;
end

endmodule //gauss_blur
