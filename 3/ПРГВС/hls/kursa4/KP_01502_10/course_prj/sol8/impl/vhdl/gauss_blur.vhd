-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gauss_blur is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inImage_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    inImage_empty_n : IN STD_LOGIC;
    inImage_read : OUT STD_LOGIC;
    gauss_kernel_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    gauss_kernel_ce0 : OUT STD_LOGIC;
    gauss_kernel_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    outImage_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    outImage_full_n : IN STD_LOGIC;
    outImage_write : OUT STD_LOGIC );
end;


architecture behav of gauss_blur is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "gauss_blur,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12t-csg325-1Q,HLS_INPUT_CLOCK=6.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.875000,HLS_SYN_LAT=2076643,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=5,HLS_SYN_FF=833,HLS_SYN_LUT=988,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_77F : STD_LOGIC_VECTOR (11 downto 0) := "011101111111";
    constant ap_const_lv21_1FAFB9 : STD_LOGIC_VECTOR (20 downto 0) := "111111010111110111001";
    constant ap_const_lv21_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_439 : STD_LOGIC_VECTOR (10 downto 0) := "10000111001";
    constant ap_const_lv11_780 : STD_LOGIC_VECTOR (10 downto 0) := "11110000000";
    constant ap_const_lv11_438 : STD_LOGIC_VECTOR (10 downto 0) := "10000111000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv11_437 : STD_LOGIC_VECTOR (10 downto 0) := "10000110111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal inImage_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln46_reg_1038 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln50_reg_1080 : STD_LOGIC_VECTOR (0 downto 0);
    signal outImage_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal and_ln68_reg_1121 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln68_reg_1121_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln73_2_reg_1125 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln73_2_reg_1125_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_241 : STD_LOGIC_VECTOR (20 downto 0);
    signal row_0_reg_252 : STD_LOGIC_VECTOR (10 downto 0);
    signal col_0_reg_263 : STD_LOGIC_VECTOR (10 downto 0);
    signal window_2_2_reg_274 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln38_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_293_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_921 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln40_fu_315_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln40_reg_926 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln16_fu_348_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln16_reg_970 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln16_1_fu_352_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln16_1_reg_975 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln16_2_fu_356_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln16_2_reg_980 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln16_3_fu_360_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln16_3_reg_985 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln16_4_fu_364_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln16_4_reg_990 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln16_5_fu_368_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln16_5_reg_995 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln16_6_fu_372_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln16_6_reg_1000 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln16_7_fu_376_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln16_7_reg_1005 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln46_fu_380_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln46_reg_1010 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_fu_390_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_1018 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln39_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_reg_1028 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state6_pp0_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op150_read_state7 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter6 : BOOLEAN;
    signal ap_predicate_op233_write_state13 : BOOLEAN;
    signal ap_predicate_op235_write_state13 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln73_1_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_1_reg_1033 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln46_fu_483_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln47_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_1047 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln46_fu_501_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln46_reg_1053 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln46_2_fu_545_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln46_2_reg_1060 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln69_1_fu_553_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln69_1_reg_1065 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln46_5_fu_559_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln50_1_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_1_reg_1076 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_1_reg_1076_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_1_reg_1076_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln50_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_fu_579_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal window_1_0_load_reg_1089 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_1_0_load_reg_1089_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal window_2_0_load_reg_1094 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_0_1_1_reg_1099 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_1_1_1_reg_1104 : STD_LOGIC_VECTOR (7 downto 0);
    signal part_buffer_0_addr_reg_1109 : STD_LOGIC_VECTOR (10 downto 0);
    signal part_buffer_0_addr_reg_1109_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal part_buffer_1_addr_reg_1115 : STD_LOGIC_VECTOR (10 downto 0);
    signal and_ln68_fu_655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln68_reg_1121_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln68_reg_1121_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln68_reg_1121_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln68_reg_1121_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln73_2_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln73_2_reg_1125_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln73_2_reg_1125_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln73_2_reg_1125_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln73_2_reg_1125_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal part_buffer_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_1_2_reg_1139 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal mul_ln16_1_fu_719_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln16_1_reg_1144 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln16_6_fu_730_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln16_6_reg_1154 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln16_2_fu_752_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln16_2_reg_1164 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln16_5_fu_764_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln16_5_reg_1174 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_835_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln16_reg_1179 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal add_ln16_reg_1179_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_828_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln16_3_reg_1184 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln16_3_reg_1184_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln16_3_reg_1184_pp0_iter5_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_842_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln16_1_reg_1189 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal grp_fu_849_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln16_4_reg_1194 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln16_2_fu_784_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln16_2_reg_1199 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_856_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln16_5_reg_1204 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal trunc_ln_reg_1209 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter1_state7 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal part_buffer_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal part_buffer_0_ce0 : STD_LOGIC;
    signal part_buffer_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal part_buffer_0_ce1 : STD_LOGIC;
    signal part_buffer_0_we1 : STD_LOGIC;
    signal part_buffer_1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal part_buffer_1_ce0 : STD_LOGIC;
    signal part_buffer_1_ce1 : STD_LOGIC;
    signal part_buffer_1_we1 : STD_LOGIC;
    signal i_0_reg_217 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_0_reg_229 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_phi_mux_window_2_2_phi_fu_278_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_window_2_2_reg_274 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln40_fu_405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln62_fu_640_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_2_2_read_as_fu_90 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal kernel_2_1_read_as_fu_94 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_2_0_read_as_fu_98 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_0_0_read_as_fu_102 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_0_1_read_as_fu_106 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_0_2_read_as_fu_110 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_1_0_read_as_fu_114 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_1_1_read_as_fu_118 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_1_2_read_as_fu_122 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_0_0_fu_134 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_1_0_fu_138 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_2_0_fu_142 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_0_1_fu_146 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_window_0_1_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_1_1_fu_150 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_window_1_1_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_2_1_fu_154 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_fu_303_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln40_1_fu_311_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln40_fu_299_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln40_2_fu_396_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln40_fu_400_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln46_1_fu_455_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal outrow_fu_459_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal row_fu_489_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln50_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_2_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_2_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln46_2_fu_509_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln46_1_fu_525_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_4_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_5_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_1_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal outcol_fu_660_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln46_3_fu_623_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_2_fu_665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln46_4_fu_634_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_3_fu_671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln73_1_fu_683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln73_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln16_1_fu_719_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln16_1_fu_719_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln16_6_fu_730_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln16_6_fu_730_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln16_2_fu_752_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln16_2_fu_752_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln16_5_fu_764_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln16_5_fu_764_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln16_27_fu_781_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln16_26_fu_778_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln16_31_fu_799_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln16_29_fu_796_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln16_6_fu_802_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln16_32_fu_808_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln16_28_fu_793_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln16_7_fu_812_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_828_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_828_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_828_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_835_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_835_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_835_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_842_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_842_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_842_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_849_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_849_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_849_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_856_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_856_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_856_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_828_ce : STD_LOGIC;
    signal grp_fu_835_ce : STD_LOGIC;
    signal grp_fu_842_ce : STD_LOGIC;
    signal grp_fu_849_ce : STD_LOGIC;
    signal grp_fu_856_ce : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_828_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_828_p20 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_835_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_835_p20 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_842_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_842_p20 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_849_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_849_p20 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_856_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_856_p20 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln16_1_fu_719_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln16_2_fu_752_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln16_5_fu_764_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln16_6_fu_730_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_condition_375 : BOOLEAN;

    component gauss_blur_mac_mudEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component gauss_blur_mac_mueOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component gauss_blur_part_bbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    part_buffer_0_U : component gauss_blur_part_bbkb
    generic map (
        DataWidth => 8,
        AddressRange => 1080,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => part_buffer_0_address0,
        ce0 => part_buffer_0_ce0,
        q0 => part_buffer_0_q0,
        address1 => part_buffer_0_addr_reg_1109_pp0_iter2_reg,
        ce1 => part_buffer_0_ce1,
        we1 => part_buffer_0_we1,
        d1 => window_1_2_reg_1139);

    part_buffer_1_U : component gauss_blur_part_bbkb
    generic map (
        DataWidth => 8,
        AddressRange => 1080,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => part_buffer_1_address0,
        ce0 => part_buffer_1_ce0,
        q0 => part_buffer_1_q0,
        address1 => part_buffer_1_addr_reg_1115,
        ce1 => part_buffer_1_ce1,
        we1 => part_buffer_1_we1,
        d1 => window_2_2_reg_274);

    gauss_blur_mac_mudEe_U1 : component gauss_blur_mac_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_828_p0,
        din1 => grp_fu_828_p1,
        din2 => grp_fu_828_p2,
        ce => grp_fu_828_ce,
        dout => grp_fu_828_p3);

    gauss_blur_mac_mudEe_U2 : component gauss_blur_mac_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_835_p0,
        din1 => grp_fu_835_p1,
        din2 => grp_fu_835_p2,
        ce => grp_fu_835_ce,
        dout => grp_fu_835_p3);

    gauss_blur_mac_mudEe_U3 : component gauss_blur_mac_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_842_p0,
        din1 => grp_fu_842_p1,
        din2 => grp_fu_842_p2,
        ce => grp_fu_842_ce,
        dout => grp_fu_842_p3);

    gauss_blur_mac_mudEe_U4 : component gauss_blur_mac_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_849_p0,
        din1 => grp_fu_849_p1,
        din2 => grp_fu_849_p2,
        ce => grp_fu_849_ce,
        dout => grp_fu_849_p3);

    gauss_blur_mac_mueOg_U5 : component gauss_blur_mac_mueOg
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 17,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_856_p0,
        din1 => grp_fu_856_p1,
        din2 => grp_fu_856_p2,
        ce => grp_fu_856_ce,
        dout => grp_fu_856_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((icmp_ln46_fu_477_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln38_fu_287_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter1_state7)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                elsif (((icmp_ln38_fu_287_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    col_0_reg_263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln46_fu_477_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                col_0_reg_263 <= col_fu_579_p2;
            elsif (((icmp_ln38_fu_287_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                col_0_reg_263 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    i_0_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_fu_384_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_217 <= i_reg_921;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_217 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln46_fu_477_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_241 <= add_ln46_fu_483_p2;
            elsif (((icmp_ln38_fu_287_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_241 <= ap_const_lv21_0;
            end if; 
        end if;
    end process;

    j_0_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_0_reg_229 <= j_reg_1018;
            elsif (((icmp_ln38_fu_287_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_229 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    row_0_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln46_fu_477_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                row_0_reg_252 <= select_ln46_5_fu_559_p3;
            elsif (((icmp_ln38_fu_287_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                row_0_reg_252 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    window_2_2_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_375)) then
                if (((ap_const_lv1_0 = and_ln50_reg_1080) and (icmp_ln46_reg_1038 = ap_const_lv1_0))) then 
                    window_2_2_reg_274 <= ap_const_lv8_0;
                elsif (((ap_const_lv1_1 = and_ln50_reg_1080) and (icmp_ln46_reg_1038 = ap_const_lv1_0))) then 
                    window_2_2_reg_274 <= inImage_dout;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    window_2_2_reg_274 <= ap_phi_reg_pp0_iter1_window_2_2_reg_274;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln68_reg_1121_pp0_iter3_reg) and (or_ln73_2_reg_1125_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln16_1_reg_1189 <= grp_fu_842_p3;
                add_ln16_4_reg_1194 <= grp_fu_849_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln68_reg_1121_pp0_iter4_reg) and (or_ln73_2_reg_1125_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln16_2_reg_1199 <= add_ln16_2_fu_784_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln68_reg_1121_pp0_iter2_reg) and (or_ln73_2_reg_1125_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln16_3_reg_1184 <= grp_fu_828_p3;
                add_ln16_reg_1179 <= grp_fu_835_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln16_3_reg_1184_pp0_iter4_reg <= add_ln16_3_reg_1184;
                add_ln16_3_reg_1184_pp0_iter5_reg <= add_ln16_3_reg_1184_pp0_iter4_reg;
                add_ln16_reg_1179_pp0_iter4_reg <= add_ln16_reg_1179;
                and_ln68_reg_1121_pp0_iter2_reg <= and_ln68_reg_1121;
                and_ln68_reg_1121_pp0_iter3_reg <= and_ln68_reg_1121_pp0_iter2_reg;
                and_ln68_reg_1121_pp0_iter4_reg <= and_ln68_reg_1121_pp0_iter3_reg;
                and_ln68_reg_1121_pp0_iter5_reg <= and_ln68_reg_1121_pp0_iter4_reg;
                and_ln68_reg_1121_pp0_iter6_reg <= and_ln68_reg_1121_pp0_iter5_reg;
                icmp_ln50_1_reg_1076_pp0_iter2_reg <= icmp_ln50_1_reg_1076_pp0_iter1_reg;
                or_ln73_2_reg_1125_pp0_iter2_reg <= or_ln73_2_reg_1125;
                or_ln73_2_reg_1125_pp0_iter3_reg <= or_ln73_2_reg_1125_pp0_iter2_reg;
                or_ln73_2_reg_1125_pp0_iter4_reg <= or_ln73_2_reg_1125_pp0_iter3_reg;
                or_ln73_2_reg_1125_pp0_iter5_reg <= or_ln73_2_reg_1125_pp0_iter4_reg;
                or_ln73_2_reg_1125_pp0_iter6_reg <= or_ln73_2_reg_1125_pp0_iter5_reg;
                part_buffer_0_addr_reg_1109_pp0_iter2_reg <= part_buffer_0_addr_reg_1109;
                window_1_0_load_reg_1089_pp0_iter2_reg <= window_1_0_load_reg_1089;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln68_reg_1121_pp0_iter4_reg) and (or_ln73_2_reg_1125_pp0_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln16_5_reg_1204 <= grp_fu_856_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln46_fu_477_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln69_1_reg_1065 <= add_ln69_1_fu_553_p2;
                and_ln50_reg_1080 <= and_ln50_fu_573_p2;
                icmp_ln47_reg_1047 <= icmp_ln47_fu_495_p2;
                icmp_ln50_1_reg_1076 <= icmp_ln50_1_fu_567_p2;
                select_ln46_2_reg_1060 <= select_ln46_2_fu_545_p3;
                select_ln46_reg_1053 <= select_ln46_fu_501_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln46_reg_1038 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln68_reg_1121 <= and_ln68_fu_655_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_921 <= i_fu_293_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln46_reg_1038 <= icmp_ln46_fu_477_p2;
                icmp_ln50_1_reg_1076_pp0_iter1_reg <= icmp_ln50_1_reg_1076;
                icmp_ln73_1_reg_1033 <= icmp_ln73_1_fu_471_p2;
                icmp_ln73_reg_1028 <= icmp_ln73_fu_465_p2;
                window_0_1_1_reg_1099 <= ap_sig_allocacmp_window_0_1_1;
                window_1_0_load_reg_1089 <= window_1_0_fu_138;
                window_1_1_1_reg_1104 <= ap_sig_allocacmp_window_1_1_1;
                window_2_0_load_reg_1094 <= window_2_0_fu_142;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_1018 <= j_fu_390_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((j_0_reg_229 = ap_const_lv2_0) and (i_0_reg_217 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                kernel_0_0_read_as_fu_102 <= gauss_kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((j_0_reg_229 = ap_const_lv2_1) and (i_0_reg_217 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                kernel_0_1_read_as_fu_106 <= gauss_kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((j_0_reg_229 = ap_const_lv2_1)) and not((j_0_reg_229 = ap_const_lv2_0)) and (i_0_reg_217 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                kernel_0_2_read_as_fu_110 <= gauss_kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_0_reg_217 = ap_const_lv2_1) and (j_0_reg_229 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                kernel_1_0_read_as_fu_114 <= gauss_kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((j_0_reg_229 = ap_const_lv2_1) and (i_0_reg_217 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                kernel_1_1_read_as_fu_118 <= gauss_kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((j_0_reg_229 = ap_const_lv2_1)) and not((j_0_reg_229 = ap_const_lv2_0)) and (i_0_reg_217 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                kernel_1_2_read_as_fu_122 <= gauss_kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((i_0_reg_217 = ap_const_lv2_1)) and not((i_0_reg_217 = ap_const_lv2_0)) and (j_0_reg_229 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                kernel_2_0_read_as_fu_98 <= gauss_kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((i_0_reg_217 = ap_const_lv2_1)) and not((i_0_reg_217 = ap_const_lv2_0)) and (j_0_reg_229 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                kernel_2_1_read_as_fu_94 <= gauss_kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((j_0_reg_229 = ap_const_lv2_1)) and not((j_0_reg_229 = ap_const_lv2_0)) and not((i_0_reg_217 = ap_const_lv2_1)) and not((i_0_reg_217 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                kernel_2_2_read_as_fu_90 <= gauss_kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln68_reg_1121) and (or_ln73_2_reg_1125 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln16_1_reg_1144 <= mul_ln16_1_fu_719_p2;
                mul_ln16_6_reg_1154 <= mul_ln16_6_fu_730_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln68_reg_1121_pp0_iter2_reg) and (or_ln73_2_reg_1125_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln16_2_reg_1164 <= mul_ln16_2_fu_752_p2;
                mul_ln16_5_reg_1174 <= mul_ln16_5_fu_764_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln68_fu_655_p2) and (icmp_ln46_reg_1038 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                or_ln73_2_reg_1125 <= or_ln73_2_fu_689_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln50_1_reg_1076 = ap_const_lv1_1) and (icmp_ln46_reg_1038 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                part_buffer_0_addr_reg_1109 <= zext_ln62_fu_640_p1(11 - 1 downto 0);
                part_buffer_1_addr_reg_1115 <= zext_ln62_fu_640_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_287_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                sub_ln40_reg_926 <= sub_ln40_fu_315_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln68_reg_1121_pp0_iter5_reg) and (or_ln73_2_reg_1125_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                trunc_ln_reg_1209 <= add_ln16_7_fu_812_p2(11 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                window_0_0_fu_134 <= ap_sig_allocacmp_window_0_1_1;
                window_1_0_fu_138 <= ap_sig_allocacmp_window_1_1_1;
                window_2_0_fu_142 <= window_2_1_fu_154;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln50_1_reg_1076_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                window_0_1_fu_146 <= part_buffer_0_q0;
                window_1_1_fu_150 <= part_buffer_1_q0;
                window_1_2_reg_1139 <= part_buffer_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln50_1_reg_1076 = ap_const_lv1_1) and (icmp_ln46_reg_1038 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                window_2_1_fu_154 <= ap_phi_mux_window_2_2_phi_fu_278_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_287_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln16_1_reg_975(7 downto 0) <= zext_ln16_1_fu_352_p1(7 downto 0);
                    zext_ln16_2_reg_980(7 downto 0) <= zext_ln16_2_fu_356_p1(7 downto 0);
                    zext_ln16_3_reg_985(7 downto 0) <= zext_ln16_3_fu_360_p1(7 downto 0);
                    zext_ln16_4_reg_990(7 downto 0) <= zext_ln16_4_fu_364_p1(7 downto 0);
                    zext_ln16_5_reg_995(7 downto 0) <= zext_ln16_5_fu_368_p1(7 downto 0);
                    zext_ln16_6_reg_1000(7 downto 0) <= zext_ln16_6_fu_372_p1(7 downto 0);
                    zext_ln16_7_reg_1005(7 downto 0) <= zext_ln16_7_fu_376_p1(7 downto 0);
                    zext_ln16_reg_970(7 downto 0) <= zext_ln16_fu_348_p1(7 downto 0);
                    zext_ln46_reg_1010(7 downto 0) <= zext_ln46_fu_380_p1(7 downto 0);
            end if;
        end if;
    end process;
    zext_ln16_reg_970(15 downto 8) <= "00000000";
    zext_ln16_1_reg_975(15 downto 8) <= "00000000";
    zext_ln16_2_reg_980(15 downto 8) <= "00000000";
    zext_ln16_3_reg_985(15 downto 8) <= "00000000";
    zext_ln16_4_reg_990(15 downto 8) <= "00000000";
    zext_ln16_5_reg_995(15 downto 8) <= "00000000";
    zext_ln16_6_reg_1000(15 downto 8) <= "00000000";
    zext_ln16_7_reg_1005(15 downto 8) <= "00000000";
    zext_ln46_reg_1010(15 downto 8) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, icmp_ln38_fu_287_p2, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln39_fu_384_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln38_fu_287_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln39_fu_384_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln16_2_fu_784_p2 <= std_logic_vector(unsigned(zext_ln16_27_fu_781_p1) + unsigned(zext_ln16_26_fu_778_p1));
    add_ln16_6_fu_802_p2 <= std_logic_vector(unsigned(zext_ln16_31_fu_799_p1) + unsigned(zext_ln16_29_fu_796_p1));
    add_ln16_7_fu_812_p2 <= std_logic_vector(unsigned(zext_ln16_32_fu_808_p1) + unsigned(zext_ln16_28_fu_793_p1));
    add_ln40_fu_400_p2 <= std_logic_vector(unsigned(sub_ln40_reg_926) + unsigned(zext_ln40_2_fu_396_p1));
    add_ln46_fu_483_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_241) + unsigned(ap_const_lv21_1));
    add_ln69_1_fu_553_p2 <= std_logic_vector(unsigned(zext_ln46_2_fu_509_p1) + unsigned(ap_const_lv12_FFF));
    and_ln50_fu_573_p2 <= (select_ln46_1_fu_525_p3 and icmp_ln50_1_fu_567_p2);
    and_ln68_fu_655_p2 <= (select_ln46_2_reg_1060 and icmp_ln68_1_fu_650_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(6);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(inImage_empty_n, outImage_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, ap_predicate_op150_read_state7, ap_predicate_op233_write_state13, ap_predicate_op235_write_state13)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (((outImage_full_n = ap_const_logic_0) and (ap_predicate_op235_write_state13 = ap_const_boolean_1)) or ((outImage_full_n = ap_const_logic_0) and (ap_predicate_op233_write_state13 = ap_const_boolean_1)))) or ((inImage_empty_n = ap_const_logic_0) and (ap_predicate_op150_read_state7 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(inImage_empty_n, outImage_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, ap_predicate_op150_read_state7, ap_predicate_op233_write_state13, ap_predicate_op235_write_state13)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (((outImage_full_n = ap_const_logic_0) and (ap_predicate_op235_write_state13 = ap_const_boolean_1)) or ((outImage_full_n = ap_const_logic_0) and (ap_predicate_op233_write_state13 = ap_const_boolean_1)))) or ((inImage_empty_n = ap_const_logic_0) and (ap_predicate_op150_read_state7 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(inImage_empty_n, outImage_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, ap_predicate_op150_read_state7, ap_predicate_op233_write_state13, ap_predicate_op235_write_state13)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (((outImage_full_n = ap_const_logic_0) and (ap_predicate_op235_write_state13 = ap_const_boolean_1)) or ((outImage_full_n = ap_const_logic_0) and (ap_predicate_op233_write_state13 = ap_const_boolean_1)))) or ((inImage_empty_n = ap_const_logic_0) and (ap_predicate_op150_read_state7 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_pp0_stage0_iter7_assign_proc : process(outImage_full_n, ap_predicate_op233_write_state13, ap_predicate_op235_write_state13)
    begin
                ap_block_state13_pp0_stage0_iter7 <= (((outImage_full_n = ap_const_logic_0) and (ap_predicate_op235_write_state13 = ap_const_boolean_1)) or ((outImage_full_n = ap_const_logic_0) and (ap_predicate_op233_write_state13 = ap_const_boolean_1)));
    end process;

        ap_block_state6_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage0_iter1_assign_proc : process(inImage_empty_n, ap_predicate_op150_read_state7)
    begin
                ap_block_state7_pp0_stage0_iter1 <= ((inImage_empty_n = ap_const_logic_0) and (ap_predicate_op150_read_state7 = ap_const_boolean_1));
    end process;

        ap_block_state8_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_375_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_375 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_pp0_exit_iter1_state7_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter1_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_window_2_2_phi_fu_278_p4_assign_proc : process(inImage_dout, icmp_ln46_reg_1038, and_ln50_reg_1080, ap_phi_reg_pp0_iter1_window_2_2_reg_274)
    begin
        if ((icmp_ln46_reg_1038 = ap_const_lv1_0)) then
            if ((ap_const_lv1_0 = and_ln50_reg_1080)) then 
                ap_phi_mux_window_2_2_phi_fu_278_p4 <= ap_const_lv8_0;
            elsif ((ap_const_lv1_1 = and_ln50_reg_1080)) then 
                ap_phi_mux_window_2_2_phi_fu_278_p4 <= inImage_dout;
            else 
                ap_phi_mux_window_2_2_phi_fu_278_p4 <= ap_phi_reg_pp0_iter1_window_2_2_reg_274;
            end if;
        else 
            ap_phi_mux_window_2_2_phi_fu_278_p4 <= ap_phi_reg_pp0_iter1_window_2_2_reg_274;
        end if; 
    end process;

    ap_phi_reg_pp0_iter1_window_2_2_reg_274 <= "XXXXXXXX";

    ap_predicate_op150_read_state7_assign_proc : process(icmp_ln46_reg_1038, and_ln50_reg_1080)
    begin
                ap_predicate_op150_read_state7 <= ((ap_const_lv1_1 = and_ln50_reg_1080) and (icmp_ln46_reg_1038 = ap_const_lv1_0));
    end process;


    ap_predicate_op233_write_state13_assign_proc : process(and_ln68_reg_1121_pp0_iter6_reg, or_ln73_2_reg_1125_pp0_iter6_reg)
    begin
                ap_predicate_op233_write_state13 <= ((ap_const_lv1_1 = and_ln68_reg_1121_pp0_iter6_reg) and (or_ln73_2_reg_1125_pp0_iter6_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op235_write_state13_assign_proc : process(and_ln68_reg_1121_pp0_iter6_reg, or_ln73_2_reg_1125_pp0_iter6_reg)
    begin
                ap_predicate_op235_write_state13 <= ((or_ln73_2_reg_1125_pp0_iter6_reg = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln68_reg_1121_pp0_iter6_reg));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_window_0_1_1_assign_proc : process(ap_block_pp0_stage0, icmp_ln50_1_reg_1076_pp0_iter1_reg, ap_enable_reg_pp0_iter2, part_buffer_0_q0, window_0_1_fu_146)
    begin
        if (((icmp_ln50_1_reg_1076_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_sig_allocacmp_window_0_1_1 <= part_buffer_0_q0;
        else 
            ap_sig_allocacmp_window_0_1_1 <= window_0_1_fu_146;
        end if; 
    end process;


    ap_sig_allocacmp_window_1_1_1_assign_proc : process(ap_block_pp0_stage0, icmp_ln50_1_reg_1076_pp0_iter1_reg, part_buffer_1_q0, ap_enable_reg_pp0_iter2, window_1_1_fu_150)
    begin
        if (((icmp_ln50_1_reg_1076_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_sig_allocacmp_window_1_1_1 <= part_buffer_1_q0;
        else 
            ap_sig_allocacmp_window_1_1_1 <= window_1_1_fu_150;
        end if; 
    end process;

    col_fu_579_p2 <= std_logic_vector(unsigned(select_ln46_fu_501_p3) + unsigned(ap_const_lv11_1));
    gauss_kernel_address0 <= sext_ln40_fu_405_p1(4 - 1 downto 0);

    gauss_kernel_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            gauss_kernel_ce0 <= ap_const_logic_1;
        else 
            gauss_kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_828_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_828_ce <= ap_const_logic_1;
        else 
            grp_fu_828_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_828_p0 <= grp_fu_828_p00(8 - 1 downto 0);
    grp_fu_828_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_0_0_fu_134),16));
    grp_fu_828_p1 <= zext_ln16_reg_970(8 - 1 downto 0);
    grp_fu_828_p2 <= grp_fu_828_p20(16 - 1 downto 0);
    grp_fu_828_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln16_1_reg_1144),17));

    grp_fu_835_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_835_ce <= ap_const_logic_1;
        else 
            grp_fu_835_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_835_p0 <= grp_fu_835_p00(8 - 1 downto 0);
    grp_fu_835_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_2_1_fu_154),16));
    grp_fu_835_p1 <= zext_ln16_7_reg_1005(8 - 1 downto 0);
    grp_fu_835_p2 <= grp_fu_835_p20(16 - 1 downto 0);
    grp_fu_835_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln16_6_reg_1154),17));

    grp_fu_842_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_842_ce <= ap_const_logic_1;
        else 
            grp_fu_842_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_842_p0 <= grp_fu_842_p00(8 - 1 downto 0);
    grp_fu_842_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_1_1_1_reg_1104),16));
    grp_fu_842_p1 <= zext_ln16_4_reg_990(8 - 1 downto 0);
    grp_fu_842_p2 <= grp_fu_842_p20(16 - 1 downto 0);
    grp_fu_842_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln16_5_reg_1174),17));

    grp_fu_849_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_849_ce <= ap_const_logic_1;
        else 
            grp_fu_849_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_849_p0 <= grp_fu_849_p00(8 - 1 downto 0);
    grp_fu_849_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_2_1_fu_154),16));
    grp_fu_849_p1 <= zext_ln46_reg_1010(8 - 1 downto 0);
    grp_fu_849_p2 <= grp_fu_849_p20(16 - 1 downto 0);
    grp_fu_849_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln16_2_reg_1164),17));

    grp_fu_856_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_856_ce <= ap_const_logic_1;
        else 
            grp_fu_856_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_856_p0 <= grp_fu_856_p00(8 - 1 downto 0);
    grp_fu_856_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_1_0_load_reg_1089_pp0_iter2_reg),16));
    grp_fu_856_p1 <= zext_ln16_3_reg_985(8 - 1 downto 0);
    grp_fu_856_p2 <= grp_fu_856_p20(17 - 1 downto 0);
    grp_fu_856_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_4_reg_1194),18));
    i_fu_293_p2 <= std_logic_vector(unsigned(i_0_reg_217) + unsigned(ap_const_lv2_1));
    icmp_ln38_fu_287_p2 <= "1" when (i_0_reg_217 = ap_const_lv2_3) else "0";
    icmp_ln39_fu_384_p2 <= "1" when (j_0_reg_229 = ap_const_lv2_3) else "0";
    icmp_ln46_fu_477_p2 <= "1" when (indvar_flatten_reg_241 = ap_const_lv21_1FAFB9) else "0";
    icmp_ln47_fu_495_p2 <= "1" when (col_0_reg_263 = ap_const_lv11_439) else "0";
    icmp_ln50_1_fu_567_p2 <= "1" when (unsigned(select_ln46_fu_501_p3) < unsigned(ap_const_lv11_438)) else "0";
    icmp_ln50_2_fu_519_p2 <= "1" when (unsigned(row_0_reg_252) < unsigned(ap_const_lv11_780)) else "0";
    icmp_ln50_fu_513_p2 <= "1" when (unsigned(row_fu_489_p2) < unsigned(ap_const_lv11_780)) else "0";
    icmp_ln68_1_fu_650_p2 <= "0" when (select_ln46_reg_1053 = ap_const_lv11_0) else "1";
    icmp_ln68_2_fu_539_p2 <= "0" when (row_0_reg_252 = ap_const_lv11_0) else "1";
    icmp_ln68_fu_533_p2 <= "0" when (row_fu_489_p2 = ap_const_lv11_0) else "1";
    icmp_ln73_1_fu_471_p2 <= "1" when (outrow_fu_459_p2 = ap_const_lv12_77F) else "0";
    icmp_ln73_2_fu_665_p2 <= "1" when (outcol_fu_660_p2 = ap_const_lv11_0) else "0";
    icmp_ln73_3_fu_671_p2 <= "1" when (outcol_fu_660_p2 = ap_const_lv11_437) else "0";
    icmp_ln73_4_fu_618_p2 <= "1" when (add_ln69_1_reg_1065 = ap_const_lv12_0) else "0";
    icmp_ln73_5_fu_629_p2 <= "1" when (add_ln69_1_reg_1065 = ap_const_lv12_77F) else "0";
    icmp_ln73_fu_465_p2 <= "1" when (outrow_fu_459_p2 = ap_const_lv12_0) else "0";

    inImage_blk_n_assign_proc : process(inImage_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln46_reg_1038, and_ln50_reg_1080)
    begin
        if (((ap_const_lv1_1 = and_ln50_reg_1080) and (icmp_ln46_reg_1038 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inImage_blk_n <= inImage_empty_n;
        else 
            inImage_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    inImage_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op150_read_state7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op150_read_state7 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            inImage_read <= ap_const_logic_1;
        else 
            inImage_read <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_390_p2 <= std_logic_vector(unsigned(j_0_reg_229) + unsigned(ap_const_lv2_1));
    mul_ln16_1_fu_719_p0 <= mul_ln16_1_fu_719_p00(8 - 1 downto 0);
    mul_ln16_1_fu_719_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_0_1_1_reg_1099),16));
    mul_ln16_1_fu_719_p1 <= zext_ln16_1_reg_975(8 - 1 downto 0);
    mul_ln16_1_fu_719_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln16_1_fu_719_p0) * unsigned(mul_ln16_1_fu_719_p1), 16));
    mul_ln16_2_fu_752_p0 <= mul_ln16_2_fu_752_p00(8 - 1 downto 0);
    mul_ln16_2_fu_752_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_0_1_fu_146),16));
    mul_ln16_2_fu_752_p1 <= zext_ln16_2_reg_980(8 - 1 downto 0);
    mul_ln16_2_fu_752_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln16_2_fu_752_p0) * unsigned(mul_ln16_2_fu_752_p1), 16));
    mul_ln16_5_fu_764_p0 <= mul_ln16_5_fu_764_p00(8 - 1 downto 0);
    mul_ln16_5_fu_764_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_1_1_fu_150),16));
    mul_ln16_5_fu_764_p1 <= zext_ln16_5_reg_995(8 - 1 downto 0);
    mul_ln16_5_fu_764_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln16_5_fu_764_p0) * unsigned(mul_ln16_5_fu_764_p1), 16));
    mul_ln16_6_fu_730_p0 <= mul_ln16_6_fu_730_p00(8 - 1 downto 0);
    mul_ln16_6_fu_730_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_2_0_load_reg_1094),16));
    mul_ln16_6_fu_730_p1 <= zext_ln16_6_reg_1000(8 - 1 downto 0);
    mul_ln16_6_fu_730_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln16_6_fu_730_p0) * unsigned(mul_ln16_6_fu_730_p1), 16));
    or_ln73_1_fu_683_p2 <= (select_ln46_4_fu_634_p3 or icmp_ln73_3_fu_671_p2);
    or_ln73_2_fu_689_p2 <= (or_ln73_fu_677_p2 or or_ln73_1_fu_683_p2);
    or_ln73_fu_677_p2 <= (select_ln46_3_fu_623_p3 or icmp_ln73_2_fu_665_p2);

    outImage_blk_n_assign_proc : process(outImage_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter7, and_ln68_reg_1121_pp0_iter6_reg, or_ln73_2_reg_1125_pp0_iter6_reg)
    begin
        if ((((ap_const_lv1_1 = and_ln68_reg_1121_pp0_iter6_reg) and (or_ln73_2_reg_1125_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((or_ln73_2_reg_1125_pp0_iter6_reg = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln68_reg_1121_pp0_iter6_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)))) then 
            outImage_blk_n <= outImage_full_n;
        else 
            outImage_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    outImage_din_assign_proc : process(ap_enable_reg_pp0_iter7, ap_predicate_op233_write_state13, ap_predicate_op235_write_state13, trunc_ln_reg_1209, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then
            if ((ap_predicate_op235_write_state13 = ap_const_boolean_1)) then 
                outImage_din <= ap_const_lv8_0;
            elsif ((ap_predicate_op233_write_state13 = ap_const_boolean_1)) then 
                outImage_din <= trunc_ln_reg_1209;
            else 
                outImage_din <= "XXXXXXXX";
            end if;
        else 
            outImage_din <= "XXXXXXXX";
        end if; 
    end process;


    outImage_write_assign_proc : process(ap_enable_reg_pp0_iter7, ap_predicate_op233_write_state13, ap_predicate_op235_write_state13, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_predicate_op235_write_state13 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_predicate_op233_write_state13 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            outImage_write <= ap_const_logic_1;
        else 
            outImage_write <= ap_const_logic_0;
        end if; 
    end process;

    outcol_fu_660_p2 <= std_logic_vector(unsigned(select_ln46_reg_1053) + unsigned(ap_const_lv11_7FF));
    outrow_fu_459_p2 <= std_logic_vector(unsigned(zext_ln46_1_fu_455_p1) + unsigned(ap_const_lv12_FFF));
    part_buffer_0_address0 <= zext_ln62_fu_640_p1(11 - 1 downto 0);

    part_buffer_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            part_buffer_0_ce0 <= ap_const_logic_1;
        else 
            part_buffer_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    part_buffer_0_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            part_buffer_0_ce1 <= ap_const_logic_1;
        else 
            part_buffer_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    part_buffer_0_we1_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln50_1_reg_1076_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((icmp_ln50_1_reg_1076_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            part_buffer_0_we1 <= ap_const_logic_1;
        else 
            part_buffer_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    part_buffer_1_address0 <= zext_ln62_fu_640_p1(11 - 1 downto 0);

    part_buffer_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            part_buffer_1_ce0 <= ap_const_logic_1;
        else 
            part_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    part_buffer_1_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            part_buffer_1_ce1 <= ap_const_logic_1;
        else 
            part_buffer_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    part_buffer_1_we1_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln50_1_reg_1076_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln50_1_reg_1076_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            part_buffer_1_we1 <= ap_const_logic_1;
        else 
            part_buffer_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    row_fu_489_p2 <= std_logic_vector(unsigned(row_0_reg_252) + unsigned(ap_const_lv11_1));
    select_ln46_1_fu_525_p3 <= 
        icmp_ln50_fu_513_p2 when (icmp_ln47_fu_495_p2(0) = '1') else 
        icmp_ln50_2_fu_519_p2;
    select_ln46_2_fu_545_p3 <= 
        icmp_ln68_fu_533_p2 when (icmp_ln47_fu_495_p2(0) = '1') else 
        icmp_ln68_2_fu_539_p2;
    select_ln46_3_fu_623_p3 <= 
        icmp_ln73_4_fu_618_p2 when (icmp_ln47_reg_1047(0) = '1') else 
        icmp_ln73_reg_1028;
    select_ln46_4_fu_634_p3 <= 
        icmp_ln73_5_fu_629_p2 when (icmp_ln47_reg_1047(0) = '1') else 
        icmp_ln73_1_reg_1033;
    select_ln46_5_fu_559_p3 <= 
        row_fu_489_p2 when (icmp_ln47_fu_495_p2(0) = '1') else 
        row_0_reg_252;
    select_ln46_fu_501_p3 <= 
        ap_const_lv11_0 when (icmp_ln47_fu_495_p2(0) = '1') else 
        col_0_reg_263;
        sext_ln40_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln40_fu_400_p2),64));

    sub_ln40_fu_315_p2 <= std_logic_vector(unsigned(zext_ln40_1_fu_311_p1) - unsigned(zext_ln40_fu_299_p1));
    tmp_fu_303_p3 <= (i_0_reg_217 & ap_const_lv2_0);
    zext_ln16_1_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kernel_0_1_read_as_fu_106),16));
    zext_ln16_26_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_reg_1179_pp0_iter4_reg),18));
    zext_ln16_27_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_1_reg_1189),18));
    zext_ln16_28_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_2_reg_1199),20));
    zext_ln16_29_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_3_reg_1184_pp0_iter5_reg),19));
    zext_ln16_2_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kernel_0_2_read_as_fu_110),16));
    zext_ln16_31_fu_799_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_5_reg_1204),19));
    zext_ln16_32_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_6_fu_802_p2),20));
    zext_ln16_3_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kernel_1_0_read_as_fu_114),16));
    zext_ln16_4_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kernel_1_1_read_as_fu_118),16));
    zext_ln16_5_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kernel_1_2_read_as_fu_122),16));
    zext_ln16_6_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kernel_2_0_read_as_fu_98),16));
    zext_ln16_7_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kernel_2_1_read_as_fu_94),16));
    zext_ln16_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kernel_0_0_read_as_fu_102),16));
    zext_ln40_1_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_303_p3),5));
    zext_ln40_2_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_229),5));
    zext_ln40_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_217),5));
    zext_ln46_1_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_0_reg_252),12));
    zext_ln46_2_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_fu_489_p2),12));
    zext_ln46_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kernel_2_2_read_as_fu_90),16));
    zext_ln62_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln46_reg_1053),64));
end behav;
