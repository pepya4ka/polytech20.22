-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gauss_blur is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inImage_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    inImage_empty_n : IN STD_LOGIC;
    inImage_read : OUT STD_LOGIC;
    gauss_kernel_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    gauss_kernel_ce0 : OUT STD_LOGIC;
    gauss_kernel_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    outImage_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    outImage_full_n : IN STD_LOGIC;
    outImage_write : OUT STD_LOGIC );
end;


architecture behav of gauss_blur is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "gauss_blur,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12t-csg325-1Q,HLS_INPUT_CLOCK=6.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.685000,HLS_SYN_LAT=4009490,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=2,HLS_SYN_FF=335,HLS_SYN_LUT=682,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv10_281 : STD_LOGIC_VECTOR (9 downto 0) := "1010000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_27F : STD_LOGIC_VECTOR (10 downto 0) := "01001111111";
    constant ap_const_lv9_1E1 : STD_LOGIC_VECTOR (8 downto 0) := "111100001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_1E0 : STD_LOGIC_VECTOR (8 downto 0) := "111100000";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv9_1DF : STD_LOGIC_VECTOR (8 downto 0) := "111011111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal inImage_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln47_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln50_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal outImage_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal and_ln68_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln73_2_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal and_ln68_reg_1035 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln73_2_reg_1039 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_345_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_892 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_ln40_fu_367_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln40_reg_897 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln38_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_379_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_959 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln39_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_fu_454_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal row_reg_972 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln50_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_977 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_982 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_reg_987 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_1_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_1_reg_992 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_fu_496_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_reg_1000 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_predicate_op114_read_state7 : BOOLEAN;
    signal ap_block_state7 : BOOLEAN;
    signal icmp_ln50_1_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_1_reg_1005 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_519_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal part_buffer_0_addr_reg_1020 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln55_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal part_buffer_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_1_2_reg_1030 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_predicate_op169_write_state10 : BOOLEAN;
    signal ap_block_state10 : BOOLEAN;
    signal i_2_fu_651_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_1046 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_predicate_op197_write_state11 : BOOLEAN;
    signal ap_block_state11 : BOOLEAN;
    signal tmp_4_fu_675_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_1051 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_687_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_1056 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal mul_ln16_1_fu_798_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln16_1_reg_1081 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_819_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln16_reg_1086 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_827_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln16_1_reg_1091 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal add_ln16_2_fu_813_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal part_buffer_0_ce0 : STD_LOGIC;
    signal part_buffer_0_we0 : STD_LOGIC;
    signal part_buffer_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal part_buffer_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal part_buffer_1_ce0 : STD_LOGIC;
    signal part_buffer_1_we0 : STD_LOGIC;
    signal i_0_reg_226 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_0_reg_238 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal row_0_reg_250 : STD_LOGIC_VECTOR (9 downto 0);
    signal col_0_reg_261 : STD_LOGIC_VECTOR (8 downto 0);
    signal window_2_2_reg_273 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_i1_0_phi_fu_290_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal i1_0_reg_286 : STD_LOGIC_VECTOR (1 downto 0);
    signal result_0_i_reg_297 : STD_LOGIC_VECTOR (19 downto 0);
    signal i_0_i_reg_309 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln40_fu_394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln62_fu_579_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_2_2_fu_96 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal kernel_2_2_1_fu_100 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_2_2_2_fu_104 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_2_2_3_fu_108 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_2_2_4_fu_112 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_2_2_5_fu_116 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_2_2_6_fu_120 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_2_2_7_fu_124 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_2_2_8_fu_128 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_2_0_fu_140 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_0_0_fu_525_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_2_1_fu_144 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_0_1_fu_537_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_0_2_1_fu_148 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_2_0_1_fu_152 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_2_1_1_fu_156 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_1_2_1_fu_160 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_2_0_2_fu_164 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_2_1_2_fu_168 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_2_2_1_fu_172 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_355_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln40_1_fu_363_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln40_fu_351_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln40_2_fu_385_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln40_fu_389_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln46_fu_444_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal outrow_fu_472_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln68_1_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal outcol_fu_611_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln73_2_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_3_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln73_1_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln73_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_699_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_715_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_760_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_776_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln16_1_fu_798_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln16_1_fu_798_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln16_10_fu_810_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_819_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_819_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_819_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_827_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_827_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_827_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_819_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_819_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_819_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_819_p20 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_827_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_827_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_827_p20 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln16_1_fu_798_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln16_1_fu_798_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_condition_143 : BOOLEAN;

    component gauss_blur_mux_32dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component gauss_blur_mac_mueOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component gauss_blur_mac_mufYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component gauss_blur_part_bbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    part_buffer_0_U : component gauss_blur_part_bbkb
    generic map (
        DataWidth => 8,
        AddressRange => 480,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => part_buffer_0_addr_reg_1020,
        ce0 => part_buffer_0_ce0,
        we0 => part_buffer_0_we0,
        d0 => window_1_2_reg_1030,
        q0 => part_buffer_0_q0);

    part_buffer_1_U : component gauss_blur_part_bbkb
    generic map (
        DataWidth => 8,
        AddressRange => 480,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => part_buffer_1_address0,
        ce0 => part_buffer_1_ce0,
        we0 => part_buffer_1_we0,
        d0 => window_2_2_reg_273,
        q0 => part_buffer_1_q0);

    gauss_blur_mux_32dEe_U1 : component gauss_blur_mux_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => window_2_1_fu_144,
        din1 => window_2_1_1_fu_156,
        din2 => window_2_1_2_fu_168,
        din3 => i1_0_reg_286,
        dout => window_0_0_fu_525_p5);

    gauss_blur_mux_32dEe_U2 : component gauss_blur_mux_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => window_0_2_1_fu_148,
        din1 => window_1_2_1_fu_160,
        din2 => window_2_2_1_fu_172,
        din3 => i1_0_reg_286,
        dout => window_0_1_fu_537_p5);

    gauss_blur_mux_32dEe_U3 : component gauss_blur_mux_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => window_2_1_fu_144,
        din1 => window_2_1_1_fu_156,
        din2 => window_2_1_2_fu_168,
        din3 => i_0_i_reg_309,
        dout => tmp_4_fu_675_p5);

    gauss_blur_mux_32dEe_U4 : component gauss_blur_mux_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => kernel_2_2_1_fu_100,
        din1 => kernel_2_2_4_fu_112,
        din2 => kernel_2_2_7_fu_124,
        din3 => i_0_i_reg_309,
        dout => tmp_5_fu_687_p5);

    gauss_blur_mux_32dEe_U5 : component gauss_blur_mux_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => window_0_2_1_fu_148,
        din1 => window_1_2_1_fu_160,
        din2 => window_2_2_1_fu_172,
        din3 => i_0_i_reg_309,
        dout => tmp_6_fu_699_p5);

    gauss_blur_mux_32dEe_U6 : component gauss_blur_mux_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => kernel_2_2_2_fu_104,
        din1 => kernel_2_2_5_fu_116,
        din2 => kernel_2_2_8_fu_128,
        din3 => i_0_i_reg_309,
        dout => tmp_7_fu_715_p5);

    gauss_blur_mux_32dEe_U7 : component gauss_blur_mux_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => window_2_0_fu_140,
        din1 => window_2_0_1_fu_152,
        din2 => window_2_0_2_fu_164,
        din3 => i_0_i_reg_309,
        dout => tmp_2_fu_760_p5);

    gauss_blur_mux_32dEe_U8 : component gauss_blur_mux_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => kernel_2_2_fu_96,
        din1 => kernel_2_2_3_fu_108,
        din2 => kernel_2_2_6_fu_120,
        din3 => i_0_i_reg_309,
        dout => tmp_3_fu_776_p5);

    gauss_blur_mac_mueOg_U9 : component gauss_blur_mac_mueOg
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_819_p0,
        din1 => grp_fu_819_p1,
        din2 => grp_fu_819_p2,
        ce => grp_fu_819_ce,
        dout => grp_fu_819_p3);

    gauss_blur_mac_mufYi_U10 : component gauss_blur_mac_mufYi
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 17,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_827_p0,
        din1 => grp_fu_827_p1,
        din2 => grp_fu_827_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_827_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    col_0_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op197_write_state11 = ap_const_boolean_1) and (outImage_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11) and ((ap_const_lv1_0 = and_ln68_reg_1035) or ((icmp_ln14_fu_645_p2 = ap_const_lv1_1) or (or_ln73_2_reg_1039 = ap_const_lv1_1))))) then 
                col_0_reg_261 <= col_reg_1000;
            elsif (((icmp_ln46_fu_448_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                col_0_reg_261 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i1_0_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_fu_513_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i1_0_reg_286 <= i_1_fu_519_p2;
            elsif ((not(((ap_predicate_op114_read_state7 = ap_const_boolean_1) and (inImage_empty_n = ap_const_logic_0))) and (icmp_ln47_fu_490_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i1_0_reg_286 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op169_write_state10 = ap_const_boolean_1) and (outImage_full_n = ap_const_logic_0))) and (ap_const_lv1_1 = and_ln68_fu_606_p2) and (or_ln73_2_fu_639_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_0_i_reg_309 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_0_i_reg_309 <= i_2_reg_1046;
            end if; 
        end if;
    end process;

    i_0_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_fu_373_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_226 <= i_reg_892;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_226 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_0_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_0_reg_238 <= j_reg_959;
            elsif (((icmp_ln38_fu_339_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_238 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    result_0_i_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op169_write_state10 = ap_const_boolean_1) and (outImage_full_n = ap_const_logic_0))) and (ap_const_lv1_1 = and_ln68_fu_606_p2) and (or_ln73_2_fu_639_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                result_0_i_reg_297 <= ap_const_lv20_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                result_0_i_reg_297 <= add_ln16_2_fu_813_p2;
            end if; 
        end if;
    end process;

    row_0_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_339_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                row_0_reg_250 <= ap_const_lv10_0;
            elsif ((not(((ap_predicate_op114_read_state7 = ap_const_boolean_1) and (inImage_empty_n = ap_const_logic_0))) and (icmp_ln47_fu_490_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                row_0_reg_250 <= row_reg_972;
            end if; 
        end if;
    end process;

    window_2_2_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_143)) then
                if ((ap_const_lv1_0 = and_ln50_fu_508_p2)) then 
                    window_2_2_reg_273 <= ap_const_lv8_0;
                elsif ((ap_const_lv1_1 = and_ln50_fu_508_p2)) then 
                    window_2_2_reg_273 <= inImage_dout;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                add_ln16_1_reg_1091 <= grp_fu_827_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                add_ln16_reg_1086 <= grp_fu_819_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op169_write_state10 = ap_const_boolean_1) and (outImage_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                and_ln68_reg_1035 <= and_ln68_fu_606_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op114_read_state7 = ap_const_boolean_1) and (inImage_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                col_reg_1000 <= col_fu_496_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op197_write_state11 = ap_const_boolean_1) and (outImage_full_n = ap_const_logic_0))) and (ap_const_lv1_1 = and_ln68_reg_1035) and (or_ln73_2_reg_1039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                i_2_reg_1046 <= i_2_fu_651_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_892 <= i_fu_345_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op114_read_state7 = ap_const_boolean_1) and (inImage_empty_n = ap_const_logic_0))) and (icmp_ln47_fu_490_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                icmp_ln50_1_reg_1005 <= icmp_ln50_1_fu_502_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln46_fu_448_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                icmp_ln50_reg_977 <= icmp_ln50_fu_460_p2;
                icmp_ln68_reg_982 <= icmp_ln68_fu_466_p2;
                icmp_ln73_1_reg_992 <= icmp_ln73_1_fu_484_p2;
                icmp_ln73_reg_987 <= icmp_ln73_fu_478_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_959 <= j_fu_379_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((j_0_reg_238 = ap_const_lv2_1) and (i_0_reg_226 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                kernel_2_2_1_fu_100 <= gauss_kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((j_0_reg_238 = ap_const_lv2_1)) and not((j_0_reg_238 = ap_const_lv2_0)) and (i_0_reg_226 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                kernel_2_2_2_fu_104 <= gauss_kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_0_reg_226 = ap_const_lv2_1) and (j_0_reg_238 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                kernel_2_2_3_fu_108 <= gauss_kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((j_0_reg_238 = ap_const_lv2_1) and (i_0_reg_226 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                kernel_2_2_4_fu_112 <= gauss_kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((j_0_reg_238 = ap_const_lv2_1)) and not((j_0_reg_238 = ap_const_lv2_0)) and (i_0_reg_226 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                kernel_2_2_5_fu_116 <= gauss_kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((i_0_reg_226 = ap_const_lv2_1)) and not((i_0_reg_226 = ap_const_lv2_0)) and (j_0_reg_238 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                kernel_2_2_6_fu_120 <= gauss_kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((i_0_reg_226 = ap_const_lv2_1)) and not((i_0_reg_226 = ap_const_lv2_0)) and (j_0_reg_238 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                kernel_2_2_7_fu_124 <= gauss_kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((i_0_reg_226 = ap_const_lv2_1)) and not((j_0_reg_238 = ap_const_lv2_1)) and not((j_0_reg_238 = ap_const_lv2_0)) and not((i_0_reg_226 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                kernel_2_2_8_fu_128 <= gauss_kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((j_0_reg_238 = ap_const_lv2_0) and (i_0_reg_226 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                kernel_2_2_fu_96 <= gauss_kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                mul_ln16_1_reg_1081 <= mul_ln16_1_fu_798_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op169_write_state10 = ap_const_boolean_1) and (outImage_full_n = ap_const_logic_0))) and (ap_const_lv1_1 = and_ln68_fu_606_p2) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                or_ln73_2_reg_1039 <= or_ln73_2_fu_639_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_fu_513_p2 = ap_const_lv1_1) and (icmp_ln50_1_reg_1005 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                part_buffer_0_addr_reg_1020 <= zext_ln62_fu_579_p1(9 - 1 downto 0);
                window_2_2_1_fu_172 <= window_2_2_reg_273;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                row_reg_972 <= row_fu_454_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_339_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                sub_ln40_reg_897 <= sub_ln40_fu_367_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op197_write_state11 = ap_const_boolean_1) and (outImage_full_n = ap_const_logic_0))) and (ap_const_lv1_1 = and_ln68_reg_1035) and (icmp_ln14_fu_645_p2 = ap_const_lv1_0) and (or_ln73_2_reg_1039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                tmp_4_reg_1051 <= tmp_4_fu_675_p5;
                tmp_5_reg_1056 <= tmp_5_fu_687_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op169_write_state10 = ap_const_boolean_1) and (outImage_full_n = ap_const_logic_0))) and (icmp_ln50_1_reg_1005 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                window_0_2_1_fu_148 <= part_buffer_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                window_1_2_1_fu_160 <= part_buffer_1_q0;
                window_1_2_reg_1030 <= part_buffer_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_fu_513_p2 = ap_const_lv1_0) and (ap_phi_mux_i1_0_phi_fu_290_p4 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                window_2_0_1_fu_152 <= window_0_0_fu_525_p5;
                window_2_1_1_fu_156 <= window_0_1_fu_537_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_phi_mux_i1_0_phi_fu_290_p4 = ap_const_lv2_1)) and not((ap_phi_mux_i1_0_phi_fu_290_p4 = ap_const_lv2_0)) and (icmp_ln55_fu_513_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                window_2_0_2_fu_164 <= window_0_0_fu_525_p5;
                window_2_1_2_fu_168 <= window_0_1_fu_537_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_fu_513_p2 = ap_const_lv1_0) and (ap_phi_mux_i1_0_phi_fu_290_p4 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                window_2_0_fu_140 <= window_0_0_fu_525_p5;
                window_2_1_fu_144 <= window_0_1_fu_537_p5;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, inImage_empty_n, outImage_full_n, ap_CS_fsm_state7, icmp_ln47_fu_490_p2, ap_CS_fsm_state10, ap_CS_fsm_state11, and_ln68_reg_1035, or_ln73_2_reg_1039, icmp_ln14_fu_645_p2, ap_CS_fsm_state2, icmp_ln38_fu_339_p2, ap_CS_fsm_state3, icmp_ln39_fu_373_p2, ap_CS_fsm_state6, icmp_ln46_fu_448_p2, ap_predicate_op114_read_state7, icmp_ln50_1_reg_1005, ap_CS_fsm_state8, icmp_ln55_fu_513_p2, ap_predicate_op169_write_state10, ap_predicate_op197_write_state11)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln38_fu_339_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln39_fu_373_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln46_fu_448_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if ((not(((ap_predicate_op114_read_state7 = ap_const_boolean_1) and (inImage_empty_n = ap_const_logic_0))) and (icmp_ln47_fu_490_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif ((not(((ap_predicate_op114_read_state7 = ap_const_boolean_1) and (inImage_empty_n = ap_const_logic_0))) and (icmp_ln47_fu_490_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln55_fu_513_p2 = ap_const_lv1_1) and (icmp_ln50_1_reg_1005 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                elsif (((icmp_ln55_fu_513_p2 = ap_const_lv1_1) and (icmp_ln50_1_reg_1005 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if ((not(((ap_predicate_op169_write_state10 = ap_const_boolean_1) and (outImage_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if ((not(((ap_predicate_op197_write_state11 = ap_const_boolean_1) and (outImage_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11) and ((ap_const_lv1_0 = and_ln68_reg_1035) or ((icmp_ln14_fu_645_p2 = ap_const_lv1_1) or (or_ln73_2_reg_1039 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif ((not(((ap_predicate_op197_write_state11 = ap_const_boolean_1) and (outImage_full_n = ap_const_logic_0))) and (ap_const_lv1_1 = and_ln68_reg_1035) and (icmp_ln14_fu_645_p2 = ap_const_lv1_0) and (or_ln73_2_reg_1039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln16_2_fu_813_p2 <= std_logic_vector(unsigned(result_0_i_reg_297) + unsigned(zext_ln16_10_fu_810_p1));
    add_ln40_fu_389_p2 <= std_logic_vector(unsigned(sub_ln40_reg_897) + unsigned(zext_ln40_2_fu_385_p1));
    and_ln50_fu_508_p2 <= (icmp_ln50_reg_977 and icmp_ln50_1_fu_502_p2);
    and_ln68_fu_606_p2 <= (icmp_ln68_reg_982 and icmp_ln68_1_fu_600_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state10_assign_proc : process(outImage_full_n, ap_predicate_op169_write_state10)
    begin
                ap_block_state10 <= ((ap_predicate_op169_write_state10 = ap_const_boolean_1) and (outImage_full_n = ap_const_logic_0));
    end process;


    ap_block_state11_assign_proc : process(outImage_full_n, ap_predicate_op197_write_state11)
    begin
                ap_block_state11 <= ((ap_predicate_op197_write_state11 = ap_const_boolean_1) and (outImage_full_n = ap_const_logic_0));
    end process;


    ap_block_state7_assign_proc : process(inImage_empty_n, ap_predicate_op114_read_state7)
    begin
                ap_block_state7 <= ((ap_predicate_op114_read_state7 = ap_const_boolean_1) and (inImage_empty_n = ap_const_logic_0));
    end process;


    ap_condition_143_assign_proc : process(inImage_empty_n, ap_CS_fsm_state7, icmp_ln47_fu_490_p2, ap_predicate_op114_read_state7)
    begin
                ap_condition_143 <= (not(((ap_predicate_op114_read_state7 = ap_const_boolean_1) and (inImage_empty_n = ap_const_logic_0))) and (icmp_ln47_fu_490_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state6, icmp_ln46_fu_448_p2)
    begin
        if (((icmp_ln46_fu_448_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_i1_0_phi_fu_290_p4 <= i1_0_reg_286;

    ap_predicate_op114_read_state7_assign_proc : process(icmp_ln47_fu_490_p2, and_ln50_fu_508_p2)
    begin
                ap_predicate_op114_read_state7 <= ((ap_const_lv1_1 = and_ln50_fu_508_p2) and (icmp_ln47_fu_490_p2 = ap_const_lv1_0));
    end process;


    ap_predicate_op169_write_state10_assign_proc : process(and_ln68_fu_606_p2, or_ln73_2_fu_639_p2)
    begin
                ap_predicate_op169_write_state10 <= ((or_ln73_2_fu_639_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln68_fu_606_p2));
    end process;


    ap_predicate_op197_write_state11_assign_proc : process(and_ln68_reg_1035, or_ln73_2_reg_1039, icmp_ln14_fu_645_p2)
    begin
                ap_predicate_op197_write_state11 <= ((icmp_ln14_fu_645_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln68_reg_1035) and (or_ln73_2_reg_1039 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, icmp_ln46_fu_448_p2)
    begin
        if (((icmp_ln46_fu_448_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_fu_496_p2 <= std_logic_vector(unsigned(col_0_reg_261) + unsigned(ap_const_lv9_1));
    gauss_kernel_address0 <= sext_ln40_fu_394_p1(4 - 1 downto 0);

    gauss_kernel_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            gauss_kernel_ce0 <= ap_const_logic_1;
        else 
            gauss_kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_819_ce_assign_proc : process(outImage_full_n, ap_CS_fsm_state11, ap_predicate_op197_write_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (not(((ap_predicate_op197_write_state11 = ap_const_boolean_1) and (outImage_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            grp_fu_819_ce <= ap_const_logic_1;
        else 
            grp_fu_819_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_819_p0 <= grp_fu_819_p00(8 - 1 downto 0);
    grp_fu_819_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_699_p5),16));
    grp_fu_819_p1 <= grp_fu_819_p10(8 - 1 downto 0);
    grp_fu_819_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_715_p5),16));
    grp_fu_819_p2 <= grp_fu_819_p20(16 - 1 downto 0);
    grp_fu_819_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln16_1_reg_1081),17));
    grp_fu_827_p0 <= grp_fu_827_p00(8 - 1 downto 0);
    grp_fu_827_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_760_p5),16));
    grp_fu_827_p1 <= grp_fu_827_p10(8 - 1 downto 0);
    grp_fu_827_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_776_p5),16));
    grp_fu_827_p2 <= grp_fu_827_p20(17 - 1 downto 0);
    grp_fu_827_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_reg_1086),18));
    i_1_fu_519_p2 <= std_logic_vector(unsigned(i1_0_reg_286) + unsigned(ap_const_lv2_1));
    i_2_fu_651_p2 <= std_logic_vector(unsigned(i_0_i_reg_309) + unsigned(ap_const_lv2_1));
    i_fu_345_p2 <= std_logic_vector(unsigned(i_0_reg_226) + unsigned(ap_const_lv2_1));
    icmp_ln14_fu_645_p2 <= "1" when (i_0_i_reg_309 = ap_const_lv2_3) else "0";
    icmp_ln38_fu_339_p2 <= "1" when (i_0_reg_226 = ap_const_lv2_3) else "0";
    icmp_ln39_fu_373_p2 <= "1" when (j_0_reg_238 = ap_const_lv2_3) else "0";
    icmp_ln46_fu_448_p2 <= "1" when (row_0_reg_250 = ap_const_lv10_281) else "0";
    icmp_ln47_fu_490_p2 <= "1" when (col_0_reg_261 = ap_const_lv9_1E1) else "0";
    icmp_ln50_1_fu_502_p2 <= "1" when (unsigned(col_0_reg_261) < unsigned(ap_const_lv9_1E0)) else "0";
    icmp_ln50_fu_460_p2 <= "1" when (unsigned(row_0_reg_250) < unsigned(ap_const_lv10_280)) else "0";
    icmp_ln55_fu_513_p2 <= "1" when (i1_0_reg_286 = ap_const_lv2_3) else "0";
    icmp_ln68_1_fu_600_p2 <= "0" when (col_0_reg_261 = ap_const_lv9_0) else "1";
    icmp_ln68_fu_466_p2 <= "0" when (row_0_reg_250 = ap_const_lv10_0) else "1";
    icmp_ln73_1_fu_484_p2 <= "1" when (outrow_fu_472_p2 = ap_const_lv11_27F) else "0";
    icmp_ln73_2_fu_617_p2 <= "1" when (outcol_fu_611_p2 = ap_const_lv9_0) else "0";
    icmp_ln73_3_fu_623_p2 <= "1" when (outcol_fu_611_p2 = ap_const_lv9_1DF) else "0";
    icmp_ln73_fu_478_p2 <= "1" when (outrow_fu_472_p2 = ap_const_lv11_0) else "0";

    inImage_blk_n_assign_proc : process(inImage_empty_n, ap_CS_fsm_state7, icmp_ln47_fu_490_p2, and_ln50_fu_508_p2)
    begin
        if (((ap_const_lv1_1 = and_ln50_fu_508_p2) and (icmp_ln47_fu_490_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            inImage_blk_n <= inImage_empty_n;
        else 
            inImage_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    inImage_read_assign_proc : process(inImage_empty_n, ap_CS_fsm_state7, ap_predicate_op114_read_state7)
    begin
        if ((not(((ap_predicate_op114_read_state7 = ap_const_boolean_1) and (inImage_empty_n = ap_const_logic_0))) and (ap_predicate_op114_read_state7 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            inImage_read <= ap_const_logic_1;
        else 
            inImage_read <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_379_p2 <= std_logic_vector(unsigned(j_0_reg_238) + unsigned(ap_const_lv2_1));
    mul_ln16_1_fu_798_p0 <= mul_ln16_1_fu_798_p00(8 - 1 downto 0);
    mul_ln16_1_fu_798_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_reg_1051),16));
    mul_ln16_1_fu_798_p1 <= mul_ln16_1_fu_798_p10(8 - 1 downto 0);
    mul_ln16_1_fu_798_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_reg_1056),16));
    mul_ln16_1_fu_798_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln16_1_fu_798_p0) * unsigned(mul_ln16_1_fu_798_p1), 16));
    or_ln73_1_fu_634_p2 <= (icmp_ln73_3_fu_623_p2 or icmp_ln73_1_reg_992);
    or_ln73_2_fu_639_p2 <= (or_ln73_fu_629_p2 or or_ln73_1_fu_634_p2);
    or_ln73_fu_629_p2 <= (icmp_ln73_reg_987 or icmp_ln73_2_fu_617_p2);

    outImage_blk_n_assign_proc : process(outImage_full_n, ap_CS_fsm_state10, and_ln68_fu_606_p2, or_ln73_2_fu_639_p2, ap_CS_fsm_state11, and_ln68_reg_1035, or_ln73_2_reg_1039, icmp_ln14_fu_645_p2)
    begin
        if ((((icmp_ln14_fu_645_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln68_reg_1035) and (or_ln73_2_reg_1039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((or_ln73_2_fu_639_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln68_fu_606_p2) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            outImage_blk_n <= outImage_full_n;
        else 
            outImage_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    outImage_din_assign_proc : process(outImage_full_n, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_predicate_op169_write_state10, ap_predicate_op197_write_state11, result_0_i_reg_297)
    begin
        if ((not(((ap_predicate_op197_write_state11 = ap_const_boolean_1) and (outImage_full_n = ap_const_logic_0))) and (ap_predicate_op197_write_state11 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            outImage_din <= result_0_i_reg_297(11 downto 4);
        elsif ((not(((ap_predicate_op169_write_state10 = ap_const_boolean_1) and (outImage_full_n = ap_const_logic_0))) and (ap_predicate_op169_write_state10 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            outImage_din <= ap_const_lv8_0;
        else 
            outImage_din <= "XXXXXXXX";
        end if; 
    end process;


    outImage_write_assign_proc : process(outImage_full_n, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_predicate_op169_write_state10, ap_predicate_op197_write_state11)
    begin
        if (((not(((ap_predicate_op197_write_state11 = ap_const_boolean_1) and (outImage_full_n = ap_const_logic_0))) and (ap_predicate_op197_write_state11 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or (not(((ap_predicate_op169_write_state10 = ap_const_boolean_1) and (outImage_full_n = ap_const_logic_0))) and (ap_predicate_op169_write_state10 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            outImage_write <= ap_const_logic_1;
        else 
            outImage_write <= ap_const_logic_0;
        end if; 
    end process;

    outcol_fu_611_p2 <= std_logic_vector(unsigned(col_0_reg_261) + unsigned(ap_const_lv9_1FF));
    outrow_fu_472_p2 <= std_logic_vector(unsigned(zext_ln46_fu_444_p1) + unsigned(ap_const_lv11_7FF));

    part_buffer_0_ce0_assign_proc : process(outImage_full_n, ap_CS_fsm_state10, ap_CS_fsm_state9, ap_predicate_op169_write_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (not(((ap_predicate_op169_write_state10 = ap_const_boolean_1) and (outImage_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            part_buffer_0_ce0 <= ap_const_logic_1;
        else 
            part_buffer_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    part_buffer_0_we0_assign_proc : process(outImage_full_n, ap_CS_fsm_state10, icmp_ln50_1_reg_1005, ap_predicate_op169_write_state10)
    begin
        if ((not(((ap_predicate_op169_write_state10 = ap_const_boolean_1) and (outImage_full_n = ap_const_logic_0))) and (icmp_ln50_1_reg_1005 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            part_buffer_0_we0 <= ap_const_logic_1;
        else 
            part_buffer_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    part_buffer_1_address0 <= zext_ln62_fu_579_p1(9 - 1 downto 0);

    part_buffer_1_ce0_assign_proc : process(icmp_ln50_1_reg_1005, ap_CS_fsm_state8, icmp_ln55_fu_513_p2)
    begin
        if (((icmp_ln55_fu_513_p2 = ap_const_lv1_1) and (icmp_ln50_1_reg_1005 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            part_buffer_1_ce0 <= ap_const_logic_1;
        else 
            part_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    part_buffer_1_we0_assign_proc : process(icmp_ln50_1_reg_1005, ap_CS_fsm_state8, icmp_ln55_fu_513_p2)
    begin
        if (((icmp_ln55_fu_513_p2 = ap_const_lv1_1) and (icmp_ln50_1_reg_1005 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            part_buffer_1_we0 <= ap_const_logic_1;
        else 
            part_buffer_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    row_fu_454_p2 <= std_logic_vector(unsigned(row_0_reg_250) + unsigned(ap_const_lv10_1));
        sext_ln40_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln40_fu_389_p2),64));

    sub_ln40_fu_367_p2 <= std_logic_vector(unsigned(zext_ln40_1_fu_363_p1) - unsigned(zext_ln40_fu_351_p1));
    tmp_8_fu_355_p3 <= (i_0_reg_226 & ap_const_lv2_0);
    zext_ln16_10_fu_810_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_1_reg_1091),20));
    zext_ln40_1_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_355_p3),5));
    zext_ln40_2_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_238),5));
    zext_ln40_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_226),5));
    zext_ln46_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_0_reg_250),11));
    zext_ln62_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_0_reg_261),64));
end behav;
