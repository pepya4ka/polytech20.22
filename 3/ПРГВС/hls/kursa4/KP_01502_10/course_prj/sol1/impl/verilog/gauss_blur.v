// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="gauss_blur,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12t-csg325-1Q,HLS_INPUT_CLOCK=6.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.790500,HLS_SYN_LAT=7092691,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=1,HLS_SYN_FF=347,HLS_SYN_LUT=933,HLS_VERSION=2020_1}" *)

module gauss_blur (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        inImage_address0,
        inImage_ce0,
        inImage_q0,
        gauss_kernel_address0,
        gauss_kernel_ce0,
        gauss_kernel_q0,
        outImage_address0,
        outImage_ce0,
        outImage_we0,
        outImage_d0
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_state13 = 18'd4096;
parameter    ap_ST_fsm_state14 = 18'd8192;
parameter    ap_ST_fsm_state15 = 18'd16384;
parameter    ap_ST_fsm_state16 = 18'd32768;
parameter    ap_ST_fsm_state17 = 18'd65536;
parameter    ap_ST_fsm_state18 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [18:0] inImage_address0;
output   inImage_ce0;
input  [7:0] inImage_q0;
output  [3:0] gauss_kernel_address0;
output   gauss_kernel_ce0;
input  [7:0] gauss_kernel_q0;
output  [18:0] outImage_address0;
output   outImage_ce0;
output   outImage_we0;
output  [7:0] outImage_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg inImage_ce0;
reg gauss_kernel_ce0;
reg[18:0] outImage_address0;
reg outImage_ce0;
reg outImage_we0;
reg[7:0] outImage_d0;

(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] i_fu_387_p2;
reg   [1:0] i_reg_865;
wire    ap_CS_fsm_state2;
wire   [4:0] sub_ln40_fu_409_p2;
reg   [4:0] sub_ln40_reg_870;
wire   [0:0] icmp_ln38_fu_381_p2;
wire   [1:0] j_fu_421_p2;
reg   [1:0] j_reg_878;
wire    ap_CS_fsm_state3;
wire  signed [63:0] sext_ln40_fu_436_p1;
reg  signed [63:0] sext_ln40_reg_883;
wire   [0:0] icmp_ln39_fu_415_p2;
wire   [9:0] row_fu_451_p2;
reg   [9:0] row_reg_896;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln49_fu_457_p2;
reg   [0:0] icmp_ln49_reg_901;
wire   [0:0] icmp_ln45_fu_445_p2;
wire   [19:0] sub_ln50_fu_487_p2;
reg   [19:0] sub_ln50_reg_906;
wire   [0:0] icmp_ln67_fu_493_p2;
reg   [0:0] icmp_ln67_reg_911;
wire   [0:0] icmp_ln72_fu_505_p2;
reg   [0:0] icmp_ln72_reg_916;
wire   [0:0] icmp_ln72_1_fu_511_p2;
reg   [0:0] icmp_ln72_1_reg_921;
wire   [19:0] sub_ln73_fu_537_p2;
reg   [19:0] sub_ln73_reg_926;
wire   [8:0] col_fu_549_p2;
reg   [8:0] col_reg_935;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln46_fu_543_p2;
wire   [0:0] icmp_ln49_1_fu_569_p2;
reg   [0:0] icmp_ln49_1_reg_945;
wire    ap_CS_fsm_state7;
wire   [63:0] zext_ln50_1_fu_580_p1;
reg   [63:0] zext_ln50_1_reg_949;
wire   [7:0] select_ln49_fu_584_p3;
reg   [7:0] select_ln49_reg_955;
wire   [1:0] i_1_fu_598_p2;
reg   [1:0] i_1_reg_964;
wire    ap_CS_fsm_state8;
wire  signed [4:0] sub_ln55_fu_620_p2;
reg  signed [4:0] sub_ln55_reg_969;
wire   [0:0] icmp_ln54_fu_592_p2;
reg   [3:0] window_addr_3_reg_974;
reg   [8:0] part_buffer_0_addr_reg_984;
wire   [7:0] part_buffer_1_q0;
reg   [7:0] part_buffer_1_load_reg_994;
wire    ap_CS_fsm_state10;
wire   [0:0] and_ln67_fu_658_p2;
reg   [0:0] and_ln67_reg_999;
wire    ap_CS_fsm_state11;
wire   [8:0] outcol_fu_663_p2;
reg   [8:0] outcol_reg_1003;
wire   [0:0] or_ln72_2_fu_691_p2;
reg   [0:0] or_ln72_2_reg_1009;
wire   [1:0] i_2_fu_703_p2;
reg   [1:0] i_2_reg_1016;
wire    ap_CS_fsm_state12;
wire   [4:0] sub_ln16_fu_725_p2;
reg   [4:0] sub_ln16_reg_1021;
wire   [0:0] icmp_ln14_fu_697_p2;
wire   [7:0] sub_ln21_1_fu_747_p2;
reg   [7:0] sub_ln21_1_reg_1026;
wire   [19:0] add_ln75_fu_756_p2;
reg   [19:0] add_ln75_reg_1031;
wire   [1:0] j_1_fu_767_p2;
reg   [1:0] j_1_reg_1039;
wire    ap_CS_fsm_state13;
wire   [0:0] icmp_ln15_fu_761_p2;
wire    ap_CS_fsm_state14;
wire   [31:0] grp_fu_839_p3;
wire    ap_CS_fsm_state16;
reg   [3:0] window_address0;
reg    window_ce0;
reg    window_we0;
reg   [7:0] window_d0;
wire   [7:0] window_q0;
reg   [3:0] window_address1;
reg    window_ce1;
reg    window_we1;
reg   [7:0] window_d1;
wire   [7:0] window_q1;
reg   [3:0] kernel_address0;
reg    kernel_ce0;
reg    kernel_we0;
wire   [7:0] kernel_q0;
reg   [8:0] part_buffer_0_address0;
reg    part_buffer_0_ce0;
reg    part_buffer_0_we0;
wire   [7:0] part_buffer_0_q0;
wire   [8:0] part_buffer_1_address0;
reg    part_buffer_1_ce0;
reg    part_buffer_1_we0;
reg   [1:0] i_0_reg_279;
reg   [1:0] j_0_reg_290;
wire    ap_CS_fsm_state4;
reg   [9:0] row_0_reg_301;
reg   [8:0] col_0_reg_312;
wire    ap_CS_fsm_state17;
reg   [1:0] i1_0_reg_324;
wire    ap_CS_fsm_state9;
reg   [31:0] result_0_i_reg_335;
reg   [1:0] i_0_i_reg_347;
reg   [31:0] result_1_i_reg_358;
reg   [1:0] j_0_i_reg_370;
wire  signed [63:0] sext_ln50_fu_564_p1;
wire  signed [63:0] sext_ln55_1_fu_632_p1;
wire  signed [63:0] sext_ln56_fu_643_p1;
wire  signed [63:0] sext_ln55_fu_648_p1;
wire  signed [63:0] sext_ln16_fu_782_p1;
wire  signed [63:0] sext_ln75_fu_822_p1;
wire  signed [63:0] sext_ln73_1_fu_834_p1;
wire    ap_CS_fsm_state18;
wire   [7:0] select_ln21_fu_814_p3;
wire   [3:0] tmp_2_fu_397_p3;
wire   [4:0] zext_ln40_1_fu_405_p1;
wire   [4:0] zext_ln40_fu_393_p1;
wire   [4:0] zext_ln40_2_fu_427_p1;
wire   [4:0] add_ln40_fu_431_p2;
wire   [18:0] tmp_3_fu_463_p3;
wire   [14:0] tmp_4_fu_475_p3;
wire   [19:0] zext_ln50_fu_471_p1;
wire   [19:0] zext_ln50_2_fu_483_p1;
wire   [10:0] zext_ln45_fu_441_p1;
wire   [10:0] outrow_fu_499_p2;
wire   [15:0] tmp_6_fu_525_p3;
wire   [19:0] tmp_5_fu_517_p3;
wire  signed [19:0] sext_ln73_fu_533_p1;
wire   [19:0] zext_ln50_3_fu_555_p1;
wire   [19:0] add_ln50_fu_559_p2;
wire   [0:0] and_ln49_fu_575_p2;
wire   [3:0] tmp_7_fu_608_p3;
wire   [4:0] zext_ln55_1_fu_616_p1;
wire   [4:0] zext_ln55_fu_604_p1;
wire   [4:0] add_ln55_fu_626_p2;
wire   [4:0] add_ln56_fu_637_p2;
wire   [0:0] icmp_ln67_1_fu_652_p2;
wire   [0:0] icmp_ln72_2_fu_669_p2;
wire   [0:0] icmp_ln72_3_fu_675_p2;
wire   [0:0] or_ln72_1_fu_686_p2;
wire   [0:0] or_ln72_fu_681_p2;
wire   [3:0] tmp_8_fu_713_p3;
wire   [4:0] zext_ln16_1_fu_721_p1;
wire   [4:0] zext_ln16_fu_709_p1;
wire   [31:0] sub_ln21_fu_731_p2;
wire   [7:0] trunc_ln21_1_fu_737_p4;
wire   [19:0] zext_ln75_fu_753_p1;
wire   [4:0] zext_ln16_5_fu_773_p1;
wire   [4:0] add_ln16_fu_777_p2;
wire   [0:0] tmp_9_fu_796_p3;
wire   [7:0] trunc_ln21_2_fu_804_p4;
wire   [19:0] zext_ln73_fu_826_p1;
wire   [19:0] add_ln73_fu_829_p2;
wire   [7:0] grp_fu_839_p0;
wire   [7:0] grp_fu_839_p1;
reg   [17:0] ap_NS_fsm;
wire   [15:0] grp_fu_839_p00;
wire   [15:0] grp_fu_839_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'd1;
end

gauss_blur_window #(
    .DataWidth( 8 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
window_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(window_address0),
    .ce0(window_ce0),
    .we0(window_we0),
    .d0(window_d0),
    .q0(window_q0),
    .address1(window_address1),
    .ce1(window_ce1),
    .we1(window_we1),
    .d1(window_d1),
    .q1(window_q1)
);

gauss_blur_kernel #(
    .DataWidth( 8 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
kernel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(kernel_address0),
    .ce0(kernel_ce0),
    .we0(kernel_we0),
    .d0(gauss_kernel_q0),
    .q0(kernel_q0)
);

gauss_blur_part_bbkb #(
    .DataWidth( 8 ),
    .AddressRange( 480 ),
    .AddressWidth( 9 ))
part_buffer_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(part_buffer_0_address0),
    .ce0(part_buffer_0_ce0),
    .we0(part_buffer_0_we0),
    .d0(part_buffer_1_load_reg_994),
    .q0(part_buffer_0_q0)
);

gauss_blur_part_bbkb #(
    .DataWidth( 8 ),
    .AddressRange( 480 ),
    .AddressWidth( 9 ))
part_buffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(part_buffer_1_address0),
    .ce0(part_buffer_1_ce0),
    .we0(part_buffer_1_we0),
    .d0(select_ln49_reg_955),
    .q0(part_buffer_1_q0)
);

gauss_blur_mac_mudEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
gauss_blur_mac_mudEe_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_839_p0),
    .din1(grp_fu_839_p1),
    .din2(result_1_i_reg_358),
    .ce(1'b1),
    .dout(grp_fu_839_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        col_0_reg_312 <= col_reg_935;
    end else if (((icmp_ln45_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        col_0_reg_312 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i1_0_reg_324 <= i_1_reg_964;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i1_0_reg_324 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln72_2_fu_691_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11) & (1'd1 == and_ln67_fu_658_p2))) begin
        i_0_i_reg_347 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln15_fu_761_p2 == 1'd1))) begin
        i_0_i_reg_347 <= i_2_reg_1016;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_415_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_279 <= i_reg_865;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_279 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        j_0_i_reg_370 <= j_1_reg_1039;
    end else if (((icmp_ln14_fu_697_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        j_0_i_reg_370 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_381_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_290 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_0_reg_290 <= j_reg_878;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln72_2_fu_691_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11) & (1'd1 == and_ln67_fu_658_p2))) begin
        result_0_i_reg_335 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln15_fu_761_p2 == 1'd1))) begin
        result_0_i_reg_335 <= result_1_i_reg_358;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        result_1_i_reg_358 <= grp_fu_839_p3;
    end else if (((icmp_ln14_fu_697_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        result_1_i_reg_358 <= result_0_i_reg_335;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_381_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        row_0_reg_301 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln46_fu_543_p2 == 1'd1))) begin
        row_0_reg_301 <= row_reg_896;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln14_fu_697_p2 == 1'd1))) begin
        add_ln75_reg_1031 <= add_ln75_fu_756_p2;
        sub_ln21_1_reg_1026 <= sub_ln21_1_fu_747_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        and_ln67_reg_999 <= and_ln67_fu_658_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        col_reg_935 <= col_fu_549_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_1_reg_964 <= i_1_fu_598_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_2_reg_1016 <= i_2_fu_703_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_865 <= i_fu_387_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        icmp_ln49_1_reg_945 <= icmp_ln49_1_fu_569_p2;
        select_ln49_reg_955 <= select_ln49_fu_584_p3;
        zext_ln50_1_reg_949[8 : 0] <= zext_ln50_1_fu_580_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        icmp_ln49_reg_901 <= icmp_ln49_fu_457_p2;
        icmp_ln67_reg_911 <= icmp_ln67_fu_493_p2;
        icmp_ln72_1_reg_921 <= icmp_ln72_1_fu_511_p2;
        icmp_ln72_reg_916 <= icmp_ln72_fu_505_p2;
        sub_ln50_reg_906[19 : 5] <= sub_ln50_fu_487_p2[19 : 5];
        sub_ln73_reg_926[19 : 5] <= sub_ln73_fu_537_p2[19 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        j_1_reg_1039 <= j_1_fu_767_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_878 <= j_fu_421_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (1'd1 == and_ln67_fu_658_p2))) begin
        or_ln72_2_reg_1009 <= or_ln72_2_fu_691_p2;
        outcol_reg_1003 <= outcol_fu_663_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln54_fu_592_p2 == 1'd1) & (icmp_ln49_1_reg_945 == 1'd1))) begin
        part_buffer_0_addr_reg_984 <= zext_ln50_1_reg_949;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        part_buffer_1_load_reg_994 <= part_buffer_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        row_reg_896 <= row_fu_451_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_415_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sext_ln40_reg_883 <= sext_ln40_fu_436_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_697_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        sub_ln16_reg_1021 <= sub_ln16_fu_725_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_381_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sub_ln40_reg_870 <= sub_ln40_fu_409_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_fu_592_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        sub_ln55_reg_969 <= sub_ln55_fu_620_p2;
        window_addr_3_reg_974 <= sext_ln55_1_fu_632_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln45_fu_445_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln45_fu_445_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        gauss_kernel_ce0 = 1'b1;
    end else begin
        gauss_kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        inImage_ce0 = 1'b1;
    end else begin
        inImage_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        kernel_address0 = sext_ln16_fu_782_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        kernel_address0 = sext_ln40_reg_883;
    end else begin
        kernel_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state13))) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        kernel_we0 = 1'b1;
    end else begin
        kernel_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        outImage_address0 = sext_ln73_1_fu_834_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        outImage_address0 = sext_ln75_fu_822_p1;
    end else begin
        outImage_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17))) begin
        outImage_ce0 = 1'b1;
    end else begin
        outImage_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        outImage_d0 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        outImage_d0 = select_ln21_fu_814_p3;
    end else begin
        outImage_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | ((or_ln72_2_reg_1009 == 1'd0) & (1'b1 == ap_CS_fsm_state17) & (1'd1 == and_ln67_reg_999)))) begin
        outImage_we0 = 1'b1;
    end else begin
        outImage_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        part_buffer_0_address0 = part_buffer_0_addr_reg_984;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        part_buffer_0_address0 = zext_ln50_1_reg_949;
    end else begin
        part_buffer_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8))) begin
        part_buffer_0_ce0 = 1'b1;
    end else begin
        part_buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln49_1_reg_945 == 1'd1))) begin
        part_buffer_0_we0 = 1'b1;
    end else begin
        part_buffer_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln54_fu_592_p2 == 1'd1) & (icmp_ln49_1_reg_945 == 1'd1))) begin
        part_buffer_1_ce0 = 1'b1;
    end else begin
        part_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln54_fu_592_p2 == 1'd1) & (icmp_ln49_1_reg_945 == 1'd1))) begin
        part_buffer_1_we0 = 1'b1;
    end else begin
        part_buffer_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        window_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        window_address0 = window_addr_3_reg_974;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln54_fu_592_p2 == 1'd1) & (icmp_ln49_1_reg_945 == 1'd1))) begin
        window_address0 = 64'd8;
    end else if (((icmp_ln54_fu_592_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        window_address0 = sext_ln55_1_fu_632_p1;
    end else begin
        window_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        window_address1 = sext_ln16_fu_782_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        window_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        window_address1 = sext_ln55_fu_648_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        window_address1 = sext_ln56_fu_643_p1;
    end else begin
        window_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state8) & (icmp_ln54_fu_592_p2 == 1'd1) & (icmp_ln49_1_reg_945 == 1'd1)) | ((icmp_ln54_fu_592_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8)))) begin
        window_ce0 = 1'b1;
    end else begin
        window_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        window_ce1 = 1'b1;
    end else begin
        window_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        window_d0 = part_buffer_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        window_d0 = window_q1;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln54_fu_592_p2 == 1'd1) & (icmp_ln49_1_reg_945 == 1'd1))) begin
        window_d0 = select_ln49_reg_955;
    end else begin
        window_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        window_d1 = part_buffer_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        window_d1 = window_q0;
    end else begin
        window_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state8) & (icmp_ln54_fu_592_p2 == 1'd1) & (icmp_ln49_1_reg_945 == 1'd1)))) begin
        window_we0 = 1'b1;
    end else begin
        window_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10))) begin
        window_we1 = 1'b1;
    end else begin
        window_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln38_fu_381_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln39_fu_415_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln45_fu_445_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln46_fu_543_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((icmp_ln49_1_reg_945 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln54_fu_592_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln54_fu_592_p2 == 1'd1) & (icmp_ln49_1_reg_945 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((or_ln72_2_fu_691_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11) & (1'd1 == and_ln67_fu_658_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if (((1'b1 == ap_CS_fsm_state11) & (or_ln72_2_fu_691_p2 == 1'd1) & (1'd1 == and_ln67_fu_658_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((icmp_ln14_fu_697_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln15_fu_761_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln16_fu_777_p2 = (sub_ln16_reg_1021 + zext_ln16_5_fu_773_p1);

assign add_ln40_fu_431_p2 = (sub_ln40_reg_870 + zext_ln40_2_fu_427_p1);

assign add_ln50_fu_559_p2 = (sub_ln50_reg_906 + zext_ln50_3_fu_555_p1);

assign add_ln55_fu_626_p2 = ($signed(sub_ln55_fu_620_p2) + $signed(5'd1));

assign add_ln56_fu_637_p2 = ($signed(sub_ln55_fu_620_p2) + $signed(5'd2));

assign add_ln73_fu_829_p2 = (sub_ln73_reg_926 + zext_ln73_fu_826_p1);

assign add_ln75_fu_756_p2 = (sub_ln73_reg_926 + zext_ln75_fu_753_p1);

assign and_ln49_fu_575_p2 = (icmp_ln49_reg_901 & icmp_ln49_1_fu_569_p2);

assign and_ln67_fu_658_p2 = (icmp_ln67_reg_911 & icmp_ln67_1_fu_652_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign col_fu_549_p2 = (col_0_reg_312 + 9'd1);

assign gauss_kernel_address0 = sext_ln40_fu_436_p1;

assign grp_fu_839_p0 = grp_fu_839_p00;

assign grp_fu_839_p00 = kernel_q0;

assign grp_fu_839_p1 = grp_fu_839_p10;

assign grp_fu_839_p10 = window_q1;

assign i_1_fu_598_p2 = (i1_0_reg_324 + 2'd1);

assign i_2_fu_703_p2 = (i_0_i_reg_347 + 2'd1);

assign i_fu_387_p2 = (i_0_reg_279 + 2'd1);

assign icmp_ln14_fu_697_p2 = ((i_0_i_reg_347 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_761_p2 = ((j_0_i_reg_370 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_381_p2 = ((i_0_reg_279 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_415_p2 = ((j_0_reg_290 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_445_p2 = ((row_0_reg_301 == 10'd641) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_543_p2 = ((col_0_reg_312 == 9'd481) ? 1'b1 : 1'b0);

assign icmp_ln49_1_fu_569_p2 = ((col_0_reg_312 < 9'd480) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_457_p2 = ((row_0_reg_301 < 10'd640) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_592_p2 = ((i1_0_reg_324 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln67_1_fu_652_p2 = ((col_0_reg_312 != 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_493_p2 = ((row_0_reg_301 != 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln72_1_fu_511_p2 = ((outrow_fu_499_p2 == 11'd639) ? 1'b1 : 1'b0);

assign icmp_ln72_2_fu_669_p2 = ((outcol_fu_663_p2 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln72_3_fu_675_p2 = ((outcol_fu_663_p2 == 9'd479) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_505_p2 = ((outrow_fu_499_p2 == 11'd0) ? 1'b1 : 1'b0);

assign inImage_address0 = sext_ln50_fu_564_p1;

assign j_1_fu_767_p2 = (j_0_i_reg_370 + 2'd1);

assign j_fu_421_p2 = (j_0_reg_290 + 2'd1);

assign or_ln72_1_fu_686_p2 = (icmp_ln72_3_fu_675_p2 | icmp_ln72_1_reg_921);

assign or_ln72_2_fu_691_p2 = (or_ln72_fu_681_p2 | or_ln72_1_fu_686_p2);

assign or_ln72_fu_681_p2 = (icmp_ln72_reg_916 | icmp_ln72_2_fu_669_p2);

assign outcol_fu_663_p2 = ($signed(col_0_reg_312) + $signed(9'd511));

assign outrow_fu_499_p2 = ($signed(zext_ln45_fu_441_p1) + $signed(11'd2047));

assign part_buffer_1_address0 = zext_ln50_1_reg_949;

assign row_fu_451_p2 = (row_0_reg_301 + 10'd1);

assign select_ln21_fu_814_p3 = ((tmp_9_fu_796_p3[0:0] === 1'b1) ? sub_ln21_1_reg_1026 : trunc_ln21_2_fu_804_p4);

assign select_ln49_fu_584_p3 = ((and_ln49_fu_575_p2[0:0] === 1'b1) ? inImage_q0 : 8'd0);

assign sext_ln16_fu_782_p1 = $signed(add_ln16_fu_777_p2);

assign sext_ln40_fu_436_p1 = $signed(add_ln40_fu_431_p2);

assign sext_ln50_fu_564_p1 = $signed(add_ln50_fu_559_p2);

assign sext_ln55_1_fu_632_p1 = $signed(add_ln55_fu_626_p2);

assign sext_ln55_fu_648_p1 = sub_ln55_reg_969;

assign sext_ln56_fu_643_p1 = $signed(add_ln56_fu_637_p2);

assign sext_ln73_1_fu_834_p1 = $signed(add_ln73_fu_829_p2);

assign sext_ln73_fu_533_p1 = $signed(tmp_6_fu_525_p3);

assign sext_ln75_fu_822_p1 = $signed(add_ln75_reg_1031);

assign sub_ln16_fu_725_p2 = (zext_ln16_1_fu_721_p1 - zext_ln16_fu_709_p1);

assign sub_ln21_1_fu_747_p2 = (8'd0 - trunc_ln21_1_fu_737_p4);

assign sub_ln21_fu_731_p2 = (32'd0 - result_0_i_reg_335);

assign sub_ln40_fu_409_p2 = (zext_ln40_1_fu_405_p1 - zext_ln40_fu_393_p1);

assign sub_ln50_fu_487_p2 = (zext_ln50_fu_471_p1 - zext_ln50_2_fu_483_p1);

assign sub_ln55_fu_620_p2 = (zext_ln55_1_fu_616_p1 - zext_ln55_fu_604_p1);

assign sub_ln73_fu_537_p2 = ($signed(tmp_5_fu_517_p3) - $signed(sext_ln73_fu_533_p1));

assign tmp_2_fu_397_p3 = {{i_0_reg_279}, {2'd0}};

assign tmp_3_fu_463_p3 = {{row_0_reg_301}, {9'd0}};

assign tmp_4_fu_475_p3 = {{row_0_reg_301}, {5'd0}};

assign tmp_5_fu_517_p3 = {{outrow_fu_499_p2}, {9'd0}};

assign tmp_6_fu_525_p3 = {{outrow_fu_499_p2}, {5'd0}};

assign tmp_7_fu_608_p3 = {{i1_0_reg_324}, {2'd0}};

assign tmp_8_fu_713_p3 = {{i_0_i_reg_347}, {2'd0}};

assign tmp_9_fu_796_p3 = result_0_i_reg_335[32'd31];

assign trunc_ln21_1_fu_737_p4 = {{sub_ln21_fu_731_p2[11:4]}};

assign trunc_ln21_2_fu_804_p4 = {{result_0_i_reg_335[11:4]}};

assign zext_ln16_1_fu_721_p1 = tmp_8_fu_713_p3;

assign zext_ln16_5_fu_773_p1 = j_0_i_reg_370;

assign zext_ln16_fu_709_p1 = i_0_i_reg_347;

assign zext_ln40_1_fu_405_p1 = tmp_2_fu_397_p3;

assign zext_ln40_2_fu_427_p1 = j_0_reg_290;

assign zext_ln40_fu_393_p1 = i_0_reg_279;

assign zext_ln45_fu_441_p1 = row_0_reg_301;

assign zext_ln50_1_fu_580_p1 = col_0_reg_312;

assign zext_ln50_2_fu_483_p1 = tmp_4_fu_475_p3;

assign zext_ln50_3_fu_555_p1 = col_0_reg_312;

assign zext_ln50_fu_471_p1 = tmp_3_fu_463_p3;

assign zext_ln55_1_fu_616_p1 = tmp_7_fu_608_p3;

assign zext_ln55_fu_604_p1 = i1_0_reg_324;

assign zext_ln73_fu_826_p1 = outcol_reg_1003;

assign zext_ln75_fu_753_p1 = outcol_reg_1003;

always @ (posedge ap_clk) begin
    sub_ln50_reg_906[4:0] <= 5'b00000;
    sub_ln73_reg_926[4:0] <= 5'b00000;
    zext_ln50_1_reg_949[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
end

endmodule //gauss_blur
