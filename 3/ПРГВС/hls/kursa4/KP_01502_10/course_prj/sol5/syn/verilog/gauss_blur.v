// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="gauss_blur,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12t-csg325-1Q,HLS_INPUT_CLOCK=16.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.332000,HLS_SYN_LAT=5242765,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=1,HLS_SYN_FF=306,HLS_SYN_LUT=899,HLS_VERSION=2020_1}" *)

module gauss_blur (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        inImage_address0,
        inImage_ce0,
        inImage_q0,
        gauss_kernel_address0,
        gauss_kernel_ce0,
        gauss_kernel_q0,
        outImage_address0,
        outImage_ce0,
        outImage_we0,
        outImage_d0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [18:0] inImage_address0;
output   inImage_ce0;
input  [7:0] inImage_q0;
output  [3:0] gauss_kernel_address0;
output   gauss_kernel_ce0;
input  [7:0] gauss_kernel_q0;
output  [18:0] outImage_address0;
output   outImage_ce0;
output   outImage_we0;
output  [7:0] outImage_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg inImage_ce0;
reg gauss_kernel_ce0;
reg[18:0] outImage_address0;
reg outImage_ce0;
reg outImage_we0;
reg[7:0] outImage_d0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] i_fu_388_p2;
reg   [1:0] i_reg_869;
wire    ap_CS_fsm_state2;
wire   [4:0] sub_ln40_fu_410_p2;
reg   [4:0] sub_ln40_reg_874;
wire   [0:0] icmp_ln38_fu_382_p2;
wire   [1:0] j_fu_422_p2;
reg   [1:0] j_reg_882;
wire    ap_CS_fsm_state3;
wire  signed [63:0] sext_ln40_fu_437_p1;
reg  signed [63:0] sext_ln40_reg_887;
wire   [0:0] icmp_ln39_fu_416_p2;
wire   [9:0] row_fu_452_p2;
reg   [9:0] row_reg_900;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln49_fu_458_p2;
reg   [0:0] icmp_ln49_reg_905;
wire   [0:0] icmp_ln45_fu_446_p2;
wire   [19:0] sub_ln50_fu_488_p2;
reg   [19:0] sub_ln50_reg_910;
wire   [0:0] icmp_ln67_fu_494_p2;
reg   [0:0] icmp_ln67_reg_915;
wire   [0:0] icmp_ln72_fu_506_p2;
reg   [0:0] icmp_ln72_reg_920;
wire   [0:0] icmp_ln72_1_fu_512_p2;
reg   [0:0] icmp_ln72_1_reg_925;
wire   [19:0] sub_ln73_fu_538_p2;
reg   [19:0] sub_ln73_reg_930;
wire   [8:0] col_fu_550_p2;
reg   [8:0] col_reg_939;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln46_fu_544_p2;
wire   [0:0] icmp_ln49_1_fu_570_p2;
reg   [0:0] icmp_ln49_1_reg_949;
wire    ap_CS_fsm_state7;
wire   [63:0] zext_ln50_1_fu_581_p1;
reg   [63:0] zext_ln50_1_reg_953;
wire   [7:0] select_ln49_fu_585_p3;
reg   [7:0] select_ln49_reg_959;
wire   [1:0] i_1_fu_599_p2;
reg   [1:0] i_1_reg_968;
wire    ap_CS_fsm_state8;
wire  signed [4:0] sub_ln55_fu_621_p2;
reg  signed [4:0] sub_ln55_reg_973;
wire   [0:0] icmp_ln54_fu_593_p2;
reg   [3:0] window_addr_3_reg_978;
reg   [8:0] part_buffer_0_addr_reg_988;
wire   [0:0] and_ln67_fu_659_p2;
reg   [0:0] and_ln67_reg_998;
wire    ap_CS_fsm_state10;
wire   [8:0] outcol_fu_664_p2;
reg   [8:0] outcol_reg_1002;
wire   [0:0] or_ln72_2_fu_692_p2;
reg   [0:0] or_ln72_2_reg_1007;
wire   [1:0] i_2_fu_718_p2;
reg   [1:0] i_2_reg_1014;
wire    ap_CS_fsm_state11;
wire   [4:0] sub_ln16_fu_740_p2;
reg   [4:0] sub_ln16_reg_1019;
wire   [0:0] icmp_ln14_fu_712_p2;
wire   [1:0] j_1_fu_814_p2;
reg   [1:0] j_1_reg_1027;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln15_fu_808_p2;
wire   [31:0] grp_fu_843_p3;
wire    ap_CS_fsm_state13;
reg   [3:0] window_address0;
reg    window_ce0;
reg    window_we0;
reg   [7:0] window_d0;
wire   [7:0] window_q0;
reg   [3:0] window_address1;
reg    window_ce1;
reg    window_we1;
reg   [7:0] window_d1;
wire   [7:0] window_q1;
reg   [3:0] kernel_address0;
reg    kernel_ce0;
reg    kernel_we0;
wire   [7:0] kernel_q0;
reg   [8:0] part_buffer_0_address0;
reg    part_buffer_0_ce0;
reg    part_buffer_0_we0;
wire   [7:0] part_buffer_0_q0;
wire   [8:0] part_buffer_1_address0;
reg    part_buffer_1_ce0;
reg    part_buffer_1_we0;
wire   [7:0] part_buffer_1_q0;
reg   [1:0] i_0_reg_280;
reg   [1:0] j_0_reg_291;
wire    ap_CS_fsm_state4;
reg   [9:0] row_0_reg_302;
reg   [8:0] col_0_reg_313;
reg   [1:0] i1_0_reg_325;
wire    ap_CS_fsm_state9;
reg   [31:0] result_0_i_reg_336;
reg   [1:0] i_0_i_reg_348;
reg   [31:0] result_1_i_reg_359;
reg   [1:0] j_0_i_reg_371;
wire  signed [63:0] sext_ln50_fu_565_p1;
wire  signed [63:0] sext_ln55_1_fu_633_p1;
wire  signed [63:0] sext_ln56_fu_644_p1;
wire  signed [63:0] sext_ln55_fu_649_p1;
wire  signed [63:0] sext_ln73_1_fu_707_p1;
wire  signed [63:0] sext_ln75_fu_803_p1;
wire  signed [63:0] sext_ln16_fu_829_p1;
wire   [7:0] select_ln21_fu_786_p3;
wire   [3:0] tmp_2_fu_398_p3;
wire   [4:0] zext_ln40_1_fu_406_p1;
wire   [4:0] zext_ln40_fu_394_p1;
wire   [4:0] zext_ln40_2_fu_428_p1;
wire   [4:0] add_ln40_fu_432_p2;
wire   [18:0] tmp_3_fu_464_p3;
wire   [14:0] tmp_4_fu_476_p3;
wire   [19:0] zext_ln50_fu_472_p1;
wire   [19:0] zext_ln50_2_fu_484_p1;
wire   [10:0] zext_ln45_fu_442_p1;
wire   [10:0] outrow_fu_500_p2;
wire   [15:0] tmp_6_fu_526_p3;
wire   [19:0] tmp_5_fu_518_p3;
wire  signed [19:0] sext_ln73_fu_534_p1;
wire   [19:0] zext_ln50_3_fu_556_p1;
wire   [19:0] add_ln50_fu_560_p2;
wire   [0:0] and_ln49_fu_576_p2;
wire   [3:0] tmp_7_fu_609_p3;
wire   [4:0] zext_ln55_1_fu_617_p1;
wire   [4:0] zext_ln55_fu_605_p1;
wire   [4:0] add_ln55_fu_627_p2;
wire   [4:0] add_ln56_fu_638_p2;
wire   [0:0] icmp_ln67_1_fu_653_p2;
wire   [0:0] icmp_ln72_2_fu_670_p2;
wire   [0:0] icmp_ln72_3_fu_676_p2;
wire   [0:0] or_ln72_1_fu_687_p2;
wire   [0:0] or_ln72_fu_682_p2;
wire   [19:0] zext_ln73_fu_698_p1;
wire   [19:0] add_ln73_fu_702_p2;
wire   [3:0] tmp_8_fu_728_p3;
wire   [4:0] zext_ln16_1_fu_736_p1;
wire   [4:0] zext_ln16_fu_724_p1;
wire   [31:0] sub_ln21_fu_754_p2;
wire   [7:0] trunc_ln21_1_fu_760_p4;
wire   [0:0] tmp_9_fu_746_p3;
wire   [7:0] sub_ln21_1_fu_770_p2;
wire   [7:0] trunc_ln21_2_fu_776_p4;
wire   [19:0] zext_ln75_fu_795_p1;
wire   [19:0] add_ln75_fu_798_p2;
wire   [4:0] zext_ln16_5_fu_820_p1;
wire   [4:0] add_ln16_fu_824_p2;
wire   [7:0] grp_fu_843_p0;
wire   [7:0] grp_fu_843_p1;
reg   [12:0] ap_NS_fsm;
wire   [15:0] grp_fu_843_p00;
wire   [15:0] grp_fu_843_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

gauss_blur_window #(
    .DataWidth( 8 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
window_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(window_address0),
    .ce0(window_ce0),
    .we0(window_we0),
    .d0(window_d0),
    .q0(window_q0),
    .address1(window_address1),
    .ce1(window_ce1),
    .we1(window_we1),
    .d1(window_d1),
    .q1(window_q1)
);

gauss_blur_kernel #(
    .DataWidth( 8 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
kernel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(kernel_address0),
    .ce0(kernel_ce0),
    .we0(kernel_we0),
    .d0(gauss_kernel_q0),
    .q0(kernel_q0)
);

gauss_blur_part_bbkb #(
    .DataWidth( 8 ),
    .AddressRange( 480 ),
    .AddressWidth( 9 ))
part_buffer_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(part_buffer_0_address0),
    .ce0(part_buffer_0_ce0),
    .we0(part_buffer_0_we0),
    .d0(part_buffer_1_q0),
    .q0(part_buffer_0_q0)
);

gauss_blur_part_bbkb #(
    .DataWidth( 8 ),
    .AddressRange( 480 ),
    .AddressWidth( 9 ))
part_buffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(part_buffer_1_address0),
    .ce0(part_buffer_1_ce0),
    .we0(part_buffer_1_we0),
    .d0(select_ln49_reg_959),
    .q0(part_buffer_1_q0)
);

gauss_blur_mac_mudEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
gauss_blur_mac_mudEe_U1(
    .din0(grp_fu_843_p0),
    .din1(grp_fu_843_p1),
    .din2(result_1_i_reg_359),
    .dout(grp_fu_843_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & ((1'd0 == and_ln67_reg_998) | ((icmp_ln14_fu_712_p2 == 1'd1) | (or_ln72_2_reg_1007 == 1'd1))))) begin
        col_0_reg_313 <= col_reg_939;
    end else if (((icmp_ln45_fu_446_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        col_0_reg_313 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i1_0_reg_325 <= i_1_reg_968;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i1_0_reg_325 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln72_2_fu_692_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10) & (1'd1 == and_ln67_fu_659_p2))) begin
        i_0_i_reg_348 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln15_fu_808_p2 == 1'd1))) begin
        i_0_i_reg_348 <= i_2_reg_1014;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_416_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_280 <= i_reg_869;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_280 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        j_0_i_reg_371 <= j_1_reg_1027;
    end else if (((icmp_ln14_fu_712_p2 == 1'd0) & (or_ln72_2_reg_1007 == 1'd0) & (1'b1 == ap_CS_fsm_state11) & (1'd1 == and_ln67_reg_998))) begin
        j_0_i_reg_371 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_382_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_291 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_0_reg_291 <= j_reg_882;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln72_2_fu_692_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10) & (1'd1 == and_ln67_fu_659_p2))) begin
        result_0_i_reg_336 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln15_fu_808_p2 == 1'd1))) begin
        result_0_i_reg_336 <= result_1_i_reg_359;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        result_1_i_reg_359 <= grp_fu_843_p3;
    end else if (((icmp_ln14_fu_712_p2 == 1'd0) & (or_ln72_2_reg_1007 == 1'd0) & (1'b1 == ap_CS_fsm_state11) & (1'd1 == and_ln67_reg_998))) begin
        result_1_i_reg_359 <= result_0_i_reg_336;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        row_0_reg_302 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln46_fu_544_p2 == 1'd1))) begin
        row_0_reg_302 <= row_reg_900;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        and_ln67_reg_998 <= and_ln67_fu_659_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        col_reg_939 <= col_fu_550_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_1_reg_968 <= i_1_fu_599_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln72_2_reg_1007 == 1'd0) & (1'b1 == ap_CS_fsm_state11) & (1'd1 == and_ln67_reg_998))) begin
        i_2_reg_1014 <= i_2_fu_718_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_869 <= i_fu_388_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        icmp_ln49_1_reg_949 <= icmp_ln49_1_fu_570_p2;
        select_ln49_reg_959 <= select_ln49_fu_585_p3;
        zext_ln50_1_reg_953[8 : 0] <= zext_ln50_1_fu_581_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_fu_446_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        icmp_ln49_reg_905 <= icmp_ln49_fu_458_p2;
        icmp_ln67_reg_915 <= icmp_ln67_fu_494_p2;
        icmp_ln72_1_reg_925 <= icmp_ln72_1_fu_512_p2;
        icmp_ln72_reg_920 <= icmp_ln72_fu_506_p2;
        sub_ln50_reg_910[19 : 5] <= sub_ln50_fu_488_p2[19 : 5];
        sub_ln73_reg_930[19 : 5] <= sub_ln73_fu_538_p2[19 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        j_1_reg_1027 <= j_1_fu_814_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_882 <= j_fu_422_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'd1 == and_ln67_fu_659_p2))) begin
        or_ln72_2_reg_1007 <= or_ln72_2_fu_692_p2;
        outcol_reg_1002 <= outcol_fu_664_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln54_fu_593_p2 == 1'd1) & (icmp_ln49_1_reg_949 == 1'd1))) begin
        part_buffer_0_addr_reg_988 <= zext_ln50_1_reg_953;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        row_reg_900 <= row_fu_452_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_416_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sext_ln40_reg_887 <= sext_ln40_fu_437_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_712_p2 == 1'd0) & (or_ln72_2_reg_1007 == 1'd0) & (1'b1 == ap_CS_fsm_state11) & (1'd1 == and_ln67_reg_998))) begin
        sub_ln16_reg_1019 <= sub_ln16_fu_740_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_382_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sub_ln40_reg_874 <= sub_ln40_fu_410_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_fu_593_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        sub_ln55_reg_973 <= sub_ln55_fu_621_p2;
        window_addr_3_reg_978 <= sext_ln55_1_fu_633_p1;
    end
end

always @ (*) begin
    if (((icmp_ln45_fu_446_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln45_fu_446_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        gauss_kernel_ce0 = 1'b1;
    end else begin
        gauss_kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        inImage_ce0 = 1'b1;
    end else begin
        inImage_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        kernel_address0 = sext_ln16_fu_829_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        kernel_address0 = sext_ln40_reg_887;
    end else begin
        kernel_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state12))) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        kernel_we0 = 1'b1;
    end else begin
        kernel_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        outImage_address0 = sext_ln75_fu_803_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        outImage_address0 = sext_ln73_1_fu_707_p1;
    end else begin
        outImage_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        outImage_ce0 = 1'b1;
    end else begin
        outImage_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        outImage_d0 = select_ln21_fu_786_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        outImage_d0 = 8'd0;
    end else begin
        outImage_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((or_ln72_2_reg_1007 == 1'd0) & (1'b1 == ap_CS_fsm_state11) & (icmp_ln14_fu_712_p2 == 1'd1) & (1'd1 == and_ln67_reg_998)) | ((1'b1 == ap_CS_fsm_state10) & (or_ln72_2_fu_692_p2 == 1'd1) & (1'd1 == and_ln67_fu_659_p2)))) begin
        outImage_we0 = 1'b1;
    end else begin
        outImage_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        part_buffer_0_address0 = part_buffer_0_addr_reg_988;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        part_buffer_0_address0 = zext_ln50_1_reg_953;
    end else begin
        part_buffer_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        part_buffer_0_ce0 = 1'b1;
    end else begin
        part_buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln49_1_reg_949 == 1'd1))) begin
        part_buffer_0_we0 = 1'b1;
    end else begin
        part_buffer_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln54_fu_593_p2 == 1'd1) & (icmp_ln49_1_reg_949 == 1'd1))) begin
        part_buffer_1_ce0 = 1'b1;
    end else begin
        part_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln54_fu_593_p2 == 1'd1) & (icmp_ln49_1_reg_949 == 1'd1))) begin
        part_buffer_1_we0 = 1'b1;
    end else begin
        part_buffer_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        window_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        window_address0 = window_addr_3_reg_978;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln54_fu_593_p2 == 1'd1) & (icmp_ln49_1_reg_949 == 1'd1))) begin
        window_address0 = 64'd8;
    end else if (((icmp_ln54_fu_593_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        window_address0 = sext_ln55_1_fu_633_p1;
    end else begin
        window_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        window_address1 = sext_ln16_fu_829_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        window_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        window_address1 = sext_ln55_fu_649_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        window_address1 = sext_ln56_fu_644_p1;
    end else begin
        window_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state8) & (icmp_ln54_fu_593_p2 == 1'd1) & (icmp_ln49_1_reg_949 == 1'd1)) | ((icmp_ln54_fu_593_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8)))) begin
        window_ce0 = 1'b1;
    end else begin
        window_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        window_ce1 = 1'b1;
    end else begin
        window_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        window_d0 = part_buffer_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        window_d0 = window_q1;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln54_fu_593_p2 == 1'd1) & (icmp_ln49_1_reg_949 == 1'd1))) begin
        window_d0 = select_ln49_reg_959;
    end else begin
        window_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        window_d1 = part_buffer_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        window_d1 = window_q0;
    end else begin
        window_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state10) & (icmp_ln49_1_reg_949 == 1'd1)) | ((1'b1 == ap_CS_fsm_state8) & (icmp_ln54_fu_593_p2 == 1'd1) & (icmp_ln49_1_reg_949 == 1'd1)))) begin
        window_we0 = 1'b1;
    end else begin
        window_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state10) & (icmp_ln49_1_reg_949 == 1'd1)))) begin
        window_we1 = 1'b1;
    end else begin
        window_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln38_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln39_fu_416_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln45_fu_446_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln46_fu_544_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln54_fu_593_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & ((1'd0 == and_ln67_reg_998) | ((icmp_ln14_fu_712_p2 == 1'd1) | (or_ln72_2_reg_1007 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln15_fu_808_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln16_fu_824_p2 = (sub_ln16_reg_1019 + zext_ln16_5_fu_820_p1);

assign add_ln40_fu_432_p2 = (sub_ln40_reg_874 + zext_ln40_2_fu_428_p1);

assign add_ln50_fu_560_p2 = (sub_ln50_reg_910 + zext_ln50_3_fu_556_p1);

assign add_ln55_fu_627_p2 = ($signed(sub_ln55_fu_621_p2) + $signed(5'd1));

assign add_ln56_fu_638_p2 = ($signed(sub_ln55_fu_621_p2) + $signed(5'd2));

assign add_ln73_fu_702_p2 = (sub_ln73_reg_930 + zext_ln73_fu_698_p1);

assign add_ln75_fu_798_p2 = (sub_ln73_reg_930 + zext_ln75_fu_795_p1);

assign and_ln49_fu_576_p2 = (icmp_ln49_reg_905 & icmp_ln49_1_fu_570_p2);

assign and_ln67_fu_659_p2 = (icmp_ln67_reg_915 & icmp_ln67_1_fu_653_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign col_fu_550_p2 = (col_0_reg_313 + 9'd1);

assign gauss_kernel_address0 = sext_ln40_fu_437_p1;

assign grp_fu_843_p0 = grp_fu_843_p00;

assign grp_fu_843_p00 = kernel_q0;

assign grp_fu_843_p1 = grp_fu_843_p10;

assign grp_fu_843_p10 = window_q1;

assign i_1_fu_599_p2 = (i1_0_reg_325 + 2'd1);

assign i_2_fu_718_p2 = (i_0_i_reg_348 + 2'd1);

assign i_fu_388_p2 = (i_0_reg_280 + 2'd1);

assign icmp_ln14_fu_712_p2 = ((i_0_i_reg_348 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_808_p2 = ((j_0_i_reg_371 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_382_p2 = ((i_0_reg_280 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_416_p2 = ((j_0_reg_291 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_446_p2 = ((row_0_reg_302 == 10'd641) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_544_p2 = ((col_0_reg_313 == 9'd481) ? 1'b1 : 1'b0);

assign icmp_ln49_1_fu_570_p2 = ((col_0_reg_313 < 9'd480) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_458_p2 = ((row_0_reg_302 < 10'd640) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_593_p2 = ((i1_0_reg_325 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln67_1_fu_653_p2 = ((col_0_reg_313 != 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_494_p2 = ((row_0_reg_302 != 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln72_1_fu_512_p2 = ((outrow_fu_500_p2 == 11'd639) ? 1'b1 : 1'b0);

assign icmp_ln72_2_fu_670_p2 = ((outcol_fu_664_p2 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln72_3_fu_676_p2 = ((outcol_fu_664_p2 == 9'd479) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_506_p2 = ((outrow_fu_500_p2 == 11'd0) ? 1'b1 : 1'b0);

assign inImage_address0 = sext_ln50_fu_565_p1;

assign j_1_fu_814_p2 = (j_0_i_reg_371 + 2'd1);

assign j_fu_422_p2 = (j_0_reg_291 + 2'd1);

assign or_ln72_1_fu_687_p2 = (icmp_ln72_3_fu_676_p2 | icmp_ln72_1_reg_925);

assign or_ln72_2_fu_692_p2 = (or_ln72_fu_682_p2 | or_ln72_1_fu_687_p2);

assign or_ln72_fu_682_p2 = (icmp_ln72_reg_920 | icmp_ln72_2_fu_670_p2);

assign outcol_fu_664_p2 = ($signed(col_0_reg_313) + $signed(9'd511));

assign outrow_fu_500_p2 = ($signed(zext_ln45_fu_442_p1) + $signed(11'd2047));

assign part_buffer_1_address0 = zext_ln50_1_reg_953;

assign row_fu_452_p2 = (row_0_reg_302 + 10'd1);

assign select_ln21_fu_786_p3 = ((tmp_9_fu_746_p3[0:0] === 1'b1) ? sub_ln21_1_fu_770_p2 : trunc_ln21_2_fu_776_p4);

assign select_ln49_fu_585_p3 = ((and_ln49_fu_576_p2[0:0] === 1'b1) ? inImage_q0 : 8'd0);

assign sext_ln16_fu_829_p1 = $signed(add_ln16_fu_824_p2);

assign sext_ln40_fu_437_p1 = $signed(add_ln40_fu_432_p2);

assign sext_ln50_fu_565_p1 = $signed(add_ln50_fu_560_p2);

assign sext_ln55_1_fu_633_p1 = $signed(add_ln55_fu_627_p2);

assign sext_ln55_fu_649_p1 = sub_ln55_reg_973;

assign sext_ln56_fu_644_p1 = $signed(add_ln56_fu_638_p2);

assign sext_ln73_1_fu_707_p1 = $signed(add_ln73_fu_702_p2);

assign sext_ln73_fu_534_p1 = $signed(tmp_6_fu_526_p3);

assign sext_ln75_fu_803_p1 = $signed(add_ln75_fu_798_p2);

assign sub_ln16_fu_740_p2 = (zext_ln16_1_fu_736_p1 - zext_ln16_fu_724_p1);

assign sub_ln21_1_fu_770_p2 = (8'd0 - trunc_ln21_1_fu_760_p4);

assign sub_ln21_fu_754_p2 = (32'd0 - result_0_i_reg_336);

assign sub_ln40_fu_410_p2 = (zext_ln40_1_fu_406_p1 - zext_ln40_fu_394_p1);

assign sub_ln50_fu_488_p2 = (zext_ln50_fu_472_p1 - zext_ln50_2_fu_484_p1);

assign sub_ln55_fu_621_p2 = (zext_ln55_1_fu_617_p1 - zext_ln55_fu_605_p1);

assign sub_ln73_fu_538_p2 = ($signed(tmp_5_fu_518_p3) - $signed(sext_ln73_fu_534_p1));

assign tmp_2_fu_398_p3 = {{i_0_reg_280}, {2'd0}};

assign tmp_3_fu_464_p3 = {{row_0_reg_302}, {9'd0}};

assign tmp_4_fu_476_p3 = {{row_0_reg_302}, {5'd0}};

assign tmp_5_fu_518_p3 = {{outrow_fu_500_p2}, {9'd0}};

assign tmp_6_fu_526_p3 = {{outrow_fu_500_p2}, {5'd0}};

assign tmp_7_fu_609_p3 = {{i1_0_reg_325}, {2'd0}};

assign tmp_8_fu_728_p3 = {{i_0_i_reg_348}, {2'd0}};

assign tmp_9_fu_746_p3 = result_0_i_reg_336[32'd31];

assign trunc_ln21_1_fu_760_p4 = {{sub_ln21_fu_754_p2[11:4]}};

assign trunc_ln21_2_fu_776_p4 = {{result_0_i_reg_336[11:4]}};

assign zext_ln16_1_fu_736_p1 = tmp_8_fu_728_p3;

assign zext_ln16_5_fu_820_p1 = j_0_i_reg_371;

assign zext_ln16_fu_724_p1 = i_0_i_reg_348;

assign zext_ln40_1_fu_406_p1 = tmp_2_fu_398_p3;

assign zext_ln40_2_fu_428_p1 = j_0_reg_291;

assign zext_ln40_fu_394_p1 = i_0_reg_280;

assign zext_ln45_fu_442_p1 = row_0_reg_302;

assign zext_ln50_1_fu_581_p1 = col_0_reg_313;

assign zext_ln50_2_fu_484_p1 = tmp_4_fu_476_p3;

assign zext_ln50_3_fu_556_p1 = col_0_reg_313;

assign zext_ln50_fu_472_p1 = tmp_3_fu_464_p3;

assign zext_ln55_1_fu_617_p1 = tmp_7_fu_609_p3;

assign zext_ln55_fu_605_p1 = i1_0_reg_325;

assign zext_ln73_fu_698_p1 = outcol_fu_664_p2;

assign zext_ln75_fu_795_p1 = outcol_reg_1002;

always @ (posedge ap_clk) begin
    sub_ln50_reg_910[4:0] <= 5'b00000;
    sub_ln73_reg_930[4:0] <= 5'b00000;
    zext_ln50_1_reg_953[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
end

endmodule //gauss_blur
