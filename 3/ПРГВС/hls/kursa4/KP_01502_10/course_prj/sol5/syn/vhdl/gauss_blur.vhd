-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gauss_blur is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inImage_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    inImage_ce0 : OUT STD_LOGIC;
    inImage_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    gauss_kernel_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    gauss_kernel_ce0 : OUT STD_LOGIC;
    gauss_kernel_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    outImage_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    outImage_ce0 : OUT STD_LOGIC;
    outImage_we0 : OUT STD_LOGIC;
    outImage_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of gauss_blur is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "gauss_blur,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12t-csg325-1Q,HLS_INPUT_CLOCK=16.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.332000,HLS_SYN_LAT=5242765,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=1,HLS_SYN_FF=306,HLS_SYN_LUT=899,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv10_281 : STD_LOGIC_VECTOR (9 downto 0) := "1010000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_27F : STD_LOGIC_VECTOR (10 downto 0) := "01001111111";
    constant ap_const_lv9_1E1 : STD_LOGIC_VECTOR (8 downto 0) := "111100001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_1E0 : STD_LOGIC_VECTOR (8 downto 0) := "111100000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv9_1DF : STD_LOGIC_VECTOR (8 downto 0) := "111011111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_388_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_869 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_ln40_fu_410_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln40_reg_874 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln38_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_422_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_882 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sext_ln40_fu_437_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln40_reg_887 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln39_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_fu_452_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal row_reg_900 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln49_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_905 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln50_fu_488_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln50_reg_910 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln67_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67_reg_915 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln72_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln72_reg_920 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln72_1_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln72_1_reg_925 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln73_fu_538_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln73_reg_930 : STD_LOGIC_VECTOR (19 downto 0);
    signal col_fu_550_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_reg_939 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln46_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_1_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_1_reg_949 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln50_1_fu_581_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_1_reg_953 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln49_fu_585_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln49_reg_959 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_1_fu_599_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_968 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal sub_ln55_fu_621_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln55_reg_973 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln54_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_addr_3_reg_978 : STD_LOGIC_VECTOR (3 downto 0);
    signal part_buffer_0_addr_reg_988 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln67_fu_659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln67_reg_998 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal outcol_fu_664_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal outcol_reg_1002 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln72_2_fu_692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln72_2_reg_1007 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_718_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_1014 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal sub_ln16_fu_740_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln16_reg_1019 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln14_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_814_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_reg_1027 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln15_fu_808_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_843_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal window_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal window_ce0 : STD_LOGIC;
    signal window_we0 : STD_LOGIC;
    signal window_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal window_ce1 : STD_LOGIC;
    signal window_we1 : STD_LOGIC;
    signal window_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_ce0 : STD_LOGIC;
    signal kernel_we0 : STD_LOGIC;
    signal kernel_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal part_buffer_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal part_buffer_0_ce0 : STD_LOGIC;
    signal part_buffer_0_we0 : STD_LOGIC;
    signal part_buffer_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal part_buffer_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal part_buffer_1_ce0 : STD_LOGIC;
    signal part_buffer_1_we0 : STD_LOGIC;
    signal part_buffer_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_0_reg_280 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_0_reg_291 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal row_0_reg_302 : STD_LOGIC_VECTOR (9 downto 0);
    signal col_0_reg_313 : STD_LOGIC_VECTOR (8 downto 0);
    signal i1_0_reg_325 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal result_0_i_reg_336 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i_reg_348 : STD_LOGIC_VECTOR (1 downto 0);
    signal result_1_i_reg_359 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_i_reg_371 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln50_fu_565_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln55_1_fu_633_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln56_fu_644_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln55_fu_649_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln73_1_fu_707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln75_fu_803_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln16_fu_829_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln21_fu_786_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_398_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln40_1_fu_406_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln40_fu_394_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln40_2_fu_428_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln40_fu_432_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_464_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_4_fu_476_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln50_fu_472_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln50_2_fu_484_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln45_fu_442_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal outrow_fu_500_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_fu_526_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_518_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln73_fu_534_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln50_3_fu_556_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln50_fu_560_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal and_ln49_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_609_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln55_1_fu_617_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln55_fu_605_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln55_fu_627_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln56_fu_638_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln67_1_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln72_2_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln72_3_fu_676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln72_1_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln72_fu_682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln73_fu_698_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln73_fu_702_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_8_fu_728_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln16_1_fu_736_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln16_fu_724_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln21_fu_754_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln21_1_fu_760_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_746_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln21_1_fu_770_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln21_2_fu_776_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln75_fu_795_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln75_fu_798_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln16_5_fu_820_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln16_fu_824_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_843_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_843_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_843_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_843_p10 : STD_LOGIC_VECTOR (15 downto 0);

    component gauss_blur_mac_mudEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gauss_blur_window IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component gauss_blur_kernel IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component gauss_blur_part_bbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    window_U : component gauss_blur_window
    generic map (
        DataWidth => 8,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => window_address0,
        ce0 => window_ce0,
        we0 => window_we0,
        d0 => window_d0,
        q0 => window_q0,
        address1 => window_address1,
        ce1 => window_ce1,
        we1 => window_we1,
        d1 => window_d1,
        q1 => window_q1);

    kernel_U : component gauss_blur_kernel
    generic map (
        DataWidth => 8,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => kernel_address0,
        ce0 => kernel_ce0,
        we0 => kernel_we0,
        d0 => gauss_kernel_q0,
        q0 => kernel_q0);

    part_buffer_0_U : component gauss_blur_part_bbkb
    generic map (
        DataWidth => 8,
        AddressRange => 480,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => part_buffer_0_address0,
        ce0 => part_buffer_0_ce0,
        we0 => part_buffer_0_we0,
        d0 => part_buffer_1_q0,
        q0 => part_buffer_0_q0);

    part_buffer_1_U : component gauss_blur_part_bbkb
    generic map (
        DataWidth => 8,
        AddressRange => 480,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => part_buffer_1_address0,
        ce0 => part_buffer_1_ce0,
        we0 => part_buffer_1_we0,
        d0 => select_ln49_reg_959,
        q0 => part_buffer_1_q0);

    gauss_blur_mac_mudEe_U1 : component gauss_blur_mac_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_843_p0,
        din1 => grp_fu_843_p1,
        din2 => result_1_i_reg_359,
        dout => grp_fu_843_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    col_0_reg_313_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and ((ap_const_lv1_0 = and_ln67_reg_998) or ((icmp_ln14_fu_712_p2 = ap_const_lv1_1) or (or_ln72_2_reg_1007 = ap_const_lv1_1))))) then 
                col_0_reg_313 <= col_reg_939;
            elsif (((icmp_ln45_fu_446_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                col_0_reg_313 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i1_0_reg_325_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i1_0_reg_325 <= i_1_reg_968;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i1_0_reg_325 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln72_2_fu_692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = and_ln67_fu_659_p2))) then 
                i_0_i_reg_348 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln15_fu_808_p2 = ap_const_lv1_1))) then 
                i_0_i_reg_348 <= i_2_reg_1014;
            end if; 
        end if;
    end process;

    i_0_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_fu_416_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_280 <= i_reg_869;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_280 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_0_i_reg_371_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                j_0_i_reg_371 <= j_1_reg_1027;
            elsif (((icmp_ln14_fu_712_p2 = ap_const_lv1_0) and (or_ln72_2_reg_1007 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = and_ln67_reg_998))) then 
                j_0_i_reg_371 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_0_reg_291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_382_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_291 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_0_reg_291 <= j_reg_882;
            end if; 
        end if;
    end process;

    result_0_i_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln72_2_fu_692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = and_ln67_fu_659_p2))) then 
                result_0_i_reg_336 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln15_fu_808_p2 = ap_const_lv1_1))) then 
                result_0_i_reg_336 <= result_1_i_reg_359;
            end if; 
        end if;
    end process;

    result_1_i_reg_359_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                result_1_i_reg_359 <= grp_fu_843_p3;
            elsif (((icmp_ln14_fu_712_p2 = ap_const_lv1_0) and (or_ln72_2_reg_1007 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = and_ln67_reg_998))) then 
                result_1_i_reg_359 <= result_0_i_reg_336;
            end if; 
        end if;
    end process;

    row_0_reg_302_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_382_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                row_0_reg_302 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln46_fu_544_p2 = ap_const_lv1_1))) then 
                row_0_reg_302 <= row_reg_900;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                and_ln67_reg_998 <= and_ln67_fu_659_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                col_reg_939 <= col_fu_550_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_1_reg_968 <= i_1_fu_599_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln72_2_reg_1007 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = and_ln67_reg_998))) then
                i_2_reg_1014 <= i_2_fu_718_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_869 <= i_fu_388_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                icmp_ln49_1_reg_949 <= icmp_ln49_1_fu_570_p2;
                select_ln49_reg_959 <= select_ln49_fu_585_p3;
                    zext_ln50_1_reg_953(8 downto 0) <= zext_ln50_1_fu_581_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_fu_446_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                icmp_ln49_reg_905 <= icmp_ln49_fu_458_p2;
                icmp_ln67_reg_915 <= icmp_ln67_fu_494_p2;
                icmp_ln72_1_reg_925 <= icmp_ln72_1_fu_512_p2;
                icmp_ln72_reg_920 <= icmp_ln72_fu_506_p2;
                    sub_ln50_reg_910(19 downto 5) <= sub_ln50_fu_488_p2(19 downto 5);
                    sub_ln73_reg_930(19 downto 5) <= sub_ln73_fu_538_p2(19 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                j_1_reg_1027 <= j_1_fu_814_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_882 <= j_fu_422_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = and_ln67_fu_659_p2))) then
                or_ln72_2_reg_1007 <= or_ln72_2_fu_692_p2;
                outcol_reg_1002 <= outcol_fu_664_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln54_fu_593_p2 = ap_const_lv1_1) and (icmp_ln49_1_reg_949 = ap_const_lv1_1))) then
                part_buffer_0_addr_reg_988 <= zext_ln50_1_reg_953(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                row_reg_900 <= row_fu_452_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_fu_416_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                sext_ln40_reg_887 <= sext_ln40_fu_437_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_712_p2 = ap_const_lv1_0) and (or_ln72_2_reg_1007 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = and_ln67_reg_998))) then
                sub_ln16_reg_1019 <= sub_ln16_fu_740_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_382_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                sub_ln40_reg_874 <= sub_ln40_fu_410_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_fu_593_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                sub_ln55_reg_973 <= sub_ln55_fu_621_p2;
                window_addr_3_reg_978 <= sext_ln55_1_fu_633_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    sub_ln50_reg_910(4 downto 0) <= "00000";
    sub_ln73_reg_930(4 downto 0) <= "00000";
    zext_ln50_1_reg_953(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln38_fu_382_p2, ap_CS_fsm_state3, icmp_ln39_fu_416_p2, ap_CS_fsm_state5, icmp_ln45_fu_446_p2, ap_CS_fsm_state6, icmp_ln46_fu_544_p2, ap_CS_fsm_state8, icmp_ln54_fu_593_p2, and_ln67_reg_998, or_ln72_2_reg_1007, ap_CS_fsm_state11, icmp_ln14_fu_712_p2, ap_CS_fsm_state12, icmp_ln15_fu_808_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln38_fu_382_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln39_fu_416_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln45_fu_446_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln46_fu_544_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln54_fu_593_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and ((ap_const_lv1_0 = and_ln67_reg_998) or ((icmp_ln14_fu_712_p2 = ap_const_lv1_1) or (or_ln72_2_reg_1007 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln15_fu_808_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    add_ln16_fu_824_p2 <= std_logic_vector(unsigned(sub_ln16_reg_1019) + unsigned(zext_ln16_5_fu_820_p1));
    add_ln40_fu_432_p2 <= std_logic_vector(unsigned(sub_ln40_reg_874) + unsigned(zext_ln40_2_fu_428_p1));
    add_ln50_fu_560_p2 <= std_logic_vector(unsigned(sub_ln50_reg_910) + unsigned(zext_ln50_3_fu_556_p1));
    add_ln55_fu_627_p2 <= std_logic_vector(signed(sub_ln55_fu_621_p2) + signed(ap_const_lv5_1));
    add_ln56_fu_638_p2 <= std_logic_vector(signed(sub_ln55_fu_621_p2) + signed(ap_const_lv5_2));
    add_ln73_fu_702_p2 <= std_logic_vector(unsigned(sub_ln73_reg_930) + unsigned(zext_ln73_fu_698_p1));
    add_ln75_fu_798_p2 <= std_logic_vector(unsigned(sub_ln73_reg_930) + unsigned(zext_ln75_fu_795_p1));
    and_ln49_fu_576_p2 <= (icmp_ln49_reg_905 and icmp_ln49_1_fu_570_p2);
    and_ln67_fu_659_p2 <= (icmp_ln67_reg_915 and icmp_ln67_1_fu_653_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state5, icmp_ln45_fu_446_p2)
    begin
        if (((icmp_ln45_fu_446_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, icmp_ln45_fu_446_p2)
    begin
        if (((icmp_ln45_fu_446_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_fu_550_p2 <= std_logic_vector(unsigned(col_0_reg_313) + unsigned(ap_const_lv9_1));
    gauss_kernel_address0 <= sext_ln40_fu_437_p1(4 - 1 downto 0);

    gauss_kernel_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            gauss_kernel_ce0 <= ap_const_logic_1;
        else 
            gauss_kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_843_p0 <= grp_fu_843_p00(8 - 1 downto 0);
    grp_fu_843_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kernel_q0),16));
    grp_fu_843_p1 <= grp_fu_843_p10(8 - 1 downto 0);
    grp_fu_843_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_q1),16));
    i_1_fu_599_p2 <= std_logic_vector(unsigned(i1_0_reg_325) + unsigned(ap_const_lv2_1));
    i_2_fu_718_p2 <= std_logic_vector(unsigned(i_0_i_reg_348) + unsigned(ap_const_lv2_1));
    i_fu_388_p2 <= std_logic_vector(unsigned(i_0_reg_280) + unsigned(ap_const_lv2_1));
    icmp_ln14_fu_712_p2 <= "1" when (i_0_i_reg_348 = ap_const_lv2_3) else "0";
    icmp_ln15_fu_808_p2 <= "1" when (j_0_i_reg_371 = ap_const_lv2_3) else "0";
    icmp_ln38_fu_382_p2 <= "1" when (i_0_reg_280 = ap_const_lv2_3) else "0";
    icmp_ln39_fu_416_p2 <= "1" when (j_0_reg_291 = ap_const_lv2_3) else "0";
    icmp_ln45_fu_446_p2 <= "1" when (row_0_reg_302 = ap_const_lv10_281) else "0";
    icmp_ln46_fu_544_p2 <= "1" when (col_0_reg_313 = ap_const_lv9_1E1) else "0";
    icmp_ln49_1_fu_570_p2 <= "1" when (unsigned(col_0_reg_313) < unsigned(ap_const_lv9_1E0)) else "0";
    icmp_ln49_fu_458_p2 <= "1" when (unsigned(row_0_reg_302) < unsigned(ap_const_lv10_280)) else "0";
    icmp_ln54_fu_593_p2 <= "1" when (i1_0_reg_325 = ap_const_lv2_3) else "0";
    icmp_ln67_1_fu_653_p2 <= "0" when (col_0_reg_313 = ap_const_lv9_0) else "1";
    icmp_ln67_fu_494_p2 <= "0" when (row_0_reg_302 = ap_const_lv10_0) else "1";
    icmp_ln72_1_fu_512_p2 <= "1" when (outrow_fu_500_p2 = ap_const_lv11_27F) else "0";
    icmp_ln72_2_fu_670_p2 <= "1" when (outcol_fu_664_p2 = ap_const_lv9_0) else "0";
    icmp_ln72_3_fu_676_p2 <= "1" when (outcol_fu_664_p2 = ap_const_lv9_1DF) else "0";
    icmp_ln72_fu_506_p2 <= "1" when (outrow_fu_500_p2 = ap_const_lv11_0) else "0";
    inImage_address0 <= sext_ln50_fu_565_p1(19 - 1 downto 0);

    inImage_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            inImage_ce0 <= ap_const_logic_1;
        else 
            inImage_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_814_p2 <= std_logic_vector(unsigned(j_0_i_reg_371) + unsigned(ap_const_lv2_1));
    j_fu_422_p2 <= std_logic_vector(unsigned(j_0_reg_291) + unsigned(ap_const_lv2_1));

    kernel_address0_assign_proc : process(sext_ln40_reg_887, ap_CS_fsm_state12, ap_CS_fsm_state4, sext_ln16_fu_829_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            kernel_address0 <= sext_ln16_fu_829_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            kernel_address0 <= sext_ln40_reg_887(4 - 1 downto 0);
        else 
            kernel_address0 <= "XXXX";
        end if; 
    end process;


    kernel_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            kernel_we0 <= ap_const_logic_1;
        else 
            kernel_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln72_1_fu_687_p2 <= (icmp_ln72_3_fu_676_p2 or icmp_ln72_1_reg_925);
    or_ln72_2_fu_692_p2 <= (or_ln72_fu_682_p2 or or_ln72_1_fu_687_p2);
    or_ln72_fu_682_p2 <= (icmp_ln72_reg_920 or icmp_ln72_2_fu_670_p2);

    outImage_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, sext_ln73_1_fu_707_p1, sext_ln75_fu_803_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            outImage_address0 <= sext_ln75_fu_803_p1(19 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            outImage_address0 <= sext_ln73_1_fu_707_p1(19 - 1 downto 0);
        else 
            outImage_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    outImage_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            outImage_ce0 <= ap_const_logic_1;
        else 
            outImage_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    outImage_d0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, select_ln21_fu_786_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            outImage_d0 <= select_ln21_fu_786_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            outImage_d0 <= ap_const_lv8_0;
        else 
            outImage_d0 <= "XXXXXXXX";
        end if; 
    end process;


    outImage_we0_assign_proc : process(and_ln67_fu_659_p2, and_ln67_reg_998, ap_CS_fsm_state10, or_ln72_2_fu_692_p2, or_ln72_2_reg_1007, ap_CS_fsm_state11, icmp_ln14_fu_712_p2)
    begin
        if ((((or_ln72_2_reg_1007 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln14_fu_712_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln67_reg_998)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (or_ln72_2_fu_692_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln67_fu_659_p2)))) then 
            outImage_we0 <= ap_const_logic_1;
        else 
            outImage_we0 <= ap_const_logic_0;
        end if; 
    end process;

    outcol_fu_664_p2 <= std_logic_vector(unsigned(col_0_reg_313) + unsigned(ap_const_lv9_1FF));
    outrow_fu_500_p2 <= std_logic_vector(unsigned(zext_ln45_fu_442_p1) + unsigned(ap_const_lv11_7FF));

    part_buffer_0_address0_assign_proc : process(zext_ln50_1_reg_953, ap_CS_fsm_state8, part_buffer_0_addr_reg_988, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            part_buffer_0_address0 <= part_buffer_0_addr_reg_988;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            part_buffer_0_address0 <= zext_ln50_1_reg_953(9 - 1 downto 0);
        else 
            part_buffer_0_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    part_buffer_0_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            part_buffer_0_ce0 <= ap_const_logic_1;
        else 
            part_buffer_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    part_buffer_0_we0_assign_proc : process(icmp_ln49_1_reg_949, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln49_1_reg_949 = ap_const_lv1_1))) then 
            part_buffer_0_we0 <= ap_const_logic_1;
        else 
            part_buffer_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    part_buffer_1_address0 <= zext_ln50_1_reg_953(9 - 1 downto 0);

    part_buffer_1_ce0_assign_proc : process(icmp_ln49_1_reg_949, ap_CS_fsm_state8, icmp_ln54_fu_593_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln54_fu_593_p2 = ap_const_lv1_1) and (icmp_ln49_1_reg_949 = ap_const_lv1_1))) then 
            part_buffer_1_ce0 <= ap_const_logic_1;
        else 
            part_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    part_buffer_1_we0_assign_proc : process(icmp_ln49_1_reg_949, ap_CS_fsm_state8, icmp_ln54_fu_593_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln54_fu_593_p2 = ap_const_lv1_1) and (icmp_ln49_1_reg_949 = ap_const_lv1_1))) then 
            part_buffer_1_we0 <= ap_const_logic_1;
        else 
            part_buffer_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    row_fu_452_p2 <= std_logic_vector(unsigned(row_0_reg_302) + unsigned(ap_const_lv10_1));
    select_ln21_fu_786_p3 <= 
        sub_ln21_1_fu_770_p2 when (tmp_9_fu_746_p3(0) = '1') else 
        trunc_ln21_2_fu_776_p4;
    select_ln49_fu_585_p3 <= 
        inImage_q0 when (and_ln49_fu_576_p2(0) = '1') else 
        ap_const_lv8_0;
        sext_ln16_fu_829_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln16_fu_824_p2),64));

        sext_ln40_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln40_fu_432_p2),64));

        sext_ln50_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln50_fu_560_p2),64));

        sext_ln55_1_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln55_fu_627_p2),64));

        sext_ln55_fu_649_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln55_reg_973),64));

        sext_ln56_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln56_fu_638_p2),64));

        sext_ln73_1_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln73_fu_702_p2),64));

        sext_ln73_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_fu_526_p3),20));

        sext_ln75_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln75_fu_798_p2),64));

    sub_ln16_fu_740_p2 <= std_logic_vector(unsigned(zext_ln16_1_fu_736_p1) - unsigned(zext_ln16_fu_724_p1));
    sub_ln21_1_fu_770_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(trunc_ln21_1_fu_760_p4));
    sub_ln21_fu_754_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(result_0_i_reg_336));
    sub_ln40_fu_410_p2 <= std_logic_vector(unsigned(zext_ln40_1_fu_406_p1) - unsigned(zext_ln40_fu_394_p1));
    sub_ln50_fu_488_p2 <= std_logic_vector(unsigned(zext_ln50_fu_472_p1) - unsigned(zext_ln50_2_fu_484_p1));
    sub_ln55_fu_621_p2 <= std_logic_vector(unsigned(zext_ln55_1_fu_617_p1) - unsigned(zext_ln55_fu_605_p1));
    sub_ln73_fu_538_p2 <= std_logic_vector(unsigned(tmp_5_fu_518_p3) - unsigned(sext_ln73_fu_534_p1));
    tmp_2_fu_398_p3 <= (i_0_reg_280 & ap_const_lv2_0);
    tmp_3_fu_464_p3 <= (row_0_reg_302 & ap_const_lv9_0);
    tmp_4_fu_476_p3 <= (row_0_reg_302 & ap_const_lv5_0);
    tmp_5_fu_518_p3 <= (outrow_fu_500_p2 & ap_const_lv9_0);
    tmp_6_fu_526_p3 <= (outrow_fu_500_p2 & ap_const_lv5_0);
    tmp_7_fu_609_p3 <= (i1_0_reg_325 & ap_const_lv2_0);
    tmp_8_fu_728_p3 <= (i_0_i_reg_348 & ap_const_lv2_0);
    tmp_9_fu_746_p3 <= result_0_i_reg_336(31 downto 31);
    trunc_ln21_1_fu_760_p4 <= sub_ln21_fu_754_p2(11 downto 4);
    trunc_ln21_2_fu_776_p4 <= result_0_i_reg_336(11 downto 4);

    window_address0_assign_proc : process(icmp_ln49_1_reg_949, ap_CS_fsm_state8, icmp_ln54_fu_593_p2, window_addr_3_reg_978, ap_CS_fsm_state10, ap_CS_fsm_state9, sext_ln55_1_fu_633_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            window_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            window_address0 <= window_addr_3_reg_978;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln54_fu_593_p2 = ap_const_lv1_1) and (icmp_ln49_1_reg_949 = ap_const_lv1_1))) then 
            window_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif (((icmp_ln54_fu_593_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            window_address0 <= sext_ln55_1_fu_633_p1(4 - 1 downto 0);
        else 
            window_address0 <= "XXXX";
        end if; 
    end process;


    window_address1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state9, sext_ln56_fu_644_p1, sext_ln55_fu_649_p1, sext_ln16_fu_829_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            window_address1 <= sext_ln16_fu_829_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            window_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            window_address1 <= sext_ln55_fu_649_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            window_address1 <= sext_ln56_fu_644_p1(4 - 1 downto 0);
        else 
            window_address1 <= "XXXX";
        end if; 
    end process;


    window_ce0_assign_proc : process(icmp_ln49_1_reg_949, ap_CS_fsm_state8, icmp_ln54_fu_593_p2, ap_CS_fsm_state10, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln54_fu_593_p2 = ap_const_lv1_1) and (icmp_ln49_1_reg_949 = ap_const_lv1_1)) or ((icmp_ln54_fu_593_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            window_ce0 <= ap_const_logic_1;
        else 
            window_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    window_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            window_ce1 <= ap_const_logic_1;
        else 
            window_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    window_d0_assign_proc : process(icmp_ln49_1_reg_949, select_ln49_reg_959, ap_CS_fsm_state8, icmp_ln54_fu_593_p2, ap_CS_fsm_state10, window_q1, part_buffer_1_q0, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            window_d0 <= part_buffer_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            window_d0 <= window_q1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln54_fu_593_p2 = ap_const_lv1_1) and (icmp_ln49_1_reg_949 = ap_const_lv1_1))) then 
            window_d0 <= select_ln49_reg_959;
        else 
            window_d0 <= "XXXXXXXX";
        end if; 
    end process;


    window_d1_assign_proc : process(ap_CS_fsm_state10, window_q0, part_buffer_0_q0, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            window_d1 <= part_buffer_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            window_d1 <= window_q0;
        else 
            window_d1 <= "XXXXXXXX";
        end if; 
    end process;


    window_we0_assign_proc : process(icmp_ln49_1_reg_949, ap_CS_fsm_state8, icmp_ln54_fu_593_p2, ap_CS_fsm_state10, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln49_1_reg_949 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln54_fu_593_p2 = ap_const_lv1_1) and (icmp_ln49_1_reg_949 = ap_const_lv1_1)))) then 
            window_we0 <= ap_const_logic_1;
        else 
            window_we0 <= ap_const_logic_0;
        end if; 
    end process;


    window_we1_assign_proc : process(icmp_ln49_1_reg_949, ap_CS_fsm_state10, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln49_1_reg_949 = ap_const_lv1_1)))) then 
            window_we1 <= ap_const_logic_1;
        else 
            window_we1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln16_1_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_728_p3),5));
    zext_ln16_5_fu_820_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_reg_371),5));
    zext_ln16_fu_724_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_348),5));
    zext_ln40_1_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_398_p3),5));
    zext_ln40_2_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_291),5));
    zext_ln40_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_280),5));
    zext_ln45_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_0_reg_302),11));
    zext_ln50_1_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_0_reg_313),64));
    zext_ln50_2_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_476_p3),20));
    zext_ln50_3_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_0_reg_313),20));
    zext_ln50_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_464_p3),20));
    zext_ln55_1_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_609_p3),5));
    zext_ln55_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_325),5));
    zext_ln73_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outcol_fu_664_p2),20));
    zext_ln75_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outcol_reg_1002),20));
end behav;
