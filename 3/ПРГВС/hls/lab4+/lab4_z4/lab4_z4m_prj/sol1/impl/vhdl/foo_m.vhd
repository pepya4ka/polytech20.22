-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity foo_m is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    data_in_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    data_in_ce0 : OUT STD_LOGIC;
    data_in_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_in_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_in_we0 : OUT STD_LOGIC;
    data_in_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    data_in_ce1 : OUT STD_LOGIC;
    data_in_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_in_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_in_we1 : OUT STD_LOGIC;
    scale_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    scale_ce0 : OUT STD_LOGIC;
    scale_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    scale_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    scale_we0 : OUT STD_LOGIC;
    scale_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    scale_ce1 : OUT STD_LOGIC;
    scale_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    scale_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    scale_we1 : OUT STD_LOGIC;
    data_out_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    data_out_ce0 : OUT STD_LOGIC;
    data_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_out_we0 : OUT STD_LOGIC;
    data_out_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    data_out_ce1 : OUT STD_LOGIC;
    data_out_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_out_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_out_we1 : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of foo_m is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "foo_m,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12t-csg325-1Q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=9.216000,HLS_SYN_LAT=49167,HLS_SYN_TPT=16389,HLS_SYN_MEM=128,HLS_SYN_DSP=9,HLS_SYN_FF=626,HLS_SYN_LUT=868,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal temp1_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp3_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp3_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp4_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp4_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_codeRepl8_proc_U0_ap_start : STD_LOGIC;
    signal Block_codeRepl8_proc_U0_ap_done : STD_LOGIC;
    signal Block_codeRepl8_proc_U0_ap_continue : STD_LOGIC;
    signal Block_codeRepl8_proc_U0_ap_idle : STD_LOGIC;
    signal Block_codeRepl8_proc_U0_ap_ready : STD_LOGIC;
    signal Block_codeRepl8_proc_U0_scale_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal Block_codeRepl8_proc_U0_scale_ce0 : STD_LOGIC;
    signal Block_codeRepl8_proc_U0_scale_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal Block_codeRepl8_proc_U0_scale_ce1 : STD_LOGIC;
    signal Block_codeRepl8_proc_U0_tmp3_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_codeRepl8_proc_U0_tmp3_out_out_write : STD_LOGIC;
    signal Block_codeRepl8_proc_U0_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_codeRepl8_proc_U0_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_tmp2_loc_channel : STD_LOGIC;
    signal tmp2_loc_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_tmp2_loc_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_tmp2_loc_channel : STD_LOGIC;
    signal ap_channel_done_tmp1_loc_channel : STD_LOGIC;
    signal tmp1_loc_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_tmp1_loc_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_tmp1_loc_channel : STD_LOGIC;
    signal Loop_Loop1_proc_U0_ap_start : STD_LOGIC;
    signal Loop_Loop1_proc_U0_ap_done : STD_LOGIC;
    signal Loop_Loop1_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_Loop1_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_Loop1_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_Loop1_proc_U0_data_in_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal Loop_Loop1_proc_U0_data_in_ce0 : STD_LOGIC;
    signal Loop_Loop1_proc_U0_temp1_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal Loop_Loop1_proc_U0_temp1_ce0 : STD_LOGIC;
    signal Loop_Loop1_proc_U0_temp1_we0 : STD_LOGIC;
    signal Loop_Loop1_proc_U0_temp1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_Loop1_proc_U0_temp2_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal Loop_Loop1_proc_U0_temp2_ce0 : STD_LOGIC;
    signal Loop_Loop1_proc_U0_temp2_we0 : STD_LOGIC;
    signal Loop_Loop1_proc_U0_temp2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_temp2 : STD_LOGIC;
    signal Loop_Loop1_proc_U0_temp2_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_temp2 : STD_LOGIC := '0';
    signal ap_sync_channel_write_temp2 : STD_LOGIC;
    signal ap_channel_done_temp1 : STD_LOGIC;
    signal Loop_Loop1_proc_U0_temp1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_temp1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_temp1 : STD_LOGIC;
    signal Loop_Loop2_proc_U0_ap_start : STD_LOGIC;
    signal Loop_Loop2_proc_U0_ap_done : STD_LOGIC;
    signal Loop_Loop2_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_Loop2_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_Loop2_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_Loop2_proc_U0_temp1_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal Loop_Loop2_proc_U0_temp1_ce0 : STD_LOGIC;
    signal Loop_Loop2_proc_U0_tmp3_loc_read : STD_LOGIC;
    signal Loop_Loop2_proc_U0_temp3_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal Loop_Loop2_proc_U0_temp3_ce0 : STD_LOGIC;
    signal Loop_Loop2_proc_U0_temp3_we0 : STD_LOGIC;
    signal Loop_Loop2_proc_U0_temp3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_Loop2_proc_U0_temp2_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal Loop_Loop2_proc_U0_temp2_ce0 : STD_LOGIC;
    signal Loop_Loop2_proc_U0_temp4_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal Loop_Loop2_proc_U0_temp4_ce0 : STD_LOGIC;
    signal Loop_Loop2_proc_U0_temp4_we0 : STD_LOGIC;
    signal Loop_Loop2_proc_U0_temp4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_temp4 : STD_LOGIC;
    signal Loop_Loop2_proc_U0_temp4_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_temp4 : STD_LOGIC := '0';
    signal ap_sync_channel_write_temp4 : STD_LOGIC;
    signal ap_channel_done_temp3 : STD_LOGIC;
    signal Loop_Loop2_proc_U0_temp3_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_temp3 : STD_LOGIC := '0';
    signal ap_sync_channel_write_temp3 : STD_LOGIC;
    signal Loop_Loop3_proc_U0_ap_start : STD_LOGIC;
    signal Loop_Loop3_proc_U0_ap_done : STD_LOGIC;
    signal Loop_Loop3_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_Loop3_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_Loop3_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_Loop3_proc_U0_temp4_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal Loop_Loop3_proc_U0_temp4_ce0 : STD_LOGIC;
    signal Loop_Loop3_proc_U0_temp3_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal Loop_Loop3_proc_U0_temp3_ce0 : STD_LOGIC;
    signal Loop_Loop3_proc_U0_data_out_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal Loop_Loop3_proc_U0_data_out_ce0 : STD_LOGIC;
    signal Loop_Loop3_proc_U0_data_out_we0 : STD_LOGIC;
    signal Loop_Loop3_proc_U0_data_out_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal temp1_i_full_n : STD_LOGIC;
    signal temp1_t_empty_n : STD_LOGIC;
    signal temp2_i_full_n : STD_LOGIC;
    signal temp2_t_empty_n : STD_LOGIC;
    signal temp3_i_full_n : STD_LOGIC;
    signal temp3_t_empty_n : STD_LOGIC;
    signal temp4_i_full_n : STD_LOGIC;
    signal temp4_t_empty_n : STD_LOGIC;
    signal tmp3_loc_c_full_n : STD_LOGIC;
    signal tmp3_loc_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_loc_c_empty_n : STD_LOGIC;
    signal tmp1_loc_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_loc_channel_empty_n : STD_LOGIC;
    signal tmp2_loc_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_loc_channel_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_Block_codeRepl8_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Block_codeRepl8_proc_U0_ap_ready : STD_LOGIC;
    signal Block_codeRepl8_proc_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_Loop_Loop1_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Loop_Loop1_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_Loop1_proc_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal Block_codeRepl8_proc_U0_start_full_n : STD_LOGIC;
    signal Block_codeRepl8_proc_U0_start_write : STD_LOGIC;
    signal Loop_Loop1_proc_U0_start_full_n : STD_LOGIC;
    signal Loop_Loop1_proc_U0_start_write : STD_LOGIC;
    signal Loop_Loop2_proc_U0_start_full_n : STD_LOGIC;
    signal Loop_Loop2_proc_U0_start_write : STD_LOGIC;
    signal Loop_Loop3_proc_U0_start_full_n : STD_LOGIC;
    signal Loop_Loop3_proc_U0_start_write : STD_LOGIC;

    component Block_codeRepl8_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        scale_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        scale_ce0 : OUT STD_LOGIC;
        scale_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        scale_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
        scale_ce1 : OUT STD_LOGIC;
        scale_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp3_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        tmp3_out_out_full_n : IN STD_LOGIC;
        tmp3_out_out_write : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Loop_Loop1_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_in_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        data_in_ce0 : OUT STD_LOGIC;
        data_in_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        temp1_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        temp1_ce0 : OUT STD_LOGIC;
        temp1_we0 : OUT STD_LOGIC;
        temp1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        temp2_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        temp2_ce0 : OUT STD_LOGIC;
        temp2_we0 : OUT STD_LOGIC;
        temp2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Loop_Loop2_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        temp1_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        temp1_ce0 : OUT STD_LOGIC;
        temp1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp3_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp3_loc_empty_n : IN STD_LOGIC;
        tmp3_loc_read : OUT STD_LOGIC;
        temp3_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        temp3_ce0 : OUT STD_LOGIC;
        temp3_we0 : OUT STD_LOGIC;
        temp3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        temp2_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        temp2_ce0 : OUT STD_LOGIC;
        temp2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        temp4_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        temp4_ce0 : OUT STD_LOGIC;
        temp4_we0 : OUT STD_LOGIC;
        temp4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Loop_Loop3_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        temp4_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        temp4_ce0 : OUT STD_LOGIC;
        temp4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        temp3_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        temp3_ce0 : OUT STD_LOGIC;
        temp3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_out_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        data_out_ce0 : OUT STD_LOGIC;
        data_out_we0 : OUT STD_LOGIC;
        data_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foo_m_temp1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    temp1_U : component foo_m_temp1
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => Loop_Loop1_proc_U0_temp1_address0,
        i_ce0 => Loop_Loop1_proc_U0_temp1_ce0,
        i_we0 => Loop_Loop1_proc_U0_temp1_we0,
        i_d0 => Loop_Loop1_proc_U0_temp1_d0,
        i_q0 => temp1_i_q0,
        t_address0 => Loop_Loop2_proc_U0_temp1_address0,
        t_ce0 => Loop_Loop2_proc_U0_temp1_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => temp1_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => temp1_i_full_n,
        i_write => ap_channel_done_temp1,
        t_empty_n => temp1_t_empty_n,
        t_read => Loop_Loop2_proc_U0_ap_ready);

    temp2_U : component foo_m_temp1
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => Loop_Loop1_proc_U0_temp2_address0,
        i_ce0 => Loop_Loop1_proc_U0_temp2_ce0,
        i_we0 => Loop_Loop1_proc_U0_temp2_we0,
        i_d0 => Loop_Loop1_proc_U0_temp2_d0,
        i_q0 => temp2_i_q0,
        t_address0 => Loop_Loop2_proc_U0_temp2_address0,
        t_ce0 => Loop_Loop2_proc_U0_temp2_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => temp2_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => temp2_i_full_n,
        i_write => ap_channel_done_temp2,
        t_empty_n => temp2_t_empty_n,
        t_read => Loop_Loop2_proc_U0_ap_ready);

    temp3_U : component foo_m_temp1
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => Loop_Loop2_proc_U0_temp3_address0,
        i_ce0 => Loop_Loop2_proc_U0_temp3_ce0,
        i_we0 => Loop_Loop2_proc_U0_temp3_we0,
        i_d0 => Loop_Loop2_proc_U0_temp3_d0,
        i_q0 => temp3_i_q0,
        t_address0 => Loop_Loop3_proc_U0_temp3_address0,
        t_ce0 => Loop_Loop3_proc_U0_temp3_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => temp3_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => temp3_i_full_n,
        i_write => ap_channel_done_temp3,
        t_empty_n => temp3_t_empty_n,
        t_read => Loop_Loop3_proc_U0_ap_ready);

    temp4_U : component foo_m_temp1
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => Loop_Loop2_proc_U0_temp4_address0,
        i_ce0 => Loop_Loop2_proc_U0_temp4_ce0,
        i_we0 => Loop_Loop2_proc_U0_temp4_we0,
        i_d0 => Loop_Loop2_proc_U0_temp4_d0,
        i_q0 => temp4_i_q0,
        t_address0 => Loop_Loop3_proc_U0_temp4_address0,
        t_ce0 => Loop_Loop3_proc_U0_temp4_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => temp4_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => temp4_i_full_n,
        i_write => ap_channel_done_temp4,
        t_empty_n => temp4_t_empty_n,
        t_read => Loop_Loop3_proc_U0_ap_ready);

    Block_codeRepl8_proc_U0 : component Block_codeRepl8_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_codeRepl8_proc_U0_ap_start,
        ap_done => Block_codeRepl8_proc_U0_ap_done,
        ap_continue => Block_codeRepl8_proc_U0_ap_continue,
        ap_idle => Block_codeRepl8_proc_U0_ap_idle,
        ap_ready => Block_codeRepl8_proc_U0_ap_ready,
        scale_address0 => Block_codeRepl8_proc_U0_scale_address0,
        scale_ce0 => Block_codeRepl8_proc_U0_scale_ce0,
        scale_q0 => scale_q0,
        scale_address1 => Block_codeRepl8_proc_U0_scale_address1,
        scale_ce1 => Block_codeRepl8_proc_U0_scale_ce1,
        scale_q1 => scale_q1,
        tmp3_out_out_din => Block_codeRepl8_proc_U0_tmp3_out_out_din,
        tmp3_out_out_full_n => tmp3_loc_c_full_n,
        tmp3_out_out_write => Block_codeRepl8_proc_U0_tmp3_out_out_write,
        ap_return_0 => Block_codeRepl8_proc_U0_ap_return_0,
        ap_return_1 => Block_codeRepl8_proc_U0_ap_return_1);

    Loop_Loop1_proc_U0 : component Loop_Loop1_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Loop_Loop1_proc_U0_ap_start,
        ap_done => Loop_Loop1_proc_U0_ap_done,
        ap_continue => Loop_Loop1_proc_U0_ap_continue,
        ap_idle => Loop_Loop1_proc_U0_ap_idle,
        ap_ready => Loop_Loop1_proc_U0_ap_ready,
        data_in_address0 => Loop_Loop1_proc_U0_data_in_address0,
        data_in_ce0 => Loop_Loop1_proc_U0_data_in_ce0,
        data_in_q0 => data_in_q0,
        p_read => tmp1_loc_channel_dout,
        temp1_address0 => Loop_Loop1_proc_U0_temp1_address0,
        temp1_ce0 => Loop_Loop1_proc_U0_temp1_ce0,
        temp1_we0 => Loop_Loop1_proc_U0_temp1_we0,
        temp1_d0 => Loop_Loop1_proc_U0_temp1_d0,
        p_read1 => tmp2_loc_channel_dout,
        temp2_address0 => Loop_Loop1_proc_U0_temp2_address0,
        temp2_ce0 => Loop_Loop1_proc_U0_temp2_ce0,
        temp2_we0 => Loop_Loop1_proc_U0_temp2_we0,
        temp2_d0 => Loop_Loop1_proc_U0_temp2_d0);

    Loop_Loop2_proc_U0 : component Loop_Loop2_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Loop_Loop2_proc_U0_ap_start,
        ap_done => Loop_Loop2_proc_U0_ap_done,
        ap_continue => Loop_Loop2_proc_U0_ap_continue,
        ap_idle => Loop_Loop2_proc_U0_ap_idle,
        ap_ready => Loop_Loop2_proc_U0_ap_ready,
        temp1_address0 => Loop_Loop2_proc_U0_temp1_address0,
        temp1_ce0 => Loop_Loop2_proc_U0_temp1_ce0,
        temp1_q0 => temp1_t_q0,
        tmp3_loc_dout => tmp3_loc_c_dout,
        tmp3_loc_empty_n => tmp3_loc_c_empty_n,
        tmp3_loc_read => Loop_Loop2_proc_U0_tmp3_loc_read,
        temp3_address0 => Loop_Loop2_proc_U0_temp3_address0,
        temp3_ce0 => Loop_Loop2_proc_U0_temp3_ce0,
        temp3_we0 => Loop_Loop2_proc_U0_temp3_we0,
        temp3_d0 => Loop_Loop2_proc_U0_temp3_d0,
        temp2_address0 => Loop_Loop2_proc_U0_temp2_address0,
        temp2_ce0 => Loop_Loop2_proc_U0_temp2_ce0,
        temp2_q0 => temp2_t_q0,
        temp4_address0 => Loop_Loop2_proc_U0_temp4_address0,
        temp4_ce0 => Loop_Loop2_proc_U0_temp4_ce0,
        temp4_we0 => Loop_Loop2_proc_U0_temp4_we0,
        temp4_d0 => Loop_Loop2_proc_U0_temp4_d0);

    Loop_Loop3_proc_U0 : component Loop_Loop3_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Loop_Loop3_proc_U0_ap_start,
        ap_done => Loop_Loop3_proc_U0_ap_done,
        ap_continue => Loop_Loop3_proc_U0_ap_continue,
        ap_idle => Loop_Loop3_proc_U0_ap_idle,
        ap_ready => Loop_Loop3_proc_U0_ap_ready,
        temp4_address0 => Loop_Loop3_proc_U0_temp4_address0,
        temp4_ce0 => Loop_Loop3_proc_U0_temp4_ce0,
        temp4_q0 => temp4_t_q0,
        temp3_address0 => Loop_Loop3_proc_U0_temp3_address0,
        temp3_ce0 => Loop_Loop3_proc_U0_temp3_ce0,
        temp3_q0 => temp3_t_q0,
        data_out_address0 => Loop_Loop3_proc_U0_data_out_address0,
        data_out_ce0 => Loop_Loop3_proc_U0_data_out_ce0,
        data_out_we0 => Loop_Loop3_proc_U0_data_out_we0,
        data_out_d0 => Loop_Loop3_proc_U0_data_out_d0);

    tmp3_loc_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl8_proc_U0_tmp3_out_out_din,
        if_full_n => tmp3_loc_c_full_n,
        if_write => Block_codeRepl8_proc_U0_tmp3_out_out_write,
        if_dout => tmp3_loc_c_dout,
        if_empty_n => tmp3_loc_c_empty_n,
        if_read => Loop_Loop2_proc_U0_tmp3_loc_read);

    tmp1_loc_channel_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl8_proc_U0_ap_return_0,
        if_full_n => tmp1_loc_channel_full_n,
        if_write => ap_channel_done_tmp1_loc_channel,
        if_dout => tmp1_loc_channel_dout,
        if_empty_n => tmp1_loc_channel_empty_n,
        if_read => Loop_Loop1_proc_U0_ap_ready);

    tmp2_loc_channel_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl8_proc_U0_ap_return_1,
        if_full_n => tmp2_loc_channel_full_n,
        if_write => ap_channel_done_tmp2_loc_channel,
        if_dout => tmp2_loc_channel_dout,
        if_empty_n => tmp2_loc_channel_empty_n,
        if_read => Loop_Loop1_proc_U0_ap_ready);





    ap_sync_reg_Block_codeRepl8_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_Block_codeRepl8_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Block_codeRepl8_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Block_codeRepl8_proc_U0_ap_ready <= ap_sync_Block_codeRepl8_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Loop_Loop1_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_Loop_Loop1_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Loop_Loop1_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Loop_Loop1_proc_U0_ap_ready <= ap_sync_Loop_Loop1_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_temp1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_temp1 <= ap_const_logic_0;
            else
                if (((Loop_Loop1_proc_U0_ap_done and Loop_Loop1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_temp1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_temp1 <= ap_sync_channel_write_temp1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_temp2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_temp2 <= ap_const_logic_0;
            else
                if (((Loop_Loop1_proc_U0_ap_done and Loop_Loop1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_temp2 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_temp2 <= ap_sync_channel_write_temp2;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_temp3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_temp3 <= ap_const_logic_0;
            else
                if (((Loop_Loop2_proc_U0_ap_done and Loop_Loop2_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_temp3 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_temp3 <= ap_sync_channel_write_temp3;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_temp4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_temp4 <= ap_const_logic_0;
            else
                if (((Loop_Loop2_proc_U0_ap_done and Loop_Loop2_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_temp4 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_temp4 <= ap_sync_channel_write_temp4;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_tmp1_loc_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_tmp1_loc_channel <= ap_const_logic_0;
            else
                if (((Block_codeRepl8_proc_U0_ap_done and Block_codeRepl8_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_tmp1_loc_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_tmp1_loc_channel <= ap_sync_channel_write_tmp1_loc_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_tmp2_loc_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_tmp2_loc_channel <= ap_const_logic_0;
            else
                if (((Block_codeRepl8_proc_U0_ap_done and Block_codeRepl8_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_tmp2_loc_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_tmp2_loc_channel <= ap_sync_channel_write_tmp2_loc_channel;
                end if; 
            end if;
        end if;
    end process;


    Block_codeRepl8_proc_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = Block_codeRepl8_proc_U0_ap_ready) and (ap_sync_ready = ap_const_logic_1))) then 
                Block_codeRepl8_proc_U0_ap_ready_count <= std_logic_vector(unsigned(Block_codeRepl8_proc_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (ap_const_logic_1 = Block_codeRepl8_proc_U0_ap_ready))) then 
                Block_codeRepl8_proc_U0_ap_ready_count <= std_logic_vector(unsigned(Block_codeRepl8_proc_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    Loop_Loop1_proc_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = Loop_Loop1_proc_U0_ap_ready) and (ap_sync_ready = ap_const_logic_1))) then 
                Loop_Loop1_proc_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_Loop1_proc_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (ap_const_logic_1 = Loop_Loop1_proc_U0_ap_ready))) then 
                Loop_Loop1_proc_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_Loop1_proc_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    Block_codeRepl8_proc_U0_ap_continue <= (ap_sync_channel_write_tmp2_loc_channel and ap_sync_channel_write_tmp1_loc_channel);
    Block_codeRepl8_proc_U0_ap_start <= ((ap_sync_reg_Block_codeRepl8_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Block_codeRepl8_proc_U0_start_full_n <= ap_const_logic_1;
    Block_codeRepl8_proc_U0_start_write <= ap_const_logic_0;
    Loop_Loop1_proc_U0_ap_continue <= (ap_sync_channel_write_temp2 and ap_sync_channel_write_temp1);
    Loop_Loop1_proc_U0_ap_start <= (tmp2_loc_channel_empty_n and tmp1_loc_channel_empty_n and (ap_sync_reg_Loop_Loop1_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Loop_Loop1_proc_U0_start_full_n <= ap_const_logic_1;
    Loop_Loop1_proc_U0_start_write <= ap_const_logic_0;
    Loop_Loop1_proc_U0_temp1_full_n <= temp1_i_full_n;
    Loop_Loop1_proc_U0_temp2_full_n <= temp2_i_full_n;
    Loop_Loop2_proc_U0_ap_continue <= (ap_sync_channel_write_temp4 and ap_sync_channel_write_temp3);
    Loop_Loop2_proc_U0_ap_start <= (temp2_t_empty_n and temp1_t_empty_n);
    Loop_Loop2_proc_U0_start_full_n <= ap_const_logic_1;
    Loop_Loop2_proc_U0_start_write <= ap_const_logic_0;
    Loop_Loop2_proc_U0_temp3_full_n <= temp3_i_full_n;
    Loop_Loop2_proc_U0_temp4_full_n <= temp4_i_full_n;
    Loop_Loop3_proc_U0_ap_continue <= ap_const_logic_1;
    Loop_Loop3_proc_U0_ap_start <= (temp4_t_empty_n and temp3_t_empty_n);
    Loop_Loop3_proc_U0_start_full_n <= ap_const_logic_1;
    Loop_Loop3_proc_U0_start_write <= ap_const_logic_0;
    ap_channel_done_temp1 <= ((ap_sync_reg_channel_write_temp1 xor ap_const_logic_1) and Loop_Loop1_proc_U0_ap_done);
    ap_channel_done_temp2 <= ((ap_sync_reg_channel_write_temp2 xor ap_const_logic_1) and Loop_Loop1_proc_U0_ap_done);
    ap_channel_done_temp3 <= ((ap_sync_reg_channel_write_temp3 xor ap_const_logic_1) and Loop_Loop2_proc_U0_ap_done);
    ap_channel_done_temp4 <= ((ap_sync_reg_channel_write_temp4 xor ap_const_logic_1) and Loop_Loop2_proc_U0_ap_done);
    ap_channel_done_tmp1_loc_channel <= ((ap_sync_reg_channel_write_tmp1_loc_channel xor ap_const_logic_1) and Block_codeRepl8_proc_U0_ap_done);
    ap_channel_done_tmp2_loc_channel <= ((ap_sync_reg_channel_write_tmp2_loc_channel xor ap_const_logic_1) and Block_codeRepl8_proc_U0_ap_done);
    ap_done <= Loop_Loop3_proc_U0_ap_done;
    ap_idle <= ((tmp2_loc_channel_empty_n xor ap_const_logic_1) and (tmp1_loc_channel_empty_n xor ap_const_logic_1) and (temp4_t_empty_n xor ap_const_logic_1) and (temp3_t_empty_n xor ap_const_logic_1) and (temp2_t_empty_n xor ap_const_logic_1) and (temp1_t_empty_n xor ap_const_logic_1) and Loop_Loop3_proc_U0_ap_idle and Loop_Loop2_proc_U0_ap_idle and Loop_Loop1_proc_U0_ap_idle and Block_codeRepl8_proc_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_Block_codeRepl8_proc_U0_ap_ready <= (ap_sync_reg_Block_codeRepl8_proc_U0_ap_ready or Block_codeRepl8_proc_U0_ap_ready);
    ap_sync_Loop_Loop1_proc_U0_ap_ready <= (ap_sync_reg_Loop_Loop1_proc_U0_ap_ready or Loop_Loop1_proc_U0_ap_ready);
    ap_sync_channel_write_temp1 <= ((ap_channel_done_temp1 and Loop_Loop1_proc_U0_temp1_full_n) or ap_sync_reg_channel_write_temp1);
    ap_sync_channel_write_temp2 <= ((ap_channel_done_temp2 and Loop_Loop1_proc_U0_temp2_full_n) or ap_sync_reg_channel_write_temp2);
    ap_sync_channel_write_temp3 <= ((ap_channel_done_temp3 and Loop_Loop2_proc_U0_temp3_full_n) or ap_sync_reg_channel_write_temp3);
    ap_sync_channel_write_temp4 <= ((ap_channel_done_temp4 and Loop_Loop2_proc_U0_temp4_full_n) or ap_sync_reg_channel_write_temp4);
    ap_sync_channel_write_tmp1_loc_channel <= ((tmp1_loc_channel_full_n and ap_channel_done_tmp1_loc_channel) or ap_sync_reg_channel_write_tmp1_loc_channel);
    ap_sync_channel_write_tmp2_loc_channel <= ((tmp2_loc_channel_full_n and ap_channel_done_tmp2_loc_channel) or ap_sync_reg_channel_write_tmp2_loc_channel);
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= Loop_Loop3_proc_U0_ap_done;
    ap_sync_ready <= (ap_sync_Loop_Loop1_proc_U0_ap_ready and ap_sync_Block_codeRepl8_proc_U0_ap_ready);
    data_in_address0 <= Loop_Loop1_proc_U0_data_in_address0;
    data_in_address1 <= ap_const_lv14_0;
    data_in_ce0 <= Loop_Loop1_proc_U0_data_in_ce0;
    data_in_ce1 <= ap_const_logic_0;
    data_in_d0 <= ap_const_lv32_0;
    data_in_d1 <= ap_const_lv32_0;
    data_in_we0 <= ap_const_logic_0;
    data_in_we1 <= ap_const_logic_0;
    data_out_address0 <= Loop_Loop3_proc_U0_data_out_address0;
    data_out_address1 <= ap_const_lv14_0;
    data_out_ce0 <= Loop_Loop3_proc_U0_data_out_ce0;
    data_out_ce1 <= ap_const_logic_0;
    data_out_d0 <= Loop_Loop3_proc_U0_data_out_d0;
    data_out_d1 <= ap_const_lv32_0;
    data_out_we0 <= Loop_Loop3_proc_U0_data_out_we0;
    data_out_we1 <= ap_const_logic_0;
    scale_address0 <= Block_codeRepl8_proc_U0_scale_address0;
    scale_address1 <= Block_codeRepl8_proc_U0_scale_address1;
    scale_ce0 <= Block_codeRepl8_proc_U0_scale_ce0;
    scale_ce1 <= Block_codeRepl8_proc_U0_scale_ce1;
    scale_d0 <= ap_const_lv32_0;
    scale_d1 <= ap_const_lv32_0;
    scale_we0 <= ap_const_logic_0;
    scale_we1 <= ap_const_logic_0;
end behav;
