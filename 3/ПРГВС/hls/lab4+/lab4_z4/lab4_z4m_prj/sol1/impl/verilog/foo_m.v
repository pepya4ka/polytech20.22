// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="foo_m,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12t-csg325-1Q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=9.216000,HLS_SYN_LAT=49167,HLS_SYN_TPT=16389,HLS_SYN_MEM=128,HLS_SYN_DSP=9,HLS_SYN_FF=626,HLS_SYN_LUT=868,HLS_VERSION=2020_1}" *)

module foo_m (
        ap_clk,
        ap_rst,
        data_in_address0,
        data_in_ce0,
        data_in_d0,
        data_in_q0,
        data_in_we0,
        data_in_address1,
        data_in_ce1,
        data_in_d1,
        data_in_q1,
        data_in_we1,
        scale_address0,
        scale_ce0,
        scale_d0,
        scale_q0,
        scale_we0,
        scale_address1,
        scale_ce1,
        scale_d1,
        scale_q1,
        scale_we1,
        data_out_address0,
        data_out_ce0,
        data_out_d0,
        data_out_q0,
        data_out_we0,
        data_out_address1,
        data_out_ce1,
        data_out_d1,
        data_out_q1,
        data_out_we1,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle
);


input   ap_clk;
input   ap_rst;
output  [13:0] data_in_address0;
output   data_in_ce0;
output  [31:0] data_in_d0;
input  [31:0] data_in_q0;
output   data_in_we0;
output  [13:0] data_in_address1;
output   data_in_ce1;
output  [31:0] data_in_d1;
input  [31:0] data_in_q1;
output   data_in_we1;
output  [1:0] scale_address0;
output   scale_ce0;
output  [31:0] scale_d0;
input  [31:0] scale_q0;
output   scale_we0;
output  [1:0] scale_address1;
output   scale_ce1;
output  [31:0] scale_d1;
input  [31:0] scale_q1;
output   scale_we1;
output  [13:0] data_out_address0;
output   data_out_ce0;
output  [31:0] data_out_d0;
input  [31:0] data_out_q0;
output   data_out_we0;
output  [13:0] data_out_address1;
output   data_out_ce1;
output  [31:0] data_out_d1;
input  [31:0] data_out_q1;
output   data_out_we1;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;

wire   [31:0] temp1_i_q0;
wire   [31:0] temp1_t_q0;
wire   [31:0] temp2_i_q0;
wire   [31:0] temp2_t_q0;
wire   [31:0] temp3_i_q0;
wire   [31:0] temp3_t_q0;
wire   [31:0] temp4_i_q0;
wire   [31:0] temp4_t_q0;
wire    Block_codeRepl8_proc_U0_ap_start;
wire    Block_codeRepl8_proc_U0_ap_done;
wire    Block_codeRepl8_proc_U0_ap_continue;
wire    Block_codeRepl8_proc_U0_ap_idle;
wire    Block_codeRepl8_proc_U0_ap_ready;
wire   [1:0] Block_codeRepl8_proc_U0_scale_address0;
wire    Block_codeRepl8_proc_U0_scale_ce0;
wire   [1:0] Block_codeRepl8_proc_U0_scale_address1;
wire    Block_codeRepl8_proc_U0_scale_ce1;
wire   [31:0] Block_codeRepl8_proc_U0_tmp3_out_out_din;
wire    Block_codeRepl8_proc_U0_tmp3_out_out_write;
wire   [31:0] Block_codeRepl8_proc_U0_ap_return_0;
wire   [31:0] Block_codeRepl8_proc_U0_ap_return_1;
wire    ap_channel_done_tmp2_loc_channel;
wire    tmp2_loc_channel_full_n;
reg    ap_sync_reg_channel_write_tmp2_loc_channel;
wire    ap_sync_channel_write_tmp2_loc_channel;
wire    ap_channel_done_tmp1_loc_channel;
wire    tmp1_loc_channel_full_n;
reg    ap_sync_reg_channel_write_tmp1_loc_channel;
wire    ap_sync_channel_write_tmp1_loc_channel;
wire    Loop_Loop1_proc_U0_ap_start;
wire    Loop_Loop1_proc_U0_ap_done;
wire    Loop_Loop1_proc_U0_ap_continue;
wire    Loop_Loop1_proc_U0_ap_idle;
wire    Loop_Loop1_proc_U0_ap_ready;
wire   [13:0] Loop_Loop1_proc_U0_data_in_address0;
wire    Loop_Loop1_proc_U0_data_in_ce0;
wire   [13:0] Loop_Loop1_proc_U0_temp1_address0;
wire    Loop_Loop1_proc_U0_temp1_ce0;
wire    Loop_Loop1_proc_U0_temp1_we0;
wire   [31:0] Loop_Loop1_proc_U0_temp1_d0;
wire   [13:0] Loop_Loop1_proc_U0_temp2_address0;
wire    Loop_Loop1_proc_U0_temp2_ce0;
wire    Loop_Loop1_proc_U0_temp2_we0;
wire   [31:0] Loop_Loop1_proc_U0_temp2_d0;
wire    ap_channel_done_temp2;
wire    Loop_Loop1_proc_U0_temp2_full_n;
reg    ap_sync_reg_channel_write_temp2;
wire    ap_sync_channel_write_temp2;
wire    ap_channel_done_temp1;
wire    Loop_Loop1_proc_U0_temp1_full_n;
reg    ap_sync_reg_channel_write_temp1;
wire    ap_sync_channel_write_temp1;
wire    Loop_Loop2_proc_U0_ap_start;
wire    Loop_Loop2_proc_U0_ap_done;
wire    Loop_Loop2_proc_U0_ap_continue;
wire    Loop_Loop2_proc_U0_ap_idle;
wire    Loop_Loop2_proc_U0_ap_ready;
wire   [13:0] Loop_Loop2_proc_U0_temp1_address0;
wire    Loop_Loop2_proc_U0_temp1_ce0;
wire    Loop_Loop2_proc_U0_tmp3_loc_read;
wire   [13:0] Loop_Loop2_proc_U0_temp3_address0;
wire    Loop_Loop2_proc_U0_temp3_ce0;
wire    Loop_Loop2_proc_U0_temp3_we0;
wire   [31:0] Loop_Loop2_proc_U0_temp3_d0;
wire   [13:0] Loop_Loop2_proc_U0_temp2_address0;
wire    Loop_Loop2_proc_U0_temp2_ce0;
wire   [13:0] Loop_Loop2_proc_U0_temp4_address0;
wire    Loop_Loop2_proc_U0_temp4_ce0;
wire    Loop_Loop2_proc_U0_temp4_we0;
wire   [31:0] Loop_Loop2_proc_U0_temp4_d0;
wire    ap_channel_done_temp4;
wire    Loop_Loop2_proc_U0_temp4_full_n;
reg    ap_sync_reg_channel_write_temp4;
wire    ap_sync_channel_write_temp4;
wire    ap_channel_done_temp3;
wire    Loop_Loop2_proc_U0_temp3_full_n;
reg    ap_sync_reg_channel_write_temp3;
wire    ap_sync_channel_write_temp3;
wire    Loop_Loop3_proc_U0_ap_start;
wire    Loop_Loop3_proc_U0_ap_done;
wire    Loop_Loop3_proc_U0_ap_continue;
wire    Loop_Loop3_proc_U0_ap_idle;
wire    Loop_Loop3_proc_U0_ap_ready;
wire   [13:0] Loop_Loop3_proc_U0_temp4_address0;
wire    Loop_Loop3_proc_U0_temp4_ce0;
wire   [13:0] Loop_Loop3_proc_U0_temp3_address0;
wire    Loop_Loop3_proc_U0_temp3_ce0;
wire   [13:0] Loop_Loop3_proc_U0_data_out_address0;
wire    Loop_Loop3_proc_U0_data_out_ce0;
wire    Loop_Loop3_proc_U0_data_out_we0;
wire   [31:0] Loop_Loop3_proc_U0_data_out_d0;
wire    ap_sync_continue;
wire    temp1_i_full_n;
wire    temp1_t_empty_n;
wire    temp2_i_full_n;
wire    temp2_t_empty_n;
wire    temp3_i_full_n;
wire    temp3_t_empty_n;
wire    temp4_i_full_n;
wire    temp4_t_empty_n;
wire    tmp3_loc_c_full_n;
wire   [31:0] tmp3_loc_c_dout;
wire    tmp3_loc_c_empty_n;
wire   [31:0] tmp1_loc_channel_dout;
wire    tmp1_loc_channel_empty_n;
wire   [31:0] tmp2_loc_channel_dout;
wire    tmp2_loc_channel_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
reg    ap_sync_reg_Block_codeRepl8_proc_U0_ap_ready;
wire    ap_sync_Block_codeRepl8_proc_U0_ap_ready;
reg   [1:0] Block_codeRepl8_proc_U0_ap_ready_count;
reg    ap_sync_reg_Loop_Loop1_proc_U0_ap_ready;
wire    ap_sync_Loop_Loop1_proc_U0_ap_ready;
reg   [1:0] Loop_Loop1_proc_U0_ap_ready_count;
wire    Block_codeRepl8_proc_U0_start_full_n;
wire    Block_codeRepl8_proc_U0_start_write;
wire    Loop_Loop1_proc_U0_start_full_n;
wire    Loop_Loop1_proc_U0_start_write;
wire    Loop_Loop2_proc_U0_start_full_n;
wire    Loop_Loop2_proc_U0_start_write;
wire    Loop_Loop3_proc_U0_start_full_n;
wire    Loop_Loop3_proc_U0_start_write;

// power-on initialization
initial begin
#0 ap_sync_reg_channel_write_tmp2_loc_channel = 1'b0;
#0 ap_sync_reg_channel_write_tmp1_loc_channel = 1'b0;
#0 ap_sync_reg_channel_write_temp2 = 1'b0;
#0 ap_sync_reg_channel_write_temp1 = 1'b0;
#0 ap_sync_reg_channel_write_temp4 = 1'b0;
#0 ap_sync_reg_channel_write_temp3 = 1'b0;
#0 ap_sync_reg_Block_codeRepl8_proc_U0_ap_ready = 1'b0;
#0 Block_codeRepl8_proc_U0_ap_ready_count = 2'd0;
#0 ap_sync_reg_Loop_Loop1_proc_U0_ap_ready = 1'b0;
#0 Loop_Loop1_proc_U0_ap_ready_count = 2'd0;
end

foo_m_temp1 #(
    .DataWidth( 32 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
temp1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(Loop_Loop1_proc_U0_temp1_address0),
    .i_ce0(Loop_Loop1_proc_U0_temp1_ce0),
    .i_we0(Loop_Loop1_proc_U0_temp1_we0),
    .i_d0(Loop_Loop1_proc_U0_temp1_d0),
    .i_q0(temp1_i_q0),
    .t_address0(Loop_Loop2_proc_U0_temp1_address0),
    .t_ce0(Loop_Loop2_proc_U0_temp1_ce0),
    .t_we0(1'b0),
    .t_d0(32'd0),
    .t_q0(temp1_t_q0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(temp1_i_full_n),
    .i_write(ap_channel_done_temp1),
    .t_empty_n(temp1_t_empty_n),
    .t_read(Loop_Loop2_proc_U0_ap_ready)
);

foo_m_temp1 #(
    .DataWidth( 32 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
temp2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(Loop_Loop1_proc_U0_temp2_address0),
    .i_ce0(Loop_Loop1_proc_U0_temp2_ce0),
    .i_we0(Loop_Loop1_proc_U0_temp2_we0),
    .i_d0(Loop_Loop1_proc_U0_temp2_d0),
    .i_q0(temp2_i_q0),
    .t_address0(Loop_Loop2_proc_U0_temp2_address0),
    .t_ce0(Loop_Loop2_proc_U0_temp2_ce0),
    .t_we0(1'b0),
    .t_d0(32'd0),
    .t_q0(temp2_t_q0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(temp2_i_full_n),
    .i_write(ap_channel_done_temp2),
    .t_empty_n(temp2_t_empty_n),
    .t_read(Loop_Loop2_proc_U0_ap_ready)
);

foo_m_temp1 #(
    .DataWidth( 32 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
temp3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(Loop_Loop2_proc_U0_temp3_address0),
    .i_ce0(Loop_Loop2_proc_U0_temp3_ce0),
    .i_we0(Loop_Loop2_proc_U0_temp3_we0),
    .i_d0(Loop_Loop2_proc_U0_temp3_d0),
    .i_q0(temp3_i_q0),
    .t_address0(Loop_Loop3_proc_U0_temp3_address0),
    .t_ce0(Loop_Loop3_proc_U0_temp3_ce0),
    .t_we0(1'b0),
    .t_d0(32'd0),
    .t_q0(temp3_t_q0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(temp3_i_full_n),
    .i_write(ap_channel_done_temp3),
    .t_empty_n(temp3_t_empty_n),
    .t_read(Loop_Loop3_proc_U0_ap_ready)
);

foo_m_temp1 #(
    .DataWidth( 32 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
temp4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(Loop_Loop2_proc_U0_temp4_address0),
    .i_ce0(Loop_Loop2_proc_U0_temp4_ce0),
    .i_we0(Loop_Loop2_proc_U0_temp4_we0),
    .i_d0(Loop_Loop2_proc_U0_temp4_d0),
    .i_q0(temp4_i_q0),
    .t_address0(Loop_Loop3_proc_U0_temp4_address0),
    .t_ce0(Loop_Loop3_proc_U0_temp4_ce0),
    .t_we0(1'b0),
    .t_d0(32'd0),
    .t_q0(temp4_t_q0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(temp4_i_full_n),
    .i_write(ap_channel_done_temp4),
    .t_empty_n(temp4_t_empty_n),
    .t_read(Loop_Loop3_proc_U0_ap_ready)
);

Block_codeRepl8_proc Block_codeRepl8_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Block_codeRepl8_proc_U0_ap_start),
    .ap_done(Block_codeRepl8_proc_U0_ap_done),
    .ap_continue(Block_codeRepl8_proc_U0_ap_continue),
    .ap_idle(Block_codeRepl8_proc_U0_ap_idle),
    .ap_ready(Block_codeRepl8_proc_U0_ap_ready),
    .scale_address0(Block_codeRepl8_proc_U0_scale_address0),
    .scale_ce0(Block_codeRepl8_proc_U0_scale_ce0),
    .scale_q0(scale_q0),
    .scale_address1(Block_codeRepl8_proc_U0_scale_address1),
    .scale_ce1(Block_codeRepl8_proc_U0_scale_ce1),
    .scale_q1(scale_q1),
    .tmp3_out_out_din(Block_codeRepl8_proc_U0_tmp3_out_out_din),
    .tmp3_out_out_full_n(tmp3_loc_c_full_n),
    .tmp3_out_out_write(Block_codeRepl8_proc_U0_tmp3_out_out_write),
    .ap_return_0(Block_codeRepl8_proc_U0_ap_return_0),
    .ap_return_1(Block_codeRepl8_proc_U0_ap_return_1)
);

Loop_Loop1_proc Loop_Loop1_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Loop_Loop1_proc_U0_ap_start),
    .ap_done(Loop_Loop1_proc_U0_ap_done),
    .ap_continue(Loop_Loop1_proc_U0_ap_continue),
    .ap_idle(Loop_Loop1_proc_U0_ap_idle),
    .ap_ready(Loop_Loop1_proc_U0_ap_ready),
    .data_in_address0(Loop_Loop1_proc_U0_data_in_address0),
    .data_in_ce0(Loop_Loop1_proc_U0_data_in_ce0),
    .data_in_q0(data_in_q0),
    .p_read(tmp1_loc_channel_dout),
    .temp1_address0(Loop_Loop1_proc_U0_temp1_address0),
    .temp1_ce0(Loop_Loop1_proc_U0_temp1_ce0),
    .temp1_we0(Loop_Loop1_proc_U0_temp1_we0),
    .temp1_d0(Loop_Loop1_proc_U0_temp1_d0),
    .p_read1(tmp2_loc_channel_dout),
    .temp2_address0(Loop_Loop1_proc_U0_temp2_address0),
    .temp2_ce0(Loop_Loop1_proc_U0_temp2_ce0),
    .temp2_we0(Loop_Loop1_proc_U0_temp2_we0),
    .temp2_d0(Loop_Loop1_proc_U0_temp2_d0)
);

Loop_Loop2_proc Loop_Loop2_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Loop_Loop2_proc_U0_ap_start),
    .ap_done(Loop_Loop2_proc_U0_ap_done),
    .ap_continue(Loop_Loop2_proc_U0_ap_continue),
    .ap_idle(Loop_Loop2_proc_U0_ap_idle),
    .ap_ready(Loop_Loop2_proc_U0_ap_ready),
    .temp1_address0(Loop_Loop2_proc_U0_temp1_address0),
    .temp1_ce0(Loop_Loop2_proc_U0_temp1_ce0),
    .temp1_q0(temp1_t_q0),
    .tmp3_loc_dout(tmp3_loc_c_dout),
    .tmp3_loc_empty_n(tmp3_loc_c_empty_n),
    .tmp3_loc_read(Loop_Loop2_proc_U0_tmp3_loc_read),
    .temp3_address0(Loop_Loop2_proc_U0_temp3_address0),
    .temp3_ce0(Loop_Loop2_proc_U0_temp3_ce0),
    .temp3_we0(Loop_Loop2_proc_U0_temp3_we0),
    .temp3_d0(Loop_Loop2_proc_U0_temp3_d0),
    .temp2_address0(Loop_Loop2_proc_U0_temp2_address0),
    .temp2_ce0(Loop_Loop2_proc_U0_temp2_ce0),
    .temp2_q0(temp2_t_q0),
    .temp4_address0(Loop_Loop2_proc_U0_temp4_address0),
    .temp4_ce0(Loop_Loop2_proc_U0_temp4_ce0),
    .temp4_we0(Loop_Loop2_proc_U0_temp4_we0),
    .temp4_d0(Loop_Loop2_proc_U0_temp4_d0)
);

Loop_Loop3_proc Loop_Loop3_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Loop_Loop3_proc_U0_ap_start),
    .ap_done(Loop_Loop3_proc_U0_ap_done),
    .ap_continue(Loop_Loop3_proc_U0_ap_continue),
    .ap_idle(Loop_Loop3_proc_U0_ap_idle),
    .ap_ready(Loop_Loop3_proc_U0_ap_ready),
    .temp4_address0(Loop_Loop3_proc_U0_temp4_address0),
    .temp4_ce0(Loop_Loop3_proc_U0_temp4_ce0),
    .temp4_q0(temp4_t_q0),
    .temp3_address0(Loop_Loop3_proc_U0_temp3_address0),
    .temp3_ce0(Loop_Loop3_proc_U0_temp3_ce0),
    .temp3_q0(temp3_t_q0),
    .data_out_address0(Loop_Loop3_proc_U0_data_out_address0),
    .data_out_ce0(Loop_Loop3_proc_U0_data_out_ce0),
    .data_out_we0(Loop_Loop3_proc_U0_data_out_we0),
    .data_out_d0(Loop_Loop3_proc_U0_data_out_d0)
);

fifo_w32_d3_A tmp3_loc_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_codeRepl8_proc_U0_tmp3_out_out_din),
    .if_full_n(tmp3_loc_c_full_n),
    .if_write(Block_codeRepl8_proc_U0_tmp3_out_out_write),
    .if_dout(tmp3_loc_c_dout),
    .if_empty_n(tmp3_loc_c_empty_n),
    .if_read(Loop_Loop2_proc_U0_tmp3_loc_read)
);

fifo_w32_d2_A tmp1_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_codeRepl8_proc_U0_ap_return_0),
    .if_full_n(tmp1_loc_channel_full_n),
    .if_write(ap_channel_done_tmp1_loc_channel),
    .if_dout(tmp1_loc_channel_dout),
    .if_empty_n(tmp1_loc_channel_empty_n),
    .if_read(Loop_Loop1_proc_U0_ap_ready)
);

fifo_w32_d2_A tmp2_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_codeRepl8_proc_U0_ap_return_1),
    .if_full_n(tmp2_loc_channel_full_n),
    .if_write(ap_channel_done_tmp2_loc_channel),
    .if_dout(tmp2_loc_channel_dout),
    .if_empty_n(tmp2_loc_channel_empty_n),
    .if_read(Loop_Loop1_proc_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_Block_codeRepl8_proc_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_Block_codeRepl8_proc_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_Block_codeRepl8_proc_U0_ap_ready <= ap_sync_Block_codeRepl8_proc_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_Loop_Loop1_proc_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_Loop_Loop1_proc_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_Loop_Loop1_proc_U0_ap_ready <= ap_sync_Loop_Loop1_proc_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_temp1 <= 1'b0;
    end else begin
        if (((Loop_Loop1_proc_U0_ap_done & Loop_Loop1_proc_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_temp1 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_temp1 <= ap_sync_channel_write_temp1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_temp2 <= 1'b0;
    end else begin
        if (((Loop_Loop1_proc_U0_ap_done & Loop_Loop1_proc_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_temp2 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_temp2 <= ap_sync_channel_write_temp2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_temp3 <= 1'b0;
    end else begin
        if (((Loop_Loop2_proc_U0_ap_done & Loop_Loop2_proc_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_temp3 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_temp3 <= ap_sync_channel_write_temp3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_temp4 <= 1'b0;
    end else begin
        if (((Loop_Loop2_proc_U0_ap_done & Loop_Loop2_proc_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_temp4 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_temp4 <= ap_sync_channel_write_temp4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_tmp1_loc_channel <= 1'b0;
    end else begin
        if (((Block_codeRepl8_proc_U0_ap_done & Block_codeRepl8_proc_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_tmp1_loc_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_tmp1_loc_channel <= ap_sync_channel_write_tmp1_loc_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_tmp2_loc_channel <= 1'b0;
    end else begin
        if (((Block_codeRepl8_proc_U0_ap_done & Block_codeRepl8_proc_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_tmp2_loc_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_tmp2_loc_channel <= ap_sync_channel_write_tmp2_loc_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == Block_codeRepl8_proc_U0_ap_ready) & (ap_sync_ready == 1'b1))) begin
        Block_codeRepl8_proc_U0_ap_ready_count <= (Block_codeRepl8_proc_U0_ap_ready_count - 2'd1);
    end else if (((ap_sync_ready == 1'b0) & (1'b1 == Block_codeRepl8_proc_U0_ap_ready))) begin
        Block_codeRepl8_proc_U0_ap_ready_count <= (Block_codeRepl8_proc_U0_ap_ready_count + 2'd1);
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == Loop_Loop1_proc_U0_ap_ready) & (ap_sync_ready == 1'b1))) begin
        Loop_Loop1_proc_U0_ap_ready_count <= (Loop_Loop1_proc_U0_ap_ready_count - 2'd1);
    end else if (((ap_sync_ready == 1'b0) & (1'b1 == Loop_Loop1_proc_U0_ap_ready))) begin
        Loop_Loop1_proc_U0_ap_ready_count <= (Loop_Loop1_proc_U0_ap_ready_count + 2'd1);
    end
end

assign Block_codeRepl8_proc_U0_ap_continue = (ap_sync_channel_write_tmp2_loc_channel & ap_sync_channel_write_tmp1_loc_channel);

assign Block_codeRepl8_proc_U0_ap_start = ((ap_sync_reg_Block_codeRepl8_proc_U0_ap_ready ^ 1'b1) & ap_start);

assign Block_codeRepl8_proc_U0_start_full_n = 1'b1;

assign Block_codeRepl8_proc_U0_start_write = 1'b0;

assign Loop_Loop1_proc_U0_ap_continue = (ap_sync_channel_write_temp2 & ap_sync_channel_write_temp1);

assign Loop_Loop1_proc_U0_ap_start = (tmp2_loc_channel_empty_n & tmp1_loc_channel_empty_n & (ap_sync_reg_Loop_Loop1_proc_U0_ap_ready ^ 1'b1) & ap_start);

assign Loop_Loop1_proc_U0_start_full_n = 1'b1;

assign Loop_Loop1_proc_U0_start_write = 1'b0;

assign Loop_Loop1_proc_U0_temp1_full_n = temp1_i_full_n;

assign Loop_Loop1_proc_U0_temp2_full_n = temp2_i_full_n;

assign Loop_Loop2_proc_U0_ap_continue = (ap_sync_channel_write_temp4 & ap_sync_channel_write_temp3);

assign Loop_Loop2_proc_U0_ap_start = (temp2_t_empty_n & temp1_t_empty_n);

assign Loop_Loop2_proc_U0_start_full_n = 1'b1;

assign Loop_Loop2_proc_U0_start_write = 1'b0;

assign Loop_Loop2_proc_U0_temp3_full_n = temp3_i_full_n;

assign Loop_Loop2_proc_U0_temp4_full_n = temp4_i_full_n;

assign Loop_Loop3_proc_U0_ap_continue = 1'b1;

assign Loop_Loop3_proc_U0_ap_start = (temp4_t_empty_n & temp3_t_empty_n);

assign Loop_Loop3_proc_U0_start_full_n = 1'b1;

assign Loop_Loop3_proc_U0_start_write = 1'b0;

assign ap_channel_done_temp1 = ((ap_sync_reg_channel_write_temp1 ^ 1'b1) & Loop_Loop1_proc_U0_ap_done);

assign ap_channel_done_temp2 = ((ap_sync_reg_channel_write_temp2 ^ 1'b1) & Loop_Loop1_proc_U0_ap_done);

assign ap_channel_done_temp3 = ((ap_sync_reg_channel_write_temp3 ^ 1'b1) & Loop_Loop2_proc_U0_ap_done);

assign ap_channel_done_temp4 = ((ap_sync_reg_channel_write_temp4 ^ 1'b1) & Loop_Loop2_proc_U0_ap_done);

assign ap_channel_done_tmp1_loc_channel = ((ap_sync_reg_channel_write_tmp1_loc_channel ^ 1'b1) & Block_codeRepl8_proc_U0_ap_done);

assign ap_channel_done_tmp2_loc_channel = ((ap_sync_reg_channel_write_tmp2_loc_channel ^ 1'b1) & Block_codeRepl8_proc_U0_ap_done);

assign ap_done = Loop_Loop3_proc_U0_ap_done;

assign ap_idle = ((tmp2_loc_channel_empty_n ^ 1'b1) & (tmp1_loc_channel_empty_n ^ 1'b1) & (temp4_t_empty_n ^ 1'b1) & (temp3_t_empty_n ^ 1'b1) & (temp2_t_empty_n ^ 1'b1) & (temp1_t_empty_n ^ 1'b1) & Loop_Loop3_proc_U0_ap_idle & Loop_Loop2_proc_U0_ap_idle & Loop_Loop1_proc_U0_ap_idle & Block_codeRepl8_proc_U0_ap_idle);

assign ap_ready = ap_sync_ready;

assign ap_sync_Block_codeRepl8_proc_U0_ap_ready = (ap_sync_reg_Block_codeRepl8_proc_U0_ap_ready | Block_codeRepl8_proc_U0_ap_ready);

assign ap_sync_Loop_Loop1_proc_U0_ap_ready = (ap_sync_reg_Loop_Loop1_proc_U0_ap_ready | Loop_Loop1_proc_U0_ap_ready);

assign ap_sync_channel_write_temp1 = ((ap_channel_done_temp1 & Loop_Loop1_proc_U0_temp1_full_n) | ap_sync_reg_channel_write_temp1);

assign ap_sync_channel_write_temp2 = ((ap_channel_done_temp2 & Loop_Loop1_proc_U0_temp2_full_n) | ap_sync_reg_channel_write_temp2);

assign ap_sync_channel_write_temp3 = ((ap_channel_done_temp3 & Loop_Loop2_proc_U0_temp3_full_n) | ap_sync_reg_channel_write_temp3);

assign ap_sync_channel_write_temp4 = ((ap_channel_done_temp4 & Loop_Loop2_proc_U0_temp4_full_n) | ap_sync_reg_channel_write_temp4);

assign ap_sync_channel_write_tmp1_loc_channel = ((tmp1_loc_channel_full_n & ap_channel_done_tmp1_loc_channel) | ap_sync_reg_channel_write_tmp1_loc_channel);

assign ap_sync_channel_write_tmp2_loc_channel = ((tmp2_loc_channel_full_n & ap_channel_done_tmp2_loc_channel) | ap_sync_reg_channel_write_tmp2_loc_channel);

assign ap_sync_continue = 1'b1;

assign ap_sync_done = Loop_Loop3_proc_U0_ap_done;

assign ap_sync_ready = (ap_sync_Loop_Loop1_proc_U0_ap_ready & ap_sync_Block_codeRepl8_proc_U0_ap_ready);

assign data_in_address0 = Loop_Loop1_proc_U0_data_in_address0;

assign data_in_address1 = 14'd0;

assign data_in_ce0 = Loop_Loop1_proc_U0_data_in_ce0;

assign data_in_ce1 = 1'b0;

assign data_in_d0 = 32'd0;

assign data_in_d1 = 32'd0;

assign data_in_we0 = 1'b0;

assign data_in_we1 = 1'b0;

assign data_out_address0 = Loop_Loop3_proc_U0_data_out_address0;

assign data_out_address1 = 14'd0;

assign data_out_ce0 = Loop_Loop3_proc_U0_data_out_ce0;

assign data_out_ce1 = 1'b0;

assign data_out_d0 = Loop_Loop3_proc_U0_data_out_d0;

assign data_out_d1 = 32'd0;

assign data_out_we0 = Loop_Loop3_proc_U0_data_out_we0;

assign data_out_we1 = 1'b0;

assign scale_address0 = Block_codeRepl8_proc_U0_scale_address0;

assign scale_address1 = Block_codeRepl8_proc_U0_scale_address1;

assign scale_ce0 = Block_codeRepl8_proc_U0_scale_ce0;

assign scale_ce1 = Block_codeRepl8_proc_U0_scale_ce1;

assign scale_d0 = 32'd0;

assign scale_d1 = 32'd0;

assign scale_we0 = 1'b0;

assign scale_we1 = 1'b0;

endmodule //foo_m
