// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="foo_m,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12t-csg325-1Q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=9.867000,HLS_SYN_LAT=16395,HLS_SYN_TPT=16389,HLS_SYN_MEM=0,HLS_SYN_DSP=9,HLS_SYN_FF=612,HLS_SYN_LUT=1035,HLS_VERSION=2020_1}" *)

module foo_m (
        data_in_address0,
        data_in_ce0,
        data_in_d0,
        data_in_q0,
        data_in_we0,
        data_in_address1,
        data_in_ce1,
        data_in_d1,
        data_in_q1,
        data_in_we1,
        scale_address0,
        scale_ce0,
        scale_d0,
        scale_q0,
        scale_we0,
        scale_address1,
        scale_ce1,
        scale_d1,
        scale_q1,
        scale_we1,
        data_out_address0,
        data_out_ce0,
        data_out_d0,
        data_out_q0,
        data_out_we0,
        data_out_address1,
        data_out_ce1,
        data_out_d1,
        data_out_q1,
        data_out_we1,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle
);


output  [13:0] data_in_address0;
output   data_in_ce0;
output  [31:0] data_in_d0;
input  [31:0] data_in_q0;
output   data_in_we0;
output  [13:0] data_in_address1;
output   data_in_ce1;
output  [31:0] data_in_d1;
input  [31:0] data_in_q1;
output   data_in_we1;
output  [1:0] scale_address0;
output   scale_ce0;
output  [31:0] scale_d0;
input  [31:0] scale_q0;
output   scale_we0;
output  [1:0] scale_address1;
output   scale_ce1;
output  [31:0] scale_d1;
input  [31:0] scale_q1;
output   scale_we1;
output  [13:0] data_out_address0;
output   data_out_ce0;
output  [31:0] data_out_d0;
input  [31:0] data_out_q0;
output   data_out_we0;
output  [13:0] data_out_address1;
output   data_out_ce1;
output  [31:0] data_out_d1;
input  [31:0] data_out_q1;
output   data_out_we1;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;

wire    Block_codeRepl8_proc_U0_ap_start;
wire    Block_codeRepl8_proc_U0_ap_done;
wire    Block_codeRepl8_proc_U0_ap_continue;
wire    Block_codeRepl8_proc_U0_ap_idle;
wire    Block_codeRepl8_proc_U0_ap_ready;
wire    Block_codeRepl8_proc_U0_start_out;
wire    Block_codeRepl8_proc_U0_start_write;
wire   [1:0] Block_codeRepl8_proc_U0_scale_address0;
wire    Block_codeRepl8_proc_U0_scale_ce0;
wire   [1:0] Block_codeRepl8_proc_U0_scale_address1;
wire    Block_codeRepl8_proc_U0_scale_ce1;
wire   [31:0] Block_codeRepl8_proc_U0_tmp1_out_din;
wire    Block_codeRepl8_proc_U0_tmp1_out_write;
wire   [31:0] Block_codeRepl8_proc_U0_tmp2_out_din;
wire    Block_codeRepl8_proc_U0_tmp2_out_write;
wire   [31:0] Block_codeRepl8_proc_U0_tmp3_out_out_din;
wire    Block_codeRepl8_proc_U0_tmp3_out_out_write;
wire    Loop_Loop1_proc_U0_ap_start;
wire    Loop_Loop1_proc_U0_ap_done;
wire    Loop_Loop1_proc_U0_ap_continue;
wire    Loop_Loop1_proc_U0_ap_idle;
wire    Loop_Loop1_proc_U0_ap_ready;
wire   [13:0] Loop_Loop1_proc_U0_data_in_address0;
wire    Loop_Loop1_proc_U0_data_in_ce0;
wire    Loop_Loop1_proc_U0_tmp1_loc_read;
wire   [31:0] Loop_Loop1_proc_U0_temp1_din;
wire    Loop_Loop1_proc_U0_temp1_write;
wire    Loop_Loop1_proc_U0_tmp2_loc_read;
wire   [31:0] Loop_Loop1_proc_U0_temp2_din;
wire    Loop_Loop1_proc_U0_temp2_write;
wire    Loop_Loop2_proc_U0_ap_start;
wire    Loop_Loop2_proc_U0_ap_done;
wire    Loop_Loop2_proc_U0_ap_continue;
wire    Loop_Loop2_proc_U0_ap_idle;
wire    Loop_Loop2_proc_U0_ap_ready;
wire    Loop_Loop2_proc_U0_start_out;
wire    Loop_Loop2_proc_U0_start_write;
wire    Loop_Loop2_proc_U0_temp1_read;
wire    Loop_Loop2_proc_U0_tmp3_loc_read;
wire   [31:0] Loop_Loop2_proc_U0_temp3_din;
wire    Loop_Loop2_proc_U0_temp3_write;
wire    Loop_Loop2_proc_U0_temp2_read;
wire   [31:0] Loop_Loop2_proc_U0_temp4_din;
wire    Loop_Loop2_proc_U0_temp4_write;
wire    Loop_Loop3_proc_U0_ap_start;
wire    Loop_Loop3_proc_U0_ap_done;
wire    Loop_Loop3_proc_U0_ap_continue;
wire    Loop_Loop3_proc_U0_ap_idle;
wire    Loop_Loop3_proc_U0_ap_ready;
wire    Loop_Loop3_proc_U0_temp4_read;
wire    Loop_Loop3_proc_U0_temp3_read;
wire   [13:0] Loop_Loop3_proc_U0_data_out_address0;
wire    Loop_Loop3_proc_U0_data_out_ce0;
wire    Loop_Loop3_proc_U0_data_out_we0;
wire   [31:0] Loop_Loop3_proc_U0_data_out_d0;
wire    ap_sync_continue;
wire    tmp1_loc_channel_full_n;
wire   [31:0] tmp1_loc_channel_dout;
wire    tmp1_loc_channel_empty_n;
wire    tmp2_loc_channel_full_n;
wire   [31:0] tmp2_loc_channel_dout;
wire    tmp2_loc_channel_empty_n;
wire    tmp3_loc_c_full_n;
wire   [31:0] tmp3_loc_c_dout;
wire    tmp3_loc_c_empty_n;
wire    temp1_full_n;
wire   [31:0] temp1_dout;
wire    temp1_empty_n;
wire    temp2_full_n;
wire   [31:0] temp2_dout;
wire    temp2_empty_n;
wire    temp3_full_n;
wire   [31:0] temp3_dout;
wire    temp3_empty_n;
wire    temp4_full_n;
wire   [31:0] temp4_dout;
wire    temp4_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
reg    ap_sync_reg_Block_codeRepl8_proc_U0_ap_ready;
wire    ap_sync_Block_codeRepl8_proc_U0_ap_ready;
reg   [1:0] Block_codeRepl8_proc_U0_ap_ready_count;
reg    ap_sync_reg_Loop_Loop1_proc_U0_ap_ready;
wire    ap_sync_Loop_Loop1_proc_U0_ap_ready;
reg   [1:0] Loop_Loop1_proc_U0_ap_ready_count;
wire   [0:0] start_for_Loop_Loop2_proc_U0_din;
wire    start_for_Loop_Loop2_proc_U0_full_n;
wire   [0:0] start_for_Loop_Loop2_proc_U0_dout;
wire    start_for_Loop_Loop2_proc_U0_empty_n;
wire    Loop_Loop1_proc_U0_start_full_n;
wire    Loop_Loop1_proc_U0_start_write;
wire   [0:0] start_for_Loop_Loop3_proc_U0_din;
wire    start_for_Loop_Loop3_proc_U0_full_n;
wire   [0:0] start_for_Loop_Loop3_proc_U0_dout;
wire    start_for_Loop_Loop3_proc_U0_empty_n;
wire    Loop_Loop3_proc_U0_start_full_n;
wire    Loop_Loop3_proc_U0_start_write;

// power-on initialization
initial begin
#0 ap_sync_reg_Block_codeRepl8_proc_U0_ap_ready = 1'b0;
#0 Block_codeRepl8_proc_U0_ap_ready_count = 2'd0;
#0 ap_sync_reg_Loop_Loop1_proc_U0_ap_ready = 1'b0;
#0 Loop_Loop1_proc_U0_ap_ready_count = 2'd0;
end

Block_codeRepl8_proc Block_codeRepl8_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Block_codeRepl8_proc_U0_ap_start),
    .start_full_n(start_for_Loop_Loop2_proc_U0_full_n),
    .ap_done(Block_codeRepl8_proc_U0_ap_done),
    .ap_continue(Block_codeRepl8_proc_U0_ap_continue),
    .ap_idle(Block_codeRepl8_proc_U0_ap_idle),
    .ap_ready(Block_codeRepl8_proc_U0_ap_ready),
    .start_out(Block_codeRepl8_proc_U0_start_out),
    .start_write(Block_codeRepl8_proc_U0_start_write),
    .scale_address0(Block_codeRepl8_proc_U0_scale_address0),
    .scale_ce0(Block_codeRepl8_proc_U0_scale_ce0),
    .scale_q0(scale_q0),
    .scale_address1(Block_codeRepl8_proc_U0_scale_address1),
    .scale_ce1(Block_codeRepl8_proc_U0_scale_ce1),
    .scale_q1(scale_q1),
    .tmp1_out_din(Block_codeRepl8_proc_U0_tmp1_out_din),
    .tmp1_out_full_n(tmp1_loc_channel_full_n),
    .tmp1_out_write(Block_codeRepl8_proc_U0_tmp1_out_write),
    .tmp2_out_din(Block_codeRepl8_proc_U0_tmp2_out_din),
    .tmp2_out_full_n(tmp2_loc_channel_full_n),
    .tmp2_out_write(Block_codeRepl8_proc_U0_tmp2_out_write),
    .tmp3_out_out_din(Block_codeRepl8_proc_U0_tmp3_out_out_din),
    .tmp3_out_out_full_n(tmp3_loc_c_full_n),
    .tmp3_out_out_write(Block_codeRepl8_proc_U0_tmp3_out_out_write)
);

Loop_Loop1_proc Loop_Loop1_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Loop_Loop1_proc_U0_ap_start),
    .ap_done(Loop_Loop1_proc_U0_ap_done),
    .ap_continue(Loop_Loop1_proc_U0_ap_continue),
    .ap_idle(Loop_Loop1_proc_U0_ap_idle),
    .ap_ready(Loop_Loop1_proc_U0_ap_ready),
    .data_in_address0(Loop_Loop1_proc_U0_data_in_address0),
    .data_in_ce0(Loop_Loop1_proc_U0_data_in_ce0),
    .data_in_q0(data_in_q0),
    .tmp1_loc_dout(tmp1_loc_channel_dout),
    .tmp1_loc_empty_n(tmp1_loc_channel_empty_n),
    .tmp1_loc_read(Loop_Loop1_proc_U0_tmp1_loc_read),
    .temp1_din(Loop_Loop1_proc_U0_temp1_din),
    .temp1_full_n(temp1_full_n),
    .temp1_write(Loop_Loop1_proc_U0_temp1_write),
    .tmp2_loc_dout(tmp2_loc_channel_dout),
    .tmp2_loc_empty_n(tmp2_loc_channel_empty_n),
    .tmp2_loc_read(Loop_Loop1_proc_U0_tmp2_loc_read),
    .temp2_din(Loop_Loop1_proc_U0_temp2_din),
    .temp2_full_n(temp2_full_n),
    .temp2_write(Loop_Loop1_proc_U0_temp2_write)
);

Loop_Loop2_proc Loop_Loop2_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Loop_Loop2_proc_U0_ap_start),
    .start_full_n(start_for_Loop_Loop3_proc_U0_full_n),
    .ap_done(Loop_Loop2_proc_U0_ap_done),
    .ap_continue(Loop_Loop2_proc_U0_ap_continue),
    .ap_idle(Loop_Loop2_proc_U0_ap_idle),
    .ap_ready(Loop_Loop2_proc_U0_ap_ready),
    .start_out(Loop_Loop2_proc_U0_start_out),
    .start_write(Loop_Loop2_proc_U0_start_write),
    .temp1_dout(temp1_dout),
    .temp1_empty_n(temp1_empty_n),
    .temp1_read(Loop_Loop2_proc_U0_temp1_read),
    .tmp3_loc_dout(tmp3_loc_c_dout),
    .tmp3_loc_empty_n(tmp3_loc_c_empty_n),
    .tmp3_loc_read(Loop_Loop2_proc_U0_tmp3_loc_read),
    .temp3_din(Loop_Loop2_proc_U0_temp3_din),
    .temp3_full_n(temp3_full_n),
    .temp3_write(Loop_Loop2_proc_U0_temp3_write),
    .temp2_dout(temp2_dout),
    .temp2_empty_n(temp2_empty_n),
    .temp2_read(Loop_Loop2_proc_U0_temp2_read),
    .temp4_din(Loop_Loop2_proc_U0_temp4_din),
    .temp4_full_n(temp4_full_n),
    .temp4_write(Loop_Loop2_proc_U0_temp4_write)
);

Loop_Loop3_proc Loop_Loop3_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Loop_Loop3_proc_U0_ap_start),
    .ap_done(Loop_Loop3_proc_U0_ap_done),
    .ap_continue(Loop_Loop3_proc_U0_ap_continue),
    .ap_idle(Loop_Loop3_proc_U0_ap_idle),
    .ap_ready(Loop_Loop3_proc_U0_ap_ready),
    .temp4_dout(temp4_dout),
    .temp4_empty_n(temp4_empty_n),
    .temp4_read(Loop_Loop3_proc_U0_temp4_read),
    .temp3_dout(temp3_dout),
    .temp3_empty_n(temp3_empty_n),
    .temp3_read(Loop_Loop3_proc_U0_temp3_read),
    .data_out_address0(Loop_Loop3_proc_U0_data_out_address0),
    .data_out_ce0(Loop_Loop3_proc_U0_data_out_ce0),
    .data_out_we0(Loop_Loop3_proc_U0_data_out_we0),
    .data_out_d0(Loop_Loop3_proc_U0_data_out_d0)
);

fifo_w32_d2_A tmp1_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_codeRepl8_proc_U0_tmp1_out_din),
    .if_full_n(tmp1_loc_channel_full_n),
    .if_write(Block_codeRepl8_proc_U0_tmp1_out_write),
    .if_dout(tmp1_loc_channel_dout),
    .if_empty_n(tmp1_loc_channel_empty_n),
    .if_read(Loop_Loop1_proc_U0_tmp1_loc_read)
);

fifo_w32_d2_A tmp2_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_codeRepl8_proc_U0_tmp2_out_din),
    .if_full_n(tmp2_loc_channel_full_n),
    .if_write(Block_codeRepl8_proc_U0_tmp2_out_write),
    .if_dout(tmp2_loc_channel_dout),
    .if_empty_n(tmp2_loc_channel_empty_n),
    .if_read(Loop_Loop1_proc_U0_tmp2_loc_read)
);

fifo_w32_d3_A tmp3_loc_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_codeRepl8_proc_U0_tmp3_out_out_din),
    .if_full_n(tmp3_loc_c_full_n),
    .if_write(Block_codeRepl8_proc_U0_tmp3_out_out_write),
    .if_dout(tmp3_loc_c_dout),
    .if_empty_n(tmp3_loc_c_empty_n),
    .if_read(Loop_Loop2_proc_U0_tmp3_loc_read)
);

fifo_w32_d2_A temp1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Loop_Loop1_proc_U0_temp1_din),
    .if_full_n(temp1_full_n),
    .if_write(Loop_Loop1_proc_U0_temp1_write),
    .if_dout(temp1_dout),
    .if_empty_n(temp1_empty_n),
    .if_read(Loop_Loop2_proc_U0_temp1_read)
);

fifo_w32_d2_A temp2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Loop_Loop1_proc_U0_temp2_din),
    .if_full_n(temp2_full_n),
    .if_write(Loop_Loop1_proc_U0_temp2_write),
    .if_dout(temp2_dout),
    .if_empty_n(temp2_empty_n),
    .if_read(Loop_Loop2_proc_U0_temp2_read)
);

fifo_w32_d2_A temp3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Loop_Loop2_proc_U0_temp3_din),
    .if_full_n(temp3_full_n),
    .if_write(Loop_Loop2_proc_U0_temp3_write),
    .if_dout(temp3_dout),
    .if_empty_n(temp3_empty_n),
    .if_read(Loop_Loop3_proc_U0_temp3_read)
);

fifo_w32_d2_A temp4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Loop_Loop2_proc_U0_temp4_din),
    .if_full_n(temp4_full_n),
    .if_write(Loop_Loop2_proc_U0_temp4_write),
    .if_dout(temp4_dout),
    .if_empty_n(temp4_empty_n),
    .if_read(Loop_Loop3_proc_U0_temp4_read)
);

start_for_Loop_Lobkb start_for_Loop_Lobkb_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_Loop_Loop2_proc_U0_din),
    .if_full_n(start_for_Loop_Loop2_proc_U0_full_n),
    .if_write(Block_codeRepl8_proc_U0_start_write),
    .if_dout(start_for_Loop_Loop2_proc_U0_dout),
    .if_empty_n(start_for_Loop_Loop2_proc_U0_empty_n),
    .if_read(Loop_Loop2_proc_U0_ap_ready)
);

start_for_Loop_Locud start_for_Loop_Locud_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_Loop_Loop3_proc_U0_din),
    .if_full_n(start_for_Loop_Loop3_proc_U0_full_n),
    .if_write(Loop_Loop2_proc_U0_start_write),
    .if_dout(start_for_Loop_Loop3_proc_U0_dout),
    .if_empty_n(start_for_Loop_Loop3_proc_U0_empty_n),
    .if_read(Loop_Loop3_proc_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_Block_codeRepl8_proc_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_Block_codeRepl8_proc_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_Block_codeRepl8_proc_U0_ap_ready <= ap_sync_Block_codeRepl8_proc_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_Loop_Loop1_proc_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_Loop_Loop1_proc_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_Loop_Loop1_proc_U0_ap_ready <= ap_sync_Loop_Loop1_proc_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sync_ready == 1'b1) & (1'b0 == Block_codeRepl8_proc_U0_ap_ready))) begin
        Block_codeRepl8_proc_U0_ap_ready_count <= (Block_codeRepl8_proc_U0_ap_ready_count - 2'd1);
    end else if (((1'b1 == Block_codeRepl8_proc_U0_ap_ready) & (ap_sync_ready == 1'b0))) begin
        Block_codeRepl8_proc_U0_ap_ready_count <= (Block_codeRepl8_proc_U0_ap_ready_count + 2'd1);
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sync_ready == 1'b1) & (1'b0 == Loop_Loop1_proc_U0_ap_ready))) begin
        Loop_Loop1_proc_U0_ap_ready_count <= (Loop_Loop1_proc_U0_ap_ready_count - 2'd1);
    end else if (((1'b1 == Loop_Loop1_proc_U0_ap_ready) & (ap_sync_ready == 1'b0))) begin
        Loop_Loop1_proc_U0_ap_ready_count <= (Loop_Loop1_proc_U0_ap_ready_count + 2'd1);
    end
end

assign Block_codeRepl8_proc_U0_ap_continue = 1'b1;

assign Block_codeRepl8_proc_U0_ap_start = ((ap_sync_reg_Block_codeRepl8_proc_U0_ap_ready ^ 1'b1) & ap_start);

assign Loop_Loop1_proc_U0_ap_continue = 1'b1;

assign Loop_Loop1_proc_U0_ap_start = ((ap_sync_reg_Loop_Loop1_proc_U0_ap_ready ^ 1'b1) & ap_start);

assign Loop_Loop1_proc_U0_start_full_n = 1'b1;

assign Loop_Loop1_proc_U0_start_write = 1'b0;

assign Loop_Loop2_proc_U0_ap_continue = 1'b1;

assign Loop_Loop2_proc_U0_ap_start = start_for_Loop_Loop2_proc_U0_empty_n;

assign Loop_Loop3_proc_U0_ap_continue = 1'b1;

assign Loop_Loop3_proc_U0_ap_start = start_for_Loop_Loop3_proc_U0_empty_n;

assign Loop_Loop3_proc_U0_start_full_n = 1'b1;

assign Loop_Loop3_proc_U0_start_write = 1'b0;

assign ap_done = Loop_Loop3_proc_U0_ap_done;

assign ap_idle = (Loop_Loop3_proc_U0_ap_idle & Loop_Loop2_proc_U0_ap_idle & Loop_Loop1_proc_U0_ap_idle & Block_codeRepl8_proc_U0_ap_idle);

assign ap_ready = ap_sync_ready;

assign ap_sync_Block_codeRepl8_proc_U0_ap_ready = (ap_sync_reg_Block_codeRepl8_proc_U0_ap_ready | Block_codeRepl8_proc_U0_ap_ready);

assign ap_sync_Loop_Loop1_proc_U0_ap_ready = (ap_sync_reg_Loop_Loop1_proc_U0_ap_ready | Loop_Loop1_proc_U0_ap_ready);

assign ap_sync_continue = 1'b1;

assign ap_sync_done = Loop_Loop3_proc_U0_ap_done;

assign ap_sync_ready = (ap_sync_Loop_Loop1_proc_U0_ap_ready & ap_sync_Block_codeRepl8_proc_U0_ap_ready);

assign data_in_address0 = Loop_Loop1_proc_U0_data_in_address0;

assign data_in_address1 = 14'd0;

assign data_in_ce0 = Loop_Loop1_proc_U0_data_in_ce0;

assign data_in_ce1 = 1'b0;

assign data_in_d0 = 32'd0;

assign data_in_d1 = 32'd0;

assign data_in_we0 = 1'b0;

assign data_in_we1 = 1'b0;

assign data_out_address0 = Loop_Loop3_proc_U0_data_out_address0;

assign data_out_address1 = 14'd0;

assign data_out_ce0 = Loop_Loop3_proc_U0_data_out_ce0;

assign data_out_ce1 = 1'b0;

assign data_out_d0 = Loop_Loop3_proc_U0_data_out_d0;

assign data_out_d1 = 32'd0;

assign data_out_we0 = Loop_Loop3_proc_U0_data_out_we0;

assign data_out_we1 = 1'b0;

assign scale_address0 = Block_codeRepl8_proc_U0_scale_address0;

assign scale_address1 = Block_codeRepl8_proc_U0_scale_address1;

assign scale_ce0 = Block_codeRepl8_proc_U0_scale_ce0;

assign scale_ce1 = Block_codeRepl8_proc_U0_scale_ce1;

assign scale_d0 = 32'd0;

assign scale_d1 = 32'd0;

assign scale_we0 = 1'b0;

assign scale_we1 = 1'b0;

assign start_for_Loop_Loop2_proc_U0_din = 1'b1;

assign start_for_Loop_Loop3_proc_U0_din = 1'b1;

endmodule //foo_m
