// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_Loop2_proc (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        temp1_dout,
        temp1_empty_n,
        temp1_read,
        tmp3_loc_dout,
        tmp3_loc_empty_n,
        tmp3_loc_read,
        temp3_din,
        temp3_full_n,
        temp3_write,
        temp2_dout,
        temp2_empty_n,
        temp2_read,
        temp4_din,
        temp4_full_n,
        temp4_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] temp1_dout;
input   temp1_empty_n;
output   temp1_read;
input  [31:0] tmp3_loc_dout;
input   tmp3_loc_empty_n;
output   tmp3_loc_read;
output  [31:0] temp3_din;
input   temp3_full_n;
output   temp3_write;
input  [31:0] temp2_dout;
input   temp2_empty_n;
output   temp2_read;
output  [31:0] temp4_din;
input   temp4_full_n;
output   temp4_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg temp1_read;
reg tmp3_loc_read;
reg temp3_write;
reg temp2_read;
reg temp4_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    temp1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln28_reg_176;
reg    tmp3_loc_blk_n;
reg    temp3_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln28_reg_176_pp0_iter2_reg;
reg    temp2_blk_n;
reg    temp4_blk_n;
reg   [14:0] j_0_i_i_reg_144;
reg  signed [31:0] tmp3_loc_read_reg_171;
reg    ap_block_state1;
wire   [0:0] icmp_ln28_fu_155_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln28_reg_176_pp0_iter1_reg;
wire   [14:0] j_fu_161_p2;
reg    ap_enable_reg_pp0_iter0;
reg  signed [31:0] temp1_read_reg_185;
reg   [31:0] temp2_read_reg_190;
reg   [31:0] temp2_read_reg_190_pp0_iter2_reg;
wire   [31:0] mul_ln29_fu_167_p2;
reg   [31:0] mul_ln29_reg_195;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp0_stage0_01001;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (tmp3_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((real_start == 1'b0) | (tmp3_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (tmp3_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_i_i_reg_144 <= 15'd0;
    end else if (((icmp_ln28_fu_155_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_0_i_i_reg_144 <= j_fu_161_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln28_reg_176 <= icmp_ln28_fu_155_p2;
        icmp_ln28_reg_176_pp0_iter1_reg <= icmp_ln28_reg_176;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln28_reg_176_pp0_iter2_reg <= icmp_ln28_reg_176_pp0_iter1_reg;
        temp2_read_reg_190_pp0_iter2_reg <= temp2_read_reg_190;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_reg_176_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln29_reg_195 <= mul_ln29_fu_167_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_reg_176 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp1_read_reg_185 <= temp1_dout;
        temp2_read_reg_190 <= temp2_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (tmp3_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp3_loc_read_reg_171 <= tmp3_loc_dout;
    end
end

always @ (*) begin
    if ((icmp_ln28_fu_155_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln28_reg_176 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp1_blk_n = temp1_empty_n;
    end else begin
        temp1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln28_reg_176 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp1_read = 1'b1;
    end else begin
        temp1_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln28_reg_176 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp2_blk_n = temp2_empty_n;
    end else begin
        temp2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln28_reg_176 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp2_read = 1'b1;
    end else begin
        temp2_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln28_reg_176_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        temp3_blk_n = temp3_full_n;
    end else begin
        temp3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln28_reg_176_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp3_write = 1'b1;
    end else begin
        temp3_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln28_reg_176_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        temp4_blk_n = temp4_full_n;
    end else begin
        temp4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln28_reg_176_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp4_write = 1'b1;
    end else begin
        temp4_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp3_loc_blk_n = tmp3_loc_empty_n;
    end else begin
        tmp3_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (tmp3_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp3_loc_read = 1'b1;
    end else begin
        tmp3_loc_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (tmp3_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln28_fu_155_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln28_fu_155_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (((icmp_ln28_reg_176_pp0_iter2_reg == 1'd0) & (temp4_full_n == 1'b0)) | ((icmp_ln28_reg_176_pp0_iter2_reg == 1'd0) & (temp3_full_n == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln28_reg_176 == 1'd0) & (temp2_empty_n == 1'b0)) | ((icmp_ln28_reg_176 == 1'd0) & (temp1_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (((icmp_ln28_reg_176_pp0_iter2_reg == 1'd0) & (temp4_full_n == 1'b0)) | ((icmp_ln28_reg_176_pp0_iter2_reg == 1'd0) & (temp3_full_n == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln28_reg_176 == 1'd0) & (temp2_empty_n == 1'b0)) | ((icmp_ln28_reg_176 == 1'd0) & (temp1_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter3 == 1'b1) & (((icmp_ln28_reg_176_pp0_iter2_reg == 1'd0) & (temp4_full_n == 1'b0)) | ((icmp_ln28_reg_176_pp0_iter2_reg == 1'd0) & (temp3_full_n == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln28_reg_176 == 1'd0) & (temp2_empty_n == 1'b0)) | ((icmp_ln28_reg_176 == 1'd0) & (temp1_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (tmp3_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((icmp_ln28_reg_176 == 1'd0) & (temp2_empty_n == 1'b0)) | ((icmp_ln28_reg_176 == 1'd0) & (temp1_empty_n == 1'b0)));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = (((icmp_ln28_reg_176_pp0_iter2_reg == 1'd0) & (temp4_full_n == 1'b0)) | ((icmp_ln28_reg_176_pp0_iter2_reg == 1'd0) & (temp3_full_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign icmp_ln28_fu_155_p2 = ((j_0_i_i_reg_144 == 15'd16384) ? 1'b1 : 1'b0);

assign j_fu_161_p2 = (j_0_i_i_reg_144 + 15'd1);

assign mul_ln29_fu_167_p2 = ($signed(tmp3_loc_read_reg_171) * $signed(temp1_read_reg_185));

assign start_out = real_start;

assign temp3_din = mul_ln29_reg_195;

assign temp4_din = temp2_read_reg_190_pp0_iter2_reg;

endmodule //Loop_Loop2_proc
