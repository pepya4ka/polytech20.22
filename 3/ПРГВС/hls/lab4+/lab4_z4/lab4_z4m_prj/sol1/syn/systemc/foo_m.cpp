// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "foo_m.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic foo_m::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<14> foo_m::ap_const_lv14_0 = "00000000000000";
const sc_logic foo_m::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<32> foo_m::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<2> foo_m::ap_const_lv2_0 = "00";
const sc_lv<2> foo_m::ap_const_lv2_1 = "1";
const bool foo_m::ap_const_boolean_1 = true;

foo_m::foo_m(sc_module_name name) : sc_module(name), mVcdFile(0) {
    temp1_U = new foo_m_temp1("temp1_U");
    temp1_U->clk(ap_clk);
    temp1_U->reset(ap_rst);
    temp1_U->i_address0(Loop_Loop1_proc_U0_temp1_address0);
    temp1_U->i_ce0(Loop_Loop1_proc_U0_temp1_ce0);
    temp1_U->i_we0(Loop_Loop1_proc_U0_temp1_we0);
    temp1_U->i_d0(Loop_Loop1_proc_U0_temp1_d0);
    temp1_U->i_q0(temp1_i_q0);
    temp1_U->t_address0(Loop_Loop2_proc_U0_temp1_address0);
    temp1_U->t_ce0(Loop_Loop2_proc_U0_temp1_ce0);
    temp1_U->t_we0(ap_var_for_const0);
    temp1_U->t_d0(ap_var_for_const1);
    temp1_U->t_q0(temp1_t_q0);
    temp1_U->i_ce(ap_var_for_const2);
    temp1_U->t_ce(ap_var_for_const2);
    temp1_U->i_full_n(temp1_i_full_n);
    temp1_U->i_write(ap_channel_done_temp1);
    temp1_U->t_empty_n(temp1_t_empty_n);
    temp1_U->t_read(Loop_Loop2_proc_U0_ap_ready);
    temp2_U = new foo_m_temp1("temp2_U");
    temp2_U->clk(ap_clk);
    temp2_U->reset(ap_rst);
    temp2_U->i_address0(Loop_Loop1_proc_U0_temp2_address0);
    temp2_U->i_ce0(Loop_Loop1_proc_U0_temp2_ce0);
    temp2_U->i_we0(Loop_Loop1_proc_U0_temp2_we0);
    temp2_U->i_d0(Loop_Loop1_proc_U0_temp2_d0);
    temp2_U->i_q0(temp2_i_q0);
    temp2_U->t_address0(Loop_Loop2_proc_U0_temp2_address0);
    temp2_U->t_ce0(Loop_Loop2_proc_U0_temp2_ce0);
    temp2_U->t_we0(ap_var_for_const0);
    temp2_U->t_d0(ap_var_for_const1);
    temp2_U->t_q0(temp2_t_q0);
    temp2_U->i_ce(ap_var_for_const2);
    temp2_U->t_ce(ap_var_for_const2);
    temp2_U->i_full_n(temp2_i_full_n);
    temp2_U->i_write(ap_channel_done_temp2);
    temp2_U->t_empty_n(temp2_t_empty_n);
    temp2_U->t_read(Loop_Loop2_proc_U0_ap_ready);
    temp3_U = new foo_m_temp1("temp3_U");
    temp3_U->clk(ap_clk);
    temp3_U->reset(ap_rst);
    temp3_U->i_address0(Loop_Loop2_proc_U0_temp3_address0);
    temp3_U->i_ce0(Loop_Loop2_proc_U0_temp3_ce0);
    temp3_U->i_we0(Loop_Loop2_proc_U0_temp3_we0);
    temp3_U->i_d0(Loop_Loop2_proc_U0_temp3_d0);
    temp3_U->i_q0(temp3_i_q0);
    temp3_U->t_address0(Loop_Loop3_proc_U0_temp3_address0);
    temp3_U->t_ce0(Loop_Loop3_proc_U0_temp3_ce0);
    temp3_U->t_we0(ap_var_for_const0);
    temp3_U->t_d0(ap_var_for_const1);
    temp3_U->t_q0(temp3_t_q0);
    temp3_U->i_ce(ap_var_for_const2);
    temp3_U->t_ce(ap_var_for_const2);
    temp3_U->i_full_n(temp3_i_full_n);
    temp3_U->i_write(ap_channel_done_temp3);
    temp3_U->t_empty_n(temp3_t_empty_n);
    temp3_U->t_read(Loop_Loop3_proc_U0_ap_ready);
    temp4_U = new foo_m_temp1("temp4_U");
    temp4_U->clk(ap_clk);
    temp4_U->reset(ap_rst);
    temp4_U->i_address0(Loop_Loop2_proc_U0_temp4_address0);
    temp4_U->i_ce0(Loop_Loop2_proc_U0_temp4_ce0);
    temp4_U->i_we0(Loop_Loop2_proc_U0_temp4_we0);
    temp4_U->i_d0(Loop_Loop2_proc_U0_temp4_d0);
    temp4_U->i_q0(temp4_i_q0);
    temp4_U->t_address0(Loop_Loop3_proc_U0_temp4_address0);
    temp4_U->t_ce0(Loop_Loop3_proc_U0_temp4_ce0);
    temp4_U->t_we0(ap_var_for_const0);
    temp4_U->t_d0(ap_var_for_const1);
    temp4_U->t_q0(temp4_t_q0);
    temp4_U->i_ce(ap_var_for_const2);
    temp4_U->t_ce(ap_var_for_const2);
    temp4_U->i_full_n(temp4_i_full_n);
    temp4_U->i_write(ap_channel_done_temp4);
    temp4_U->t_empty_n(temp4_t_empty_n);
    temp4_U->t_read(Loop_Loop3_proc_U0_ap_ready);
    Block_codeRepl8_proc_U0 = new Block_codeRepl8_proc("Block_codeRepl8_proc_U0");
    Block_codeRepl8_proc_U0->ap_clk(ap_clk);
    Block_codeRepl8_proc_U0->ap_rst(ap_rst);
    Block_codeRepl8_proc_U0->ap_start(Block_codeRepl8_proc_U0_ap_start);
    Block_codeRepl8_proc_U0->ap_done(Block_codeRepl8_proc_U0_ap_done);
    Block_codeRepl8_proc_U0->ap_continue(Block_codeRepl8_proc_U0_ap_continue);
    Block_codeRepl8_proc_U0->ap_idle(Block_codeRepl8_proc_U0_ap_idle);
    Block_codeRepl8_proc_U0->ap_ready(Block_codeRepl8_proc_U0_ap_ready);
    Block_codeRepl8_proc_U0->scale_address0(Block_codeRepl8_proc_U0_scale_address0);
    Block_codeRepl8_proc_U0->scale_ce0(Block_codeRepl8_proc_U0_scale_ce0);
    Block_codeRepl8_proc_U0->scale_q0(scale_q0);
    Block_codeRepl8_proc_U0->scale_address1(Block_codeRepl8_proc_U0_scale_address1);
    Block_codeRepl8_proc_U0->scale_ce1(Block_codeRepl8_proc_U0_scale_ce1);
    Block_codeRepl8_proc_U0->scale_q1(scale_q1);
    Block_codeRepl8_proc_U0->tmp3_out_out_din(Block_codeRepl8_proc_U0_tmp3_out_out_din);
    Block_codeRepl8_proc_U0->tmp3_out_out_full_n(tmp3_loc_c_full_n);
    Block_codeRepl8_proc_U0->tmp3_out_out_write(Block_codeRepl8_proc_U0_tmp3_out_out_write);
    Block_codeRepl8_proc_U0->ap_return_0(Block_codeRepl8_proc_U0_ap_return_0);
    Block_codeRepl8_proc_U0->ap_return_1(Block_codeRepl8_proc_U0_ap_return_1);
    Loop_Loop1_proc_U0 = new Loop_Loop1_proc("Loop_Loop1_proc_U0");
    Loop_Loop1_proc_U0->ap_clk(ap_clk);
    Loop_Loop1_proc_U0->ap_rst(ap_rst);
    Loop_Loop1_proc_U0->ap_start(Loop_Loop1_proc_U0_ap_start);
    Loop_Loop1_proc_U0->ap_done(Loop_Loop1_proc_U0_ap_done);
    Loop_Loop1_proc_U0->ap_continue(Loop_Loop1_proc_U0_ap_continue);
    Loop_Loop1_proc_U0->ap_idle(Loop_Loop1_proc_U0_ap_idle);
    Loop_Loop1_proc_U0->ap_ready(Loop_Loop1_proc_U0_ap_ready);
    Loop_Loop1_proc_U0->data_in_address0(Loop_Loop1_proc_U0_data_in_address0);
    Loop_Loop1_proc_U0->data_in_ce0(Loop_Loop1_proc_U0_data_in_ce0);
    Loop_Loop1_proc_U0->data_in_q0(data_in_q0);
    Loop_Loop1_proc_U0->p_read(tmp1_loc_channel_dout);
    Loop_Loop1_proc_U0->temp1_address0(Loop_Loop1_proc_U0_temp1_address0);
    Loop_Loop1_proc_U0->temp1_ce0(Loop_Loop1_proc_U0_temp1_ce0);
    Loop_Loop1_proc_U0->temp1_we0(Loop_Loop1_proc_U0_temp1_we0);
    Loop_Loop1_proc_U0->temp1_d0(Loop_Loop1_proc_U0_temp1_d0);
    Loop_Loop1_proc_U0->p_read1(tmp2_loc_channel_dout);
    Loop_Loop1_proc_U0->temp2_address0(Loop_Loop1_proc_U0_temp2_address0);
    Loop_Loop1_proc_U0->temp2_ce0(Loop_Loop1_proc_U0_temp2_ce0);
    Loop_Loop1_proc_U0->temp2_we0(Loop_Loop1_proc_U0_temp2_we0);
    Loop_Loop1_proc_U0->temp2_d0(Loop_Loop1_proc_U0_temp2_d0);
    Loop_Loop2_proc_U0 = new Loop_Loop2_proc("Loop_Loop2_proc_U0");
    Loop_Loop2_proc_U0->ap_clk(ap_clk);
    Loop_Loop2_proc_U0->ap_rst(ap_rst);
    Loop_Loop2_proc_U0->ap_start(Loop_Loop2_proc_U0_ap_start);
    Loop_Loop2_proc_U0->ap_done(Loop_Loop2_proc_U0_ap_done);
    Loop_Loop2_proc_U0->ap_continue(Loop_Loop2_proc_U0_ap_continue);
    Loop_Loop2_proc_U0->ap_idle(Loop_Loop2_proc_U0_ap_idle);
    Loop_Loop2_proc_U0->ap_ready(Loop_Loop2_proc_U0_ap_ready);
    Loop_Loop2_proc_U0->temp1_address0(Loop_Loop2_proc_U0_temp1_address0);
    Loop_Loop2_proc_U0->temp1_ce0(Loop_Loop2_proc_U0_temp1_ce0);
    Loop_Loop2_proc_U0->temp1_q0(temp1_t_q0);
    Loop_Loop2_proc_U0->tmp3_loc_dout(tmp3_loc_c_dout);
    Loop_Loop2_proc_U0->tmp3_loc_empty_n(tmp3_loc_c_empty_n);
    Loop_Loop2_proc_U0->tmp3_loc_read(Loop_Loop2_proc_U0_tmp3_loc_read);
    Loop_Loop2_proc_U0->temp3_address0(Loop_Loop2_proc_U0_temp3_address0);
    Loop_Loop2_proc_U0->temp3_ce0(Loop_Loop2_proc_U0_temp3_ce0);
    Loop_Loop2_proc_U0->temp3_we0(Loop_Loop2_proc_U0_temp3_we0);
    Loop_Loop2_proc_U0->temp3_d0(Loop_Loop2_proc_U0_temp3_d0);
    Loop_Loop2_proc_U0->temp2_address0(Loop_Loop2_proc_U0_temp2_address0);
    Loop_Loop2_proc_U0->temp2_ce0(Loop_Loop2_proc_U0_temp2_ce0);
    Loop_Loop2_proc_U0->temp2_q0(temp2_t_q0);
    Loop_Loop2_proc_U0->temp4_address0(Loop_Loop2_proc_U0_temp4_address0);
    Loop_Loop2_proc_U0->temp4_ce0(Loop_Loop2_proc_U0_temp4_ce0);
    Loop_Loop2_proc_U0->temp4_we0(Loop_Loop2_proc_U0_temp4_we0);
    Loop_Loop2_proc_U0->temp4_d0(Loop_Loop2_proc_U0_temp4_d0);
    Loop_Loop3_proc_U0 = new Loop_Loop3_proc("Loop_Loop3_proc_U0");
    Loop_Loop3_proc_U0->ap_clk(ap_clk);
    Loop_Loop3_proc_U0->ap_rst(ap_rst);
    Loop_Loop3_proc_U0->ap_start(Loop_Loop3_proc_U0_ap_start);
    Loop_Loop3_proc_U0->ap_done(Loop_Loop3_proc_U0_ap_done);
    Loop_Loop3_proc_U0->ap_continue(Loop_Loop3_proc_U0_ap_continue);
    Loop_Loop3_proc_U0->ap_idle(Loop_Loop3_proc_U0_ap_idle);
    Loop_Loop3_proc_U0->ap_ready(Loop_Loop3_proc_U0_ap_ready);
    Loop_Loop3_proc_U0->temp4_address0(Loop_Loop3_proc_U0_temp4_address0);
    Loop_Loop3_proc_U0->temp4_ce0(Loop_Loop3_proc_U0_temp4_ce0);
    Loop_Loop3_proc_U0->temp4_q0(temp4_t_q0);
    Loop_Loop3_proc_U0->temp3_address0(Loop_Loop3_proc_U0_temp3_address0);
    Loop_Loop3_proc_U0->temp3_ce0(Loop_Loop3_proc_U0_temp3_ce0);
    Loop_Loop3_proc_U0->temp3_q0(temp3_t_q0);
    Loop_Loop3_proc_U0->data_out_address0(Loop_Loop3_proc_U0_data_out_address0);
    Loop_Loop3_proc_U0->data_out_ce0(Loop_Loop3_proc_U0_data_out_ce0);
    Loop_Loop3_proc_U0->data_out_we0(Loop_Loop3_proc_U0_data_out_we0);
    Loop_Loop3_proc_U0->data_out_d0(Loop_Loop3_proc_U0_data_out_d0);
    tmp3_loc_c_U = new fifo_w32_d3_A("tmp3_loc_c_U");
    tmp3_loc_c_U->clk(ap_clk);
    tmp3_loc_c_U->reset(ap_rst);
    tmp3_loc_c_U->if_read_ce(ap_var_for_const2);
    tmp3_loc_c_U->if_write_ce(ap_var_for_const2);
    tmp3_loc_c_U->if_din(Block_codeRepl8_proc_U0_tmp3_out_out_din);
    tmp3_loc_c_U->if_full_n(tmp3_loc_c_full_n);
    tmp3_loc_c_U->if_write(Block_codeRepl8_proc_U0_tmp3_out_out_write);
    tmp3_loc_c_U->if_dout(tmp3_loc_c_dout);
    tmp3_loc_c_U->if_empty_n(tmp3_loc_c_empty_n);
    tmp3_loc_c_U->if_read(Loop_Loop2_proc_U0_tmp3_loc_read);
    tmp1_loc_channel_U = new fifo_w32_d2_A("tmp1_loc_channel_U");
    tmp1_loc_channel_U->clk(ap_clk);
    tmp1_loc_channel_U->reset(ap_rst);
    tmp1_loc_channel_U->if_read_ce(ap_var_for_const2);
    tmp1_loc_channel_U->if_write_ce(ap_var_for_const2);
    tmp1_loc_channel_U->if_din(Block_codeRepl8_proc_U0_ap_return_0);
    tmp1_loc_channel_U->if_full_n(tmp1_loc_channel_full_n);
    tmp1_loc_channel_U->if_write(ap_channel_done_tmp1_loc_channel);
    tmp1_loc_channel_U->if_dout(tmp1_loc_channel_dout);
    tmp1_loc_channel_U->if_empty_n(tmp1_loc_channel_empty_n);
    tmp1_loc_channel_U->if_read(Loop_Loop1_proc_U0_ap_ready);
    tmp2_loc_channel_U = new fifo_w32_d2_A("tmp2_loc_channel_U");
    tmp2_loc_channel_U->clk(ap_clk);
    tmp2_loc_channel_U->reset(ap_rst);
    tmp2_loc_channel_U->if_read_ce(ap_var_for_const2);
    tmp2_loc_channel_U->if_write_ce(ap_var_for_const2);
    tmp2_loc_channel_U->if_din(Block_codeRepl8_proc_U0_ap_return_1);
    tmp2_loc_channel_U->if_full_n(tmp2_loc_channel_full_n);
    tmp2_loc_channel_U->if_write(ap_channel_done_tmp2_loc_channel);
    tmp2_loc_channel_U->if_dout(tmp2_loc_channel_dout);
    tmp2_loc_channel_U->if_empty_n(tmp2_loc_channel_empty_n);
    tmp2_loc_channel_U->if_read(Loop_Loop1_proc_U0_ap_ready);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Block_codeRepl8_proc_U0_ap_continue);
    sensitive << ( ap_sync_channel_write_tmp2_loc_channel );
    sensitive << ( ap_sync_channel_write_tmp1_loc_channel );

    SC_METHOD(thread_Block_codeRepl8_proc_U0_ap_start);
    sensitive << ( ap_start );
    sensitive << ( ap_sync_reg_Block_codeRepl8_proc_U0_ap_ready );

    SC_METHOD(thread_Block_codeRepl8_proc_U0_start_full_n);

    SC_METHOD(thread_Block_codeRepl8_proc_U0_start_write);

    SC_METHOD(thread_Loop_Loop1_proc_U0_ap_continue);
    sensitive << ( ap_sync_channel_write_temp2 );
    sensitive << ( ap_sync_channel_write_temp1 );

    SC_METHOD(thread_Loop_Loop1_proc_U0_ap_start);
    sensitive << ( ap_start );
    sensitive << ( tmp1_loc_channel_empty_n );
    sensitive << ( tmp2_loc_channel_empty_n );
    sensitive << ( ap_sync_reg_Loop_Loop1_proc_U0_ap_ready );

    SC_METHOD(thread_Loop_Loop1_proc_U0_start_full_n);

    SC_METHOD(thread_Loop_Loop1_proc_U0_start_write);

    SC_METHOD(thread_Loop_Loop1_proc_U0_temp1_full_n);
    sensitive << ( temp1_i_full_n );

    SC_METHOD(thread_Loop_Loop1_proc_U0_temp2_full_n);
    sensitive << ( temp2_i_full_n );

    SC_METHOD(thread_Loop_Loop2_proc_U0_ap_continue);
    sensitive << ( ap_sync_channel_write_temp4 );
    sensitive << ( ap_sync_channel_write_temp3 );

    SC_METHOD(thread_Loop_Loop2_proc_U0_ap_start);
    sensitive << ( temp1_t_empty_n );
    sensitive << ( temp2_t_empty_n );

    SC_METHOD(thread_Loop_Loop2_proc_U0_start_full_n);

    SC_METHOD(thread_Loop_Loop2_proc_U0_start_write);

    SC_METHOD(thread_Loop_Loop2_proc_U0_temp3_full_n);
    sensitive << ( temp3_i_full_n );

    SC_METHOD(thread_Loop_Loop2_proc_U0_temp4_full_n);
    sensitive << ( temp4_i_full_n );

    SC_METHOD(thread_Loop_Loop3_proc_U0_ap_continue);

    SC_METHOD(thread_Loop_Loop3_proc_U0_ap_start);
    sensitive << ( temp3_t_empty_n );
    sensitive << ( temp4_t_empty_n );

    SC_METHOD(thread_Loop_Loop3_proc_U0_start_full_n);

    SC_METHOD(thread_Loop_Loop3_proc_U0_start_write);

    SC_METHOD(thread_ap_channel_done_temp1);
    sensitive << ( Loop_Loop1_proc_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_temp1 );

    SC_METHOD(thread_ap_channel_done_temp2);
    sensitive << ( Loop_Loop1_proc_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_temp2 );

    SC_METHOD(thread_ap_channel_done_temp3);
    sensitive << ( Loop_Loop2_proc_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_temp3 );

    SC_METHOD(thread_ap_channel_done_temp4);
    sensitive << ( Loop_Loop2_proc_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_temp4 );

    SC_METHOD(thread_ap_channel_done_tmp1_loc_channel);
    sensitive << ( Block_codeRepl8_proc_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_tmp1_loc_channel );

    SC_METHOD(thread_ap_channel_done_tmp2_loc_channel);
    sensitive << ( Block_codeRepl8_proc_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_tmp2_loc_channel );

    SC_METHOD(thread_ap_done);
    sensitive << ( Loop_Loop3_proc_U0_ap_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( Block_codeRepl8_proc_U0_ap_idle );
    sensitive << ( Loop_Loop1_proc_U0_ap_idle );
    sensitive << ( Loop_Loop2_proc_U0_ap_idle );
    sensitive << ( Loop_Loop3_proc_U0_ap_idle );
    sensitive << ( temp1_t_empty_n );
    sensitive << ( temp2_t_empty_n );
    sensitive << ( temp3_t_empty_n );
    sensitive << ( temp4_t_empty_n );
    sensitive << ( tmp1_loc_channel_empty_n );
    sensitive << ( tmp2_loc_channel_empty_n );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sync_ready );

    SC_METHOD(thread_ap_sync_Block_codeRepl8_proc_U0_ap_ready);
    sensitive << ( Block_codeRepl8_proc_U0_ap_ready );
    sensitive << ( ap_sync_reg_Block_codeRepl8_proc_U0_ap_ready );

    SC_METHOD(thread_ap_sync_Loop_Loop1_proc_U0_ap_ready);
    sensitive << ( Loop_Loop1_proc_U0_ap_ready );
    sensitive << ( ap_sync_reg_Loop_Loop1_proc_U0_ap_ready );

    SC_METHOD(thread_ap_sync_channel_write_temp1);
    sensitive << ( ap_channel_done_temp1 );
    sensitive << ( Loop_Loop1_proc_U0_temp1_full_n );
    sensitive << ( ap_sync_reg_channel_write_temp1 );

    SC_METHOD(thread_ap_sync_channel_write_temp2);
    sensitive << ( ap_channel_done_temp2 );
    sensitive << ( Loop_Loop1_proc_U0_temp2_full_n );
    sensitive << ( ap_sync_reg_channel_write_temp2 );

    SC_METHOD(thread_ap_sync_channel_write_temp3);
    sensitive << ( ap_channel_done_temp3 );
    sensitive << ( Loop_Loop2_proc_U0_temp3_full_n );
    sensitive << ( ap_sync_reg_channel_write_temp3 );

    SC_METHOD(thread_ap_sync_channel_write_temp4);
    sensitive << ( ap_channel_done_temp4 );
    sensitive << ( Loop_Loop2_proc_U0_temp4_full_n );
    sensitive << ( ap_sync_reg_channel_write_temp4 );

    SC_METHOD(thread_ap_sync_channel_write_tmp1_loc_channel);
    sensitive << ( ap_channel_done_tmp1_loc_channel );
    sensitive << ( tmp1_loc_channel_full_n );
    sensitive << ( ap_sync_reg_channel_write_tmp1_loc_channel );

    SC_METHOD(thread_ap_sync_channel_write_tmp2_loc_channel);
    sensitive << ( ap_channel_done_tmp2_loc_channel );
    sensitive << ( tmp2_loc_channel_full_n );
    sensitive << ( ap_sync_reg_channel_write_tmp2_loc_channel );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( Loop_Loop3_proc_U0_ap_done );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( ap_sync_Block_codeRepl8_proc_U0_ap_ready );
    sensitive << ( ap_sync_Loop_Loop1_proc_U0_ap_ready );

    SC_METHOD(thread_data_in_address0);
    sensitive << ( Loop_Loop1_proc_U0_data_in_address0 );

    SC_METHOD(thread_data_in_address1);

    SC_METHOD(thread_data_in_ce0);
    sensitive << ( Loop_Loop1_proc_U0_data_in_ce0 );

    SC_METHOD(thread_data_in_ce1);

    SC_METHOD(thread_data_in_d0);

    SC_METHOD(thread_data_in_d1);

    SC_METHOD(thread_data_in_we0);

    SC_METHOD(thread_data_in_we1);

    SC_METHOD(thread_data_out_address0);
    sensitive << ( Loop_Loop3_proc_U0_data_out_address0 );

    SC_METHOD(thread_data_out_address1);

    SC_METHOD(thread_data_out_ce0);
    sensitive << ( Loop_Loop3_proc_U0_data_out_ce0 );

    SC_METHOD(thread_data_out_ce1);

    SC_METHOD(thread_data_out_d0);
    sensitive << ( Loop_Loop3_proc_U0_data_out_d0 );

    SC_METHOD(thread_data_out_d1);

    SC_METHOD(thread_data_out_we0);
    sensitive << ( Loop_Loop3_proc_U0_data_out_we0 );

    SC_METHOD(thread_data_out_we1);

    SC_METHOD(thread_scale_address0);
    sensitive << ( Block_codeRepl8_proc_U0_scale_address0 );

    SC_METHOD(thread_scale_address1);
    sensitive << ( Block_codeRepl8_proc_U0_scale_address1 );

    SC_METHOD(thread_scale_ce0);
    sensitive << ( Block_codeRepl8_proc_U0_scale_ce0 );

    SC_METHOD(thread_scale_ce1);
    sensitive << ( Block_codeRepl8_proc_U0_scale_ce1 );

    SC_METHOD(thread_scale_d0);

    SC_METHOD(thread_scale_d1);

    SC_METHOD(thread_scale_we0);

    SC_METHOD(thread_scale_we1);

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    ap_sync_reg_channel_write_tmp2_loc_channel = SC_LOGIC_0;
    ap_sync_reg_channel_write_tmp1_loc_channel = SC_LOGIC_0;
    ap_sync_reg_channel_write_temp2 = SC_LOGIC_0;
    ap_sync_reg_channel_write_temp1 = SC_LOGIC_0;
    ap_sync_reg_channel_write_temp4 = SC_LOGIC_0;
    ap_sync_reg_channel_write_temp3 = SC_LOGIC_0;
    ap_sync_reg_Block_codeRepl8_proc_U0_ap_ready = SC_LOGIC_0;
    Block_codeRepl8_proc_U0_ap_ready_count = "00";
    ap_sync_reg_Loop_Loop1_proc_U0_ap_ready = SC_LOGIC_0;
    Loop_Loop1_proc_U0_ap_ready_count = "00";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "foo_m_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, data_in_address0, "(port)data_in_address0");
    sc_trace(mVcdFile, data_in_ce0, "(port)data_in_ce0");
    sc_trace(mVcdFile, data_in_d0, "(port)data_in_d0");
    sc_trace(mVcdFile, data_in_q0, "(port)data_in_q0");
    sc_trace(mVcdFile, data_in_we0, "(port)data_in_we0");
    sc_trace(mVcdFile, data_in_address1, "(port)data_in_address1");
    sc_trace(mVcdFile, data_in_ce1, "(port)data_in_ce1");
    sc_trace(mVcdFile, data_in_d1, "(port)data_in_d1");
    sc_trace(mVcdFile, data_in_q1, "(port)data_in_q1");
    sc_trace(mVcdFile, data_in_we1, "(port)data_in_we1");
    sc_trace(mVcdFile, scale_address0, "(port)scale_address0");
    sc_trace(mVcdFile, scale_ce0, "(port)scale_ce0");
    sc_trace(mVcdFile, scale_d0, "(port)scale_d0");
    sc_trace(mVcdFile, scale_q0, "(port)scale_q0");
    sc_trace(mVcdFile, scale_we0, "(port)scale_we0");
    sc_trace(mVcdFile, scale_address1, "(port)scale_address1");
    sc_trace(mVcdFile, scale_ce1, "(port)scale_ce1");
    sc_trace(mVcdFile, scale_d1, "(port)scale_d1");
    sc_trace(mVcdFile, scale_q1, "(port)scale_q1");
    sc_trace(mVcdFile, scale_we1, "(port)scale_we1");
    sc_trace(mVcdFile, data_out_address0, "(port)data_out_address0");
    sc_trace(mVcdFile, data_out_ce0, "(port)data_out_ce0");
    sc_trace(mVcdFile, data_out_d0, "(port)data_out_d0");
    sc_trace(mVcdFile, data_out_q0, "(port)data_out_q0");
    sc_trace(mVcdFile, data_out_we0, "(port)data_out_we0");
    sc_trace(mVcdFile, data_out_address1, "(port)data_out_address1");
    sc_trace(mVcdFile, data_out_ce1, "(port)data_out_ce1");
    sc_trace(mVcdFile, data_out_d1, "(port)data_out_d1");
    sc_trace(mVcdFile, data_out_q1, "(port)data_out_q1");
    sc_trace(mVcdFile, data_out_we1, "(port)data_out_we1");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, temp1_i_q0, "temp1_i_q0");
    sc_trace(mVcdFile, temp1_t_q0, "temp1_t_q0");
    sc_trace(mVcdFile, temp2_i_q0, "temp2_i_q0");
    sc_trace(mVcdFile, temp2_t_q0, "temp2_t_q0");
    sc_trace(mVcdFile, temp3_i_q0, "temp3_i_q0");
    sc_trace(mVcdFile, temp3_t_q0, "temp3_t_q0");
    sc_trace(mVcdFile, temp4_i_q0, "temp4_i_q0");
    sc_trace(mVcdFile, temp4_t_q0, "temp4_t_q0");
    sc_trace(mVcdFile, Block_codeRepl8_proc_U0_ap_start, "Block_codeRepl8_proc_U0_ap_start");
    sc_trace(mVcdFile, Block_codeRepl8_proc_U0_ap_done, "Block_codeRepl8_proc_U0_ap_done");
    sc_trace(mVcdFile, Block_codeRepl8_proc_U0_ap_continue, "Block_codeRepl8_proc_U0_ap_continue");
    sc_trace(mVcdFile, Block_codeRepl8_proc_U0_ap_idle, "Block_codeRepl8_proc_U0_ap_idle");
    sc_trace(mVcdFile, Block_codeRepl8_proc_U0_ap_ready, "Block_codeRepl8_proc_U0_ap_ready");
    sc_trace(mVcdFile, Block_codeRepl8_proc_U0_scale_address0, "Block_codeRepl8_proc_U0_scale_address0");
    sc_trace(mVcdFile, Block_codeRepl8_proc_U0_scale_ce0, "Block_codeRepl8_proc_U0_scale_ce0");
    sc_trace(mVcdFile, Block_codeRepl8_proc_U0_scale_address1, "Block_codeRepl8_proc_U0_scale_address1");
    sc_trace(mVcdFile, Block_codeRepl8_proc_U0_scale_ce1, "Block_codeRepl8_proc_U0_scale_ce1");
    sc_trace(mVcdFile, Block_codeRepl8_proc_U0_tmp3_out_out_din, "Block_codeRepl8_proc_U0_tmp3_out_out_din");
    sc_trace(mVcdFile, Block_codeRepl8_proc_U0_tmp3_out_out_write, "Block_codeRepl8_proc_U0_tmp3_out_out_write");
    sc_trace(mVcdFile, Block_codeRepl8_proc_U0_ap_return_0, "Block_codeRepl8_proc_U0_ap_return_0");
    sc_trace(mVcdFile, Block_codeRepl8_proc_U0_ap_return_1, "Block_codeRepl8_proc_U0_ap_return_1");
    sc_trace(mVcdFile, ap_channel_done_tmp2_loc_channel, "ap_channel_done_tmp2_loc_channel");
    sc_trace(mVcdFile, tmp2_loc_channel_full_n, "tmp2_loc_channel_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_tmp2_loc_channel, "ap_sync_reg_channel_write_tmp2_loc_channel");
    sc_trace(mVcdFile, ap_sync_channel_write_tmp2_loc_channel, "ap_sync_channel_write_tmp2_loc_channel");
    sc_trace(mVcdFile, ap_channel_done_tmp1_loc_channel, "ap_channel_done_tmp1_loc_channel");
    sc_trace(mVcdFile, tmp1_loc_channel_full_n, "tmp1_loc_channel_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_tmp1_loc_channel, "ap_sync_reg_channel_write_tmp1_loc_channel");
    sc_trace(mVcdFile, ap_sync_channel_write_tmp1_loc_channel, "ap_sync_channel_write_tmp1_loc_channel");
    sc_trace(mVcdFile, Loop_Loop1_proc_U0_ap_start, "Loop_Loop1_proc_U0_ap_start");
    sc_trace(mVcdFile, Loop_Loop1_proc_U0_ap_done, "Loop_Loop1_proc_U0_ap_done");
    sc_trace(mVcdFile, Loop_Loop1_proc_U0_ap_continue, "Loop_Loop1_proc_U0_ap_continue");
    sc_trace(mVcdFile, Loop_Loop1_proc_U0_ap_idle, "Loop_Loop1_proc_U0_ap_idle");
    sc_trace(mVcdFile, Loop_Loop1_proc_U0_ap_ready, "Loop_Loop1_proc_U0_ap_ready");
    sc_trace(mVcdFile, Loop_Loop1_proc_U0_data_in_address0, "Loop_Loop1_proc_U0_data_in_address0");
    sc_trace(mVcdFile, Loop_Loop1_proc_U0_data_in_ce0, "Loop_Loop1_proc_U0_data_in_ce0");
    sc_trace(mVcdFile, Loop_Loop1_proc_U0_temp1_address0, "Loop_Loop1_proc_U0_temp1_address0");
    sc_trace(mVcdFile, Loop_Loop1_proc_U0_temp1_ce0, "Loop_Loop1_proc_U0_temp1_ce0");
    sc_trace(mVcdFile, Loop_Loop1_proc_U0_temp1_we0, "Loop_Loop1_proc_U0_temp1_we0");
    sc_trace(mVcdFile, Loop_Loop1_proc_U0_temp1_d0, "Loop_Loop1_proc_U0_temp1_d0");
    sc_trace(mVcdFile, Loop_Loop1_proc_U0_temp2_address0, "Loop_Loop1_proc_U0_temp2_address0");
    sc_trace(mVcdFile, Loop_Loop1_proc_U0_temp2_ce0, "Loop_Loop1_proc_U0_temp2_ce0");
    sc_trace(mVcdFile, Loop_Loop1_proc_U0_temp2_we0, "Loop_Loop1_proc_U0_temp2_we0");
    sc_trace(mVcdFile, Loop_Loop1_proc_U0_temp2_d0, "Loop_Loop1_proc_U0_temp2_d0");
    sc_trace(mVcdFile, ap_channel_done_temp2, "ap_channel_done_temp2");
    sc_trace(mVcdFile, Loop_Loop1_proc_U0_temp2_full_n, "Loop_Loop1_proc_U0_temp2_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_temp2, "ap_sync_reg_channel_write_temp2");
    sc_trace(mVcdFile, ap_sync_channel_write_temp2, "ap_sync_channel_write_temp2");
    sc_trace(mVcdFile, ap_channel_done_temp1, "ap_channel_done_temp1");
    sc_trace(mVcdFile, Loop_Loop1_proc_U0_temp1_full_n, "Loop_Loop1_proc_U0_temp1_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_temp1, "ap_sync_reg_channel_write_temp1");
    sc_trace(mVcdFile, ap_sync_channel_write_temp1, "ap_sync_channel_write_temp1");
    sc_trace(mVcdFile, Loop_Loop2_proc_U0_ap_start, "Loop_Loop2_proc_U0_ap_start");
    sc_trace(mVcdFile, Loop_Loop2_proc_U0_ap_done, "Loop_Loop2_proc_U0_ap_done");
    sc_trace(mVcdFile, Loop_Loop2_proc_U0_ap_continue, "Loop_Loop2_proc_U0_ap_continue");
    sc_trace(mVcdFile, Loop_Loop2_proc_U0_ap_idle, "Loop_Loop2_proc_U0_ap_idle");
    sc_trace(mVcdFile, Loop_Loop2_proc_U0_ap_ready, "Loop_Loop2_proc_U0_ap_ready");
    sc_trace(mVcdFile, Loop_Loop2_proc_U0_temp1_address0, "Loop_Loop2_proc_U0_temp1_address0");
    sc_trace(mVcdFile, Loop_Loop2_proc_U0_temp1_ce0, "Loop_Loop2_proc_U0_temp1_ce0");
    sc_trace(mVcdFile, Loop_Loop2_proc_U0_tmp3_loc_read, "Loop_Loop2_proc_U0_tmp3_loc_read");
    sc_trace(mVcdFile, Loop_Loop2_proc_U0_temp3_address0, "Loop_Loop2_proc_U0_temp3_address0");
    sc_trace(mVcdFile, Loop_Loop2_proc_U0_temp3_ce0, "Loop_Loop2_proc_U0_temp3_ce0");
    sc_trace(mVcdFile, Loop_Loop2_proc_U0_temp3_we0, "Loop_Loop2_proc_U0_temp3_we0");
    sc_trace(mVcdFile, Loop_Loop2_proc_U0_temp3_d0, "Loop_Loop2_proc_U0_temp3_d0");
    sc_trace(mVcdFile, Loop_Loop2_proc_U0_temp2_address0, "Loop_Loop2_proc_U0_temp2_address0");
    sc_trace(mVcdFile, Loop_Loop2_proc_U0_temp2_ce0, "Loop_Loop2_proc_U0_temp2_ce0");
    sc_trace(mVcdFile, Loop_Loop2_proc_U0_temp4_address0, "Loop_Loop2_proc_U0_temp4_address0");
    sc_trace(mVcdFile, Loop_Loop2_proc_U0_temp4_ce0, "Loop_Loop2_proc_U0_temp4_ce0");
    sc_trace(mVcdFile, Loop_Loop2_proc_U0_temp4_we0, "Loop_Loop2_proc_U0_temp4_we0");
    sc_trace(mVcdFile, Loop_Loop2_proc_U0_temp4_d0, "Loop_Loop2_proc_U0_temp4_d0");
    sc_trace(mVcdFile, ap_channel_done_temp4, "ap_channel_done_temp4");
    sc_trace(mVcdFile, Loop_Loop2_proc_U0_temp4_full_n, "Loop_Loop2_proc_U0_temp4_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_temp4, "ap_sync_reg_channel_write_temp4");
    sc_trace(mVcdFile, ap_sync_channel_write_temp4, "ap_sync_channel_write_temp4");
    sc_trace(mVcdFile, ap_channel_done_temp3, "ap_channel_done_temp3");
    sc_trace(mVcdFile, Loop_Loop2_proc_U0_temp3_full_n, "Loop_Loop2_proc_U0_temp3_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_temp3, "ap_sync_reg_channel_write_temp3");
    sc_trace(mVcdFile, ap_sync_channel_write_temp3, "ap_sync_channel_write_temp3");
    sc_trace(mVcdFile, Loop_Loop3_proc_U0_ap_start, "Loop_Loop3_proc_U0_ap_start");
    sc_trace(mVcdFile, Loop_Loop3_proc_U0_ap_done, "Loop_Loop3_proc_U0_ap_done");
    sc_trace(mVcdFile, Loop_Loop3_proc_U0_ap_continue, "Loop_Loop3_proc_U0_ap_continue");
    sc_trace(mVcdFile, Loop_Loop3_proc_U0_ap_idle, "Loop_Loop3_proc_U0_ap_idle");
    sc_trace(mVcdFile, Loop_Loop3_proc_U0_ap_ready, "Loop_Loop3_proc_U0_ap_ready");
    sc_trace(mVcdFile, Loop_Loop3_proc_U0_temp4_address0, "Loop_Loop3_proc_U0_temp4_address0");
    sc_trace(mVcdFile, Loop_Loop3_proc_U0_temp4_ce0, "Loop_Loop3_proc_U0_temp4_ce0");
    sc_trace(mVcdFile, Loop_Loop3_proc_U0_temp3_address0, "Loop_Loop3_proc_U0_temp3_address0");
    sc_trace(mVcdFile, Loop_Loop3_proc_U0_temp3_ce0, "Loop_Loop3_proc_U0_temp3_ce0");
    sc_trace(mVcdFile, Loop_Loop3_proc_U0_data_out_address0, "Loop_Loop3_proc_U0_data_out_address0");
    sc_trace(mVcdFile, Loop_Loop3_proc_U0_data_out_ce0, "Loop_Loop3_proc_U0_data_out_ce0");
    sc_trace(mVcdFile, Loop_Loop3_proc_U0_data_out_we0, "Loop_Loop3_proc_U0_data_out_we0");
    sc_trace(mVcdFile, Loop_Loop3_proc_U0_data_out_d0, "Loop_Loop3_proc_U0_data_out_d0");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, temp1_i_full_n, "temp1_i_full_n");
    sc_trace(mVcdFile, temp1_t_empty_n, "temp1_t_empty_n");
    sc_trace(mVcdFile, temp2_i_full_n, "temp2_i_full_n");
    sc_trace(mVcdFile, temp2_t_empty_n, "temp2_t_empty_n");
    sc_trace(mVcdFile, temp3_i_full_n, "temp3_i_full_n");
    sc_trace(mVcdFile, temp3_t_empty_n, "temp3_t_empty_n");
    sc_trace(mVcdFile, temp4_i_full_n, "temp4_i_full_n");
    sc_trace(mVcdFile, temp4_t_empty_n, "temp4_t_empty_n");
    sc_trace(mVcdFile, tmp3_loc_c_full_n, "tmp3_loc_c_full_n");
    sc_trace(mVcdFile, tmp3_loc_c_dout, "tmp3_loc_c_dout");
    sc_trace(mVcdFile, tmp3_loc_c_empty_n, "tmp3_loc_c_empty_n");
    sc_trace(mVcdFile, tmp1_loc_channel_dout, "tmp1_loc_channel_dout");
    sc_trace(mVcdFile, tmp1_loc_channel_empty_n, "tmp1_loc_channel_empty_n");
    sc_trace(mVcdFile, tmp2_loc_channel_dout, "tmp2_loc_channel_dout");
    sc_trace(mVcdFile, tmp2_loc_channel_empty_n, "tmp2_loc_channel_empty_n");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, ap_sync_reg_Block_codeRepl8_proc_U0_ap_ready, "ap_sync_reg_Block_codeRepl8_proc_U0_ap_ready");
    sc_trace(mVcdFile, ap_sync_Block_codeRepl8_proc_U0_ap_ready, "ap_sync_Block_codeRepl8_proc_U0_ap_ready");
    sc_trace(mVcdFile, Block_codeRepl8_proc_U0_ap_ready_count, "Block_codeRepl8_proc_U0_ap_ready_count");
    sc_trace(mVcdFile, ap_sync_reg_Loop_Loop1_proc_U0_ap_ready, "ap_sync_reg_Loop_Loop1_proc_U0_ap_ready");
    sc_trace(mVcdFile, ap_sync_Loop_Loop1_proc_U0_ap_ready, "ap_sync_Loop_Loop1_proc_U0_ap_ready");
    sc_trace(mVcdFile, Loop_Loop1_proc_U0_ap_ready_count, "Loop_Loop1_proc_U0_ap_ready_count");
    sc_trace(mVcdFile, Block_codeRepl8_proc_U0_start_full_n, "Block_codeRepl8_proc_U0_start_full_n");
    sc_trace(mVcdFile, Block_codeRepl8_proc_U0_start_write, "Block_codeRepl8_proc_U0_start_write");
    sc_trace(mVcdFile, Loop_Loop1_proc_U0_start_full_n, "Loop_Loop1_proc_U0_start_full_n");
    sc_trace(mVcdFile, Loop_Loop1_proc_U0_start_write, "Loop_Loop1_proc_U0_start_write");
    sc_trace(mVcdFile, Loop_Loop2_proc_U0_start_full_n, "Loop_Loop2_proc_U0_start_full_n");
    sc_trace(mVcdFile, Loop_Loop2_proc_U0_start_write, "Loop_Loop2_proc_U0_start_write");
    sc_trace(mVcdFile, Loop_Loop3_proc_U0_start_full_n, "Loop_Loop3_proc_U0_start_full_n");
    sc_trace(mVcdFile, Loop_Loop3_proc_U0_start_write, "Loop_Loop3_proc_U0_start_write");
#endif

    }
    mHdltvinHandle.open("foo_m.hdltvin.dat");
    mHdltvoutHandle.open("foo_m.hdltvout.dat");
}

foo_m::~foo_m() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete temp1_U;
    delete temp2_U;
    delete temp3_U;
    delete temp4_U;
    delete Block_codeRepl8_proc_U0;
    delete Loop_Loop1_proc_U0;
    delete Loop_Loop2_proc_U0;
    delete Loop_Loop3_proc_U0;
    delete tmp3_loc_c_U;
    delete tmp1_loc_channel_U;
    delete tmp2_loc_channel_U;
}

void foo_m::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_logic_1;
}

void foo_m::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_0;
}

void foo_m::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_0;
}

void foo_m::thread_ap_clk_no_reset_() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, Block_codeRepl8_proc_U0_ap_ready.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sync_ready.read()))) {
        Block_codeRepl8_proc_U0_ap_ready_count = (!Block_codeRepl8_proc_U0_ap_ready_count.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(Block_codeRepl8_proc_U0_ap_ready_count.read()) - sc_biguint<2>(ap_const_lv2_1));
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, Block_codeRepl8_proc_U0_ap_ready.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_0, ap_sync_ready.read()))) {
        Block_codeRepl8_proc_U0_ap_ready_count = (!Block_codeRepl8_proc_U0_ap_ready_count.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(Block_codeRepl8_proc_U0_ap_ready_count.read()) + sc_biguint<2>(ap_const_lv2_1));
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sync_ready.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, Loop_Loop1_proc_U0_ap_ready.read()))) {
        Loop_Loop1_proc_U0_ap_ready_count = (!Loop_Loop1_proc_U0_ap_ready_count.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(Loop_Loop1_proc_U0_ap_ready_count.read()) - sc_biguint<2>(ap_const_lv2_1));
    } else if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_sync_ready.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, Loop_Loop1_proc_U0_ap_ready.read()))) {
        Loop_Loop1_proc_U0_ap_ready_count = (!Loop_Loop1_proc_U0_ap_ready_count.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(Loop_Loop1_proc_U0_ap_ready_count.read()) + sc_biguint<2>(ap_const_lv2_1));
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_Block_codeRepl8_proc_U0_ap_ready = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (ap_start.read() & 
             ap_sync_ready.read()))) {
            ap_sync_reg_Block_codeRepl8_proc_U0_ap_ready = ap_const_logic_0;
        } else {
            ap_sync_reg_Block_codeRepl8_proc_U0_ap_ready = ap_sync_Block_codeRepl8_proc_U0_ap_ready.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_Loop_Loop1_proc_U0_ap_ready = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (ap_start.read() & 
             ap_sync_ready.read()))) {
            ap_sync_reg_Loop_Loop1_proc_U0_ap_ready = ap_const_logic_0;
        } else {
            ap_sync_reg_Loop_Loop1_proc_U0_ap_ready = ap_sync_Loop_Loop1_proc_U0_ap_ready.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_temp1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (Loop_Loop1_proc_U0_ap_done.read() & 
             Loop_Loop1_proc_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_temp1 = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_temp1 = ap_sync_channel_write_temp1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_temp2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (Loop_Loop1_proc_U0_ap_done.read() & 
             Loop_Loop1_proc_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_temp2 = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_temp2 = ap_sync_channel_write_temp2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_temp3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (Loop_Loop2_proc_U0_ap_done.read() & 
             Loop_Loop2_proc_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_temp3 = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_temp3 = ap_sync_channel_write_temp3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_temp4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (Loop_Loop2_proc_U0_ap_done.read() & 
             Loop_Loop2_proc_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_temp4 = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_temp4 = ap_sync_channel_write_temp4.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_tmp1_loc_channel = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (Block_codeRepl8_proc_U0_ap_done.read() & 
             Block_codeRepl8_proc_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_tmp1_loc_channel = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_tmp1_loc_channel = ap_sync_channel_write_tmp1_loc_channel.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_tmp2_loc_channel = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (Block_codeRepl8_proc_U0_ap_done.read() & 
             Block_codeRepl8_proc_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_tmp2_loc_channel = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_tmp2_loc_channel = ap_sync_channel_write_tmp2_loc_channel.read();
        }
    }
}

void foo_m::thread_Block_codeRepl8_proc_U0_ap_continue() {
    Block_codeRepl8_proc_U0_ap_continue = (ap_sync_channel_write_tmp2_loc_channel.read() & ap_sync_channel_write_tmp1_loc_channel.read());
}

void foo_m::thread_Block_codeRepl8_proc_U0_ap_start() {
    Block_codeRepl8_proc_U0_ap_start = (ap_start.read() & (ap_sync_reg_Block_codeRepl8_proc_U0_ap_ready.read() ^ 
  ap_const_logic_1));
}

void foo_m::thread_Block_codeRepl8_proc_U0_start_full_n() {
    Block_codeRepl8_proc_U0_start_full_n = ap_const_logic_1;
}

void foo_m::thread_Block_codeRepl8_proc_U0_start_write() {
    Block_codeRepl8_proc_U0_start_write = ap_const_logic_0;
}

void foo_m::thread_Loop_Loop1_proc_U0_ap_continue() {
    Loop_Loop1_proc_U0_ap_continue = (ap_sync_channel_write_temp2.read() & ap_sync_channel_write_temp1.read());
}

void foo_m::thread_Loop_Loop1_proc_U0_ap_start() {
    Loop_Loop1_proc_U0_ap_start = (ap_start.read() & tmp1_loc_channel_empty_n.read() & tmp2_loc_channel_empty_n.read() & (ap_sync_reg_Loop_Loop1_proc_U0_ap_ready.read() ^ 
  ap_const_logic_1));
}

void foo_m::thread_Loop_Loop1_proc_U0_start_full_n() {
    Loop_Loop1_proc_U0_start_full_n = ap_const_logic_1;
}

void foo_m::thread_Loop_Loop1_proc_U0_start_write() {
    Loop_Loop1_proc_U0_start_write = ap_const_logic_0;
}

void foo_m::thread_Loop_Loop1_proc_U0_temp1_full_n() {
    Loop_Loop1_proc_U0_temp1_full_n = temp1_i_full_n.read();
}

void foo_m::thread_Loop_Loop1_proc_U0_temp2_full_n() {
    Loop_Loop1_proc_U0_temp2_full_n = temp2_i_full_n.read();
}

void foo_m::thread_Loop_Loop2_proc_U0_ap_continue() {
    Loop_Loop2_proc_U0_ap_continue = (ap_sync_channel_write_temp4.read() & ap_sync_channel_write_temp3.read());
}

void foo_m::thread_Loop_Loop2_proc_U0_ap_start() {
    Loop_Loop2_proc_U0_ap_start = (temp1_t_empty_n.read() & temp2_t_empty_n.read());
}

void foo_m::thread_Loop_Loop2_proc_U0_start_full_n() {
    Loop_Loop2_proc_U0_start_full_n = ap_const_logic_1;
}

void foo_m::thread_Loop_Loop2_proc_U0_start_write() {
    Loop_Loop2_proc_U0_start_write = ap_const_logic_0;
}

void foo_m::thread_Loop_Loop2_proc_U0_temp3_full_n() {
    Loop_Loop2_proc_U0_temp3_full_n = temp3_i_full_n.read();
}

void foo_m::thread_Loop_Loop2_proc_U0_temp4_full_n() {
    Loop_Loop2_proc_U0_temp4_full_n = temp4_i_full_n.read();
}

void foo_m::thread_Loop_Loop3_proc_U0_ap_continue() {
    Loop_Loop3_proc_U0_ap_continue = ap_const_logic_1;
}

void foo_m::thread_Loop_Loop3_proc_U0_ap_start() {
    Loop_Loop3_proc_U0_ap_start = (temp3_t_empty_n.read() & temp4_t_empty_n.read());
}

void foo_m::thread_Loop_Loop3_proc_U0_start_full_n() {
    Loop_Loop3_proc_U0_start_full_n = ap_const_logic_1;
}

void foo_m::thread_Loop_Loop3_proc_U0_start_write() {
    Loop_Loop3_proc_U0_start_write = ap_const_logic_0;
}

void foo_m::thread_ap_channel_done_temp1() {
    ap_channel_done_temp1 = (Loop_Loop1_proc_U0_ap_done.read() & (ap_sync_reg_channel_write_temp1.read() ^ 
  ap_const_logic_1));
}

void foo_m::thread_ap_channel_done_temp2() {
    ap_channel_done_temp2 = (Loop_Loop1_proc_U0_ap_done.read() & (ap_sync_reg_channel_write_temp2.read() ^ 
  ap_const_logic_1));
}

void foo_m::thread_ap_channel_done_temp3() {
    ap_channel_done_temp3 = (Loop_Loop2_proc_U0_ap_done.read() & (ap_sync_reg_channel_write_temp3.read() ^ 
  ap_const_logic_1));
}

void foo_m::thread_ap_channel_done_temp4() {
    ap_channel_done_temp4 = (Loop_Loop2_proc_U0_ap_done.read() & (ap_sync_reg_channel_write_temp4.read() ^ 
  ap_const_logic_1));
}

void foo_m::thread_ap_channel_done_tmp1_loc_channel() {
    ap_channel_done_tmp1_loc_channel = (Block_codeRepl8_proc_U0_ap_done.read() & (ap_sync_reg_channel_write_tmp1_loc_channel.read() ^ 
  ap_const_logic_1));
}

void foo_m::thread_ap_channel_done_tmp2_loc_channel() {
    ap_channel_done_tmp2_loc_channel = (Block_codeRepl8_proc_U0_ap_done.read() & (ap_sync_reg_channel_write_tmp2_loc_channel.read() ^ 
  ap_const_logic_1));
}

void foo_m::thread_ap_done() {
    ap_done = Loop_Loop3_proc_U0_ap_done.read();
}

void foo_m::thread_ap_idle() {
    ap_idle = (Block_codeRepl8_proc_U0_ap_idle.read() & Loop_Loop1_proc_U0_ap_idle.read() & Loop_Loop2_proc_U0_ap_idle.read() & Loop_Loop3_proc_U0_ap_idle.read() & (tmp1_loc_channel_empty_n.read() ^ 
  ap_const_logic_1) & (tmp2_loc_channel_empty_n.read() ^ 
  ap_const_logic_1) & (temp1_t_empty_n.read() ^ 
  ap_const_logic_1) & (temp2_t_empty_n.read() ^ 
  ap_const_logic_1) & (temp3_t_empty_n.read() ^ 
  ap_const_logic_1) & (temp4_t_empty_n.read() ^ 
  ap_const_logic_1));
}

void foo_m::thread_ap_ready() {
    ap_ready = ap_sync_ready.read();
}

void foo_m::thread_ap_sync_Block_codeRepl8_proc_U0_ap_ready() {
    ap_sync_Block_codeRepl8_proc_U0_ap_ready = (Block_codeRepl8_proc_U0_ap_ready.read() | ap_sync_reg_Block_codeRepl8_proc_U0_ap_ready.read());
}

void foo_m::thread_ap_sync_Loop_Loop1_proc_U0_ap_ready() {
    ap_sync_Loop_Loop1_proc_U0_ap_ready = (Loop_Loop1_proc_U0_ap_ready.read() | ap_sync_reg_Loop_Loop1_proc_U0_ap_ready.read());
}

void foo_m::thread_ap_sync_channel_write_temp1() {
    ap_sync_channel_write_temp1 = ((ap_channel_done_temp1.read() & 
  Loop_Loop1_proc_U0_temp1_full_n.read()) | ap_sync_reg_channel_write_temp1.read());
}

void foo_m::thread_ap_sync_channel_write_temp2() {
    ap_sync_channel_write_temp2 = ((ap_channel_done_temp2.read() & 
  Loop_Loop1_proc_U0_temp2_full_n.read()) | ap_sync_reg_channel_write_temp2.read());
}

void foo_m::thread_ap_sync_channel_write_temp3() {
    ap_sync_channel_write_temp3 = ((ap_channel_done_temp3.read() & 
  Loop_Loop2_proc_U0_temp3_full_n.read()) | ap_sync_reg_channel_write_temp3.read());
}

void foo_m::thread_ap_sync_channel_write_temp4() {
    ap_sync_channel_write_temp4 = ((ap_channel_done_temp4.read() & 
  Loop_Loop2_proc_U0_temp4_full_n.read()) | ap_sync_reg_channel_write_temp4.read());
}

void foo_m::thread_ap_sync_channel_write_tmp1_loc_channel() {
    ap_sync_channel_write_tmp1_loc_channel = ((ap_channel_done_tmp1_loc_channel.read() & 
  tmp1_loc_channel_full_n.read()) | ap_sync_reg_channel_write_tmp1_loc_channel.read());
}

void foo_m::thread_ap_sync_channel_write_tmp2_loc_channel() {
    ap_sync_channel_write_tmp2_loc_channel = ((ap_channel_done_tmp2_loc_channel.read() & 
  tmp2_loc_channel_full_n.read()) | ap_sync_reg_channel_write_tmp2_loc_channel.read());
}

void foo_m::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_1;
}

void foo_m::thread_ap_sync_done() {
    ap_sync_done = Loop_Loop3_proc_U0_ap_done.read();
}

void foo_m::thread_ap_sync_ready() {
    ap_sync_ready = (ap_sync_Block_codeRepl8_proc_U0_ap_ready.read() & ap_sync_Loop_Loop1_proc_U0_ap_ready.read());
}

void foo_m::thread_data_in_address0() {
    data_in_address0 = Loop_Loop1_proc_U0_data_in_address0.read();
}

void foo_m::thread_data_in_address1() {
    data_in_address1 = ap_const_lv14_0;
}

void foo_m::thread_data_in_ce0() {
    data_in_ce0 = Loop_Loop1_proc_U0_data_in_ce0.read();
}

void foo_m::thread_data_in_ce1() {
    data_in_ce1 = ap_const_logic_0;
}

void foo_m::thread_data_in_d0() {
    data_in_d0 = ap_const_lv32_0;
}

void foo_m::thread_data_in_d1() {
    data_in_d1 = ap_const_lv32_0;
}

void foo_m::thread_data_in_we0() {
    data_in_we0 = ap_const_logic_0;
}

void foo_m::thread_data_in_we1() {
    data_in_we1 = ap_const_logic_0;
}

void foo_m::thread_data_out_address0() {
    data_out_address0 = Loop_Loop3_proc_U0_data_out_address0.read();
}

void foo_m::thread_data_out_address1() {
    data_out_address1 = ap_const_lv14_0;
}

void foo_m::thread_data_out_ce0() {
    data_out_ce0 = Loop_Loop3_proc_U0_data_out_ce0.read();
}

void foo_m::thread_data_out_ce1() {
    data_out_ce1 = ap_const_logic_0;
}

void foo_m::thread_data_out_d0() {
    data_out_d0 = Loop_Loop3_proc_U0_data_out_d0.read();
}

void foo_m::thread_data_out_d1() {
    data_out_d1 = ap_const_lv32_0;
}

void foo_m::thread_data_out_we0() {
    data_out_we0 = Loop_Loop3_proc_U0_data_out_we0.read();
}

void foo_m::thread_data_out_we1() {
    data_out_we1 = ap_const_logic_0;
}

void foo_m::thread_scale_address0() {
    scale_address0 = Block_codeRepl8_proc_U0_scale_address0.read();
}

void foo_m::thread_scale_address1() {
    scale_address1 = Block_codeRepl8_proc_U0_scale_address1.read();
}

void foo_m::thread_scale_ce0() {
    scale_ce0 = Block_codeRepl8_proc_U0_scale_ce0.read();
}

void foo_m::thread_scale_ce1() {
    scale_ce1 = Block_codeRepl8_proc_U0_scale_ce1.read();
}

void foo_m::thread_scale_d0() {
    scale_d0 = ap_const_lv32_0;
}

void foo_m::thread_scale_d1() {
    scale_d1 = ap_const_lv32_0;
}

void foo_m::thread_scale_we0() {
    scale_we0 = ap_const_logic_0;
}

void foo_m::thread_scale_we1() {
    scale_we1 = ap_const_logic_0;
}

void foo_m::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"data_in_address0\" :  \"" << data_in_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_in_ce0\" :  \"" << data_in_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_in_d0\" :  \"" << data_in_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_in_q0\" :  \"" << data_in_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_in_we0\" :  \"" << data_in_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_in_address1\" :  \"" << data_in_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_in_ce1\" :  \"" << data_in_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_in_d1\" :  \"" << data_in_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_in_q1\" :  \"" << data_in_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_in_we1\" :  \"" << data_in_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"scale_address0\" :  \"" << scale_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"scale_ce0\" :  \"" << scale_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"scale_d0\" :  \"" << scale_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"scale_q0\" :  \"" << scale_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"scale_we0\" :  \"" << scale_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"scale_address1\" :  \"" << scale_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"scale_ce1\" :  \"" << scale_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"scale_d1\" :  \"" << scale_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"scale_q1\" :  \"" << scale_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"scale_we1\" :  \"" << scale_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_address0\" :  \"" << data_out_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_ce0\" :  \"" << data_out_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_d0\" :  \"" << data_out_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_out_q0\" :  \"" << data_out_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_we0\" :  \"" << data_out_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_address1\" :  \"" << data_out_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_ce1\" :  \"" << data_out_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_d1\" :  \"" << data_out_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_out_q1\" :  \"" << data_out_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_we1\" :  \"" << data_out_we1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

