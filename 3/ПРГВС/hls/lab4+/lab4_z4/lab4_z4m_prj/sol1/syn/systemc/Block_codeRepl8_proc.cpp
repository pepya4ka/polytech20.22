// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Block_codeRepl8_proc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Block_codeRepl8_proc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Block_codeRepl8_proc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> Block_codeRepl8_proc::ap_ST_fsm_state1 = "1";
const sc_lv<3> Block_codeRepl8_proc::ap_ST_fsm_state2 = "10";
const sc_lv<3> Block_codeRepl8_proc::ap_ST_fsm_state3 = "100";
const sc_lv<32> Block_codeRepl8_proc::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Block_codeRepl8_proc::ap_const_lv32_2 = "10";
const sc_lv<32> Block_codeRepl8_proc::ap_const_lv32_1 = "1";
const sc_lv<64> Block_codeRepl8_proc::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> Block_codeRepl8_proc::ap_const_lv64_1 = "1";
const sc_lv<64> Block_codeRepl8_proc::ap_const_lv64_2 = "10";
const bool Block_codeRepl8_proc::ap_const_boolean_1 = true;

Block_codeRepl8_proc::Block_codeRepl8_proc(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( tmp3_out_out_full_n );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( tmp3_out_out_full_n );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( tmp3_out_out_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp1_reg_96 );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( scale_q0 );
    sensitive << ( tmp3_out_out_full_n );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_scale_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_scale_address1);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_scale_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_scale_ce1);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_tmp3_out_out_blk_n);
    sensitive << ( tmp3_out_out_full_n );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp3_out_out_din);
    sensitive << ( scale_q1 );
    sensitive << ( tmp3_out_out_full_n );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp3_out_out_write);
    sensitive << ( tmp3_out_out_full_n );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp3_out_out_full_n );
    sensitive << ( ap_CS_fsm_state3 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Block_codeRepl8_proc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, scale_address0, "(port)scale_address0");
    sc_trace(mVcdFile, scale_ce0, "(port)scale_ce0");
    sc_trace(mVcdFile, scale_q0, "(port)scale_q0");
    sc_trace(mVcdFile, scale_address1, "(port)scale_address1");
    sc_trace(mVcdFile, scale_ce1, "(port)scale_ce1");
    sc_trace(mVcdFile, scale_q1, "(port)scale_q1");
    sc_trace(mVcdFile, tmp3_out_out_din, "(port)tmp3_out_out_din");
    sc_trace(mVcdFile, tmp3_out_out_full_n, "(port)tmp3_out_out_full_n");
    sc_trace(mVcdFile, tmp3_out_out_write, "(port)tmp3_out_out_write");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, tmp3_out_out_blk_n, "tmp3_out_out_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, tmp1_reg_96, "tmp1_reg_96");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

Block_codeRepl8_proc::~Block_codeRepl8_proc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Block_codeRepl8_proc::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                    esl_seteq<1,1,1>(tmp3_out_out_full_n.read(), ap_const_logic_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        tmp1_reg_96 = scale_q0.read();
    }
}

void Block_codeRepl8_proc::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Block_codeRepl8_proc::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Block_codeRepl8_proc::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Block_codeRepl8_proc::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void Block_codeRepl8_proc::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp3_out_out_full_n.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Block_codeRepl8_proc::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Block_codeRepl8_proc::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp3_out_out_full_n.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Block_codeRepl8_proc::thread_ap_return_0() {
    ap_return_0 = tmp1_reg_96.read();
}

void Block_codeRepl8_proc::thread_ap_return_1() {
    ap_return_1 = scale_q0.read();
}

void Block_codeRepl8_proc::thread_scale_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        scale_address0 =  (sc_lv<2>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        scale_address0 =  (sc_lv<2>) (ap_const_lv64_0);
    } else {
        scale_address0 = "XX";
    }
}

void Block_codeRepl8_proc::thread_scale_address1() {
    scale_address1 =  (sc_lv<2>) (ap_const_lv64_2);
}

void Block_codeRepl8_proc::thread_scale_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        scale_ce0 = ap_const_logic_1;
    } else {
        scale_ce0 = ap_const_logic_0;
    }
}

void Block_codeRepl8_proc::thread_scale_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        scale_ce1 = ap_const_logic_1;
    } else {
        scale_ce1 = ap_const_logic_0;
    }
}

void Block_codeRepl8_proc::thread_tmp3_out_out_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        tmp3_out_out_blk_n = tmp3_out_out_full_n.read();
    } else {
        tmp3_out_out_blk_n = ap_const_logic_1;
    }
}

void Block_codeRepl8_proc::thread_tmp3_out_out_din() {
    tmp3_out_out_din = scale_q1.read();
}

void Block_codeRepl8_proc::thread_tmp3_out_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp3_out_out_full_n.read(), ap_const_logic_1))) {
        tmp3_out_out_write = ap_const_logic_1;
    } else {
        tmp3_out_out_write = ap_const_logic_0;
    }
}

void Block_codeRepl8_proc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmp3_out_out_full_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<3>) ("XXX");
            break;
    }
}

}

