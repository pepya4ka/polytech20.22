// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _foo_m_HH_
#define _foo_m_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Block_codeRepl8_proc.h"
#include "Loop_Loop1_proc.h"
#include "Loop_Loop2_proc.h"
#include "Loop_Loop3_proc.h"
#include "foo_m_temp1.h"
#include "fifo_w32_d3_A.h"
#include "fifo_w32_d2_A.h"

namespace ap_rtl {

struct foo_m : public sc_module {
    // Port declarations 36
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_out< sc_lv<14> > data_in_address0;
    sc_out< sc_logic > data_in_ce0;
    sc_out< sc_lv<32> > data_in_d0;
    sc_in< sc_lv<32> > data_in_q0;
    sc_out< sc_logic > data_in_we0;
    sc_out< sc_lv<14> > data_in_address1;
    sc_out< sc_logic > data_in_ce1;
    sc_out< sc_lv<32> > data_in_d1;
    sc_in< sc_lv<32> > data_in_q1;
    sc_out< sc_logic > data_in_we1;
    sc_out< sc_lv<2> > scale_address0;
    sc_out< sc_logic > scale_ce0;
    sc_out< sc_lv<32> > scale_d0;
    sc_in< sc_lv<32> > scale_q0;
    sc_out< sc_logic > scale_we0;
    sc_out< sc_lv<2> > scale_address1;
    sc_out< sc_logic > scale_ce1;
    sc_out< sc_lv<32> > scale_d1;
    sc_in< sc_lv<32> > scale_q1;
    sc_out< sc_logic > scale_we1;
    sc_out< sc_lv<14> > data_out_address0;
    sc_out< sc_logic > data_out_ce0;
    sc_out< sc_lv<32> > data_out_d0;
    sc_in< sc_lv<32> > data_out_q0;
    sc_out< sc_logic > data_out_we0;
    sc_out< sc_lv<14> > data_out_address1;
    sc_out< sc_logic > data_out_ce1;
    sc_out< sc_lv<32> > data_out_d1;
    sc_in< sc_lv<32> > data_out_q1;
    sc_out< sc_logic > data_out_we1;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;
    sc_signal< sc_logic > ap_var_for_const2;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_lv<32> > ap_var_for_const1;


    // Module declarations
    foo_m(sc_module_name name);
    SC_HAS_PROCESS(foo_m);

    ~foo_m();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    foo_m_temp1* temp1_U;
    foo_m_temp1* temp2_U;
    foo_m_temp1* temp3_U;
    foo_m_temp1* temp4_U;
    Block_codeRepl8_proc* Block_codeRepl8_proc_U0;
    Loop_Loop1_proc* Loop_Loop1_proc_U0;
    Loop_Loop2_proc* Loop_Loop2_proc_U0;
    Loop_Loop3_proc* Loop_Loop3_proc_U0;
    fifo_w32_d3_A* tmp3_loc_c_U;
    fifo_w32_d2_A* tmp1_loc_channel_U;
    fifo_w32_d2_A* tmp2_loc_channel_U;
    sc_signal< sc_lv<32> > temp1_i_q0;
    sc_signal< sc_lv<32> > temp1_t_q0;
    sc_signal< sc_lv<32> > temp2_i_q0;
    sc_signal< sc_lv<32> > temp2_t_q0;
    sc_signal< sc_lv<32> > temp3_i_q0;
    sc_signal< sc_lv<32> > temp3_t_q0;
    sc_signal< sc_lv<32> > temp4_i_q0;
    sc_signal< sc_lv<32> > temp4_t_q0;
    sc_signal< sc_logic > Block_codeRepl8_proc_U0_ap_start;
    sc_signal< sc_logic > Block_codeRepl8_proc_U0_ap_done;
    sc_signal< sc_logic > Block_codeRepl8_proc_U0_ap_continue;
    sc_signal< sc_logic > Block_codeRepl8_proc_U0_ap_idle;
    sc_signal< sc_logic > Block_codeRepl8_proc_U0_ap_ready;
    sc_signal< sc_lv<2> > Block_codeRepl8_proc_U0_scale_address0;
    sc_signal< sc_logic > Block_codeRepl8_proc_U0_scale_ce0;
    sc_signal< sc_lv<2> > Block_codeRepl8_proc_U0_scale_address1;
    sc_signal< sc_logic > Block_codeRepl8_proc_U0_scale_ce1;
    sc_signal< sc_lv<32> > Block_codeRepl8_proc_U0_tmp3_out_out_din;
    sc_signal< sc_logic > Block_codeRepl8_proc_U0_tmp3_out_out_write;
    sc_signal< sc_lv<32> > Block_codeRepl8_proc_U0_ap_return_0;
    sc_signal< sc_lv<32> > Block_codeRepl8_proc_U0_ap_return_1;
    sc_signal< sc_logic > ap_channel_done_tmp2_loc_channel;
    sc_signal< sc_logic > tmp2_loc_channel_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_tmp2_loc_channel;
    sc_signal< sc_logic > ap_sync_channel_write_tmp2_loc_channel;
    sc_signal< sc_logic > ap_channel_done_tmp1_loc_channel;
    sc_signal< sc_logic > tmp1_loc_channel_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_tmp1_loc_channel;
    sc_signal< sc_logic > ap_sync_channel_write_tmp1_loc_channel;
    sc_signal< sc_logic > Loop_Loop1_proc_U0_ap_start;
    sc_signal< sc_logic > Loop_Loop1_proc_U0_ap_done;
    sc_signal< sc_logic > Loop_Loop1_proc_U0_ap_continue;
    sc_signal< sc_logic > Loop_Loop1_proc_U0_ap_idle;
    sc_signal< sc_logic > Loop_Loop1_proc_U0_ap_ready;
    sc_signal< sc_lv<14> > Loop_Loop1_proc_U0_data_in_address0;
    sc_signal< sc_logic > Loop_Loop1_proc_U0_data_in_ce0;
    sc_signal< sc_lv<14> > Loop_Loop1_proc_U0_temp1_address0;
    sc_signal< sc_logic > Loop_Loop1_proc_U0_temp1_ce0;
    sc_signal< sc_logic > Loop_Loop1_proc_U0_temp1_we0;
    sc_signal< sc_lv<32> > Loop_Loop1_proc_U0_temp1_d0;
    sc_signal< sc_lv<14> > Loop_Loop1_proc_U0_temp2_address0;
    sc_signal< sc_logic > Loop_Loop1_proc_U0_temp2_ce0;
    sc_signal< sc_logic > Loop_Loop1_proc_U0_temp2_we0;
    sc_signal< sc_lv<32> > Loop_Loop1_proc_U0_temp2_d0;
    sc_signal< sc_logic > ap_channel_done_temp2;
    sc_signal< sc_logic > Loop_Loop1_proc_U0_temp2_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_temp2;
    sc_signal< sc_logic > ap_sync_channel_write_temp2;
    sc_signal< sc_logic > ap_channel_done_temp1;
    sc_signal< sc_logic > Loop_Loop1_proc_U0_temp1_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_temp1;
    sc_signal< sc_logic > ap_sync_channel_write_temp1;
    sc_signal< sc_logic > Loop_Loop2_proc_U0_ap_start;
    sc_signal< sc_logic > Loop_Loop2_proc_U0_ap_done;
    sc_signal< sc_logic > Loop_Loop2_proc_U0_ap_continue;
    sc_signal< sc_logic > Loop_Loop2_proc_U0_ap_idle;
    sc_signal< sc_logic > Loop_Loop2_proc_U0_ap_ready;
    sc_signal< sc_lv<14> > Loop_Loop2_proc_U0_temp1_address0;
    sc_signal< sc_logic > Loop_Loop2_proc_U0_temp1_ce0;
    sc_signal< sc_logic > Loop_Loop2_proc_U0_tmp3_loc_read;
    sc_signal< sc_lv<14> > Loop_Loop2_proc_U0_temp3_address0;
    sc_signal< sc_logic > Loop_Loop2_proc_U0_temp3_ce0;
    sc_signal< sc_logic > Loop_Loop2_proc_U0_temp3_we0;
    sc_signal< sc_lv<32> > Loop_Loop2_proc_U0_temp3_d0;
    sc_signal< sc_lv<14> > Loop_Loop2_proc_U0_temp2_address0;
    sc_signal< sc_logic > Loop_Loop2_proc_U0_temp2_ce0;
    sc_signal< sc_lv<14> > Loop_Loop2_proc_U0_temp4_address0;
    sc_signal< sc_logic > Loop_Loop2_proc_U0_temp4_ce0;
    sc_signal< sc_logic > Loop_Loop2_proc_U0_temp4_we0;
    sc_signal< sc_lv<32> > Loop_Loop2_proc_U0_temp4_d0;
    sc_signal< sc_logic > ap_channel_done_temp4;
    sc_signal< sc_logic > Loop_Loop2_proc_U0_temp4_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_temp4;
    sc_signal< sc_logic > ap_sync_channel_write_temp4;
    sc_signal< sc_logic > ap_channel_done_temp3;
    sc_signal< sc_logic > Loop_Loop2_proc_U0_temp3_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_temp3;
    sc_signal< sc_logic > ap_sync_channel_write_temp3;
    sc_signal< sc_logic > Loop_Loop3_proc_U0_ap_start;
    sc_signal< sc_logic > Loop_Loop3_proc_U0_ap_done;
    sc_signal< sc_logic > Loop_Loop3_proc_U0_ap_continue;
    sc_signal< sc_logic > Loop_Loop3_proc_U0_ap_idle;
    sc_signal< sc_logic > Loop_Loop3_proc_U0_ap_ready;
    sc_signal< sc_lv<14> > Loop_Loop3_proc_U0_temp4_address0;
    sc_signal< sc_logic > Loop_Loop3_proc_U0_temp4_ce0;
    sc_signal< sc_lv<14> > Loop_Loop3_proc_U0_temp3_address0;
    sc_signal< sc_logic > Loop_Loop3_proc_U0_temp3_ce0;
    sc_signal< sc_lv<14> > Loop_Loop3_proc_U0_data_out_address0;
    sc_signal< sc_logic > Loop_Loop3_proc_U0_data_out_ce0;
    sc_signal< sc_logic > Loop_Loop3_proc_U0_data_out_we0;
    sc_signal< sc_lv<32> > Loop_Loop3_proc_U0_data_out_d0;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > temp1_i_full_n;
    sc_signal< sc_logic > temp1_t_empty_n;
    sc_signal< sc_logic > temp2_i_full_n;
    sc_signal< sc_logic > temp2_t_empty_n;
    sc_signal< sc_logic > temp3_i_full_n;
    sc_signal< sc_logic > temp3_t_empty_n;
    sc_signal< sc_logic > temp4_i_full_n;
    sc_signal< sc_logic > temp4_t_empty_n;
    sc_signal< sc_logic > tmp3_loc_c_full_n;
    sc_signal< sc_lv<32> > tmp3_loc_c_dout;
    sc_signal< sc_logic > tmp3_loc_c_empty_n;
    sc_signal< sc_lv<32> > tmp1_loc_channel_dout;
    sc_signal< sc_logic > tmp1_loc_channel_empty_n;
    sc_signal< sc_lv<32> > tmp2_loc_channel_dout;
    sc_signal< sc_logic > tmp2_loc_channel_empty_n;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_logic > ap_sync_reg_Block_codeRepl8_proc_U0_ap_ready;
    sc_signal< sc_logic > ap_sync_Block_codeRepl8_proc_U0_ap_ready;
    sc_signal< sc_lv<2> > Block_codeRepl8_proc_U0_ap_ready_count;
    sc_signal< sc_logic > ap_sync_reg_Loop_Loop1_proc_U0_ap_ready;
    sc_signal< sc_logic > ap_sync_Loop_Loop1_proc_U0_ap_ready;
    sc_signal< sc_lv<2> > Loop_Loop1_proc_U0_ap_ready_count;
    sc_signal< sc_logic > Block_codeRepl8_proc_U0_start_full_n;
    sc_signal< sc_logic > Block_codeRepl8_proc_U0_start_write;
    sc_signal< sc_logic > Loop_Loop1_proc_U0_start_full_n;
    sc_signal< sc_logic > Loop_Loop1_proc_U0_start_write;
    sc_signal< sc_logic > Loop_Loop2_proc_U0_start_full_n;
    sc_signal< sc_logic > Loop_Loop2_proc_U0_start_write;
    sc_signal< sc_logic > Loop_Loop3_proc_U0_start_full_n;
    sc_signal< sc_logic > Loop_Loop3_proc_U0_start_write;
    static const sc_logic ap_const_logic_1;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_clk_no_reset_();
    void thread_Block_codeRepl8_proc_U0_ap_continue();
    void thread_Block_codeRepl8_proc_U0_ap_start();
    void thread_Block_codeRepl8_proc_U0_start_full_n();
    void thread_Block_codeRepl8_proc_U0_start_write();
    void thread_Loop_Loop1_proc_U0_ap_continue();
    void thread_Loop_Loop1_proc_U0_ap_start();
    void thread_Loop_Loop1_proc_U0_start_full_n();
    void thread_Loop_Loop1_proc_U0_start_write();
    void thread_Loop_Loop1_proc_U0_temp1_full_n();
    void thread_Loop_Loop1_proc_U0_temp2_full_n();
    void thread_Loop_Loop2_proc_U0_ap_continue();
    void thread_Loop_Loop2_proc_U0_ap_start();
    void thread_Loop_Loop2_proc_U0_start_full_n();
    void thread_Loop_Loop2_proc_U0_start_write();
    void thread_Loop_Loop2_proc_U0_temp3_full_n();
    void thread_Loop_Loop2_proc_U0_temp4_full_n();
    void thread_Loop_Loop3_proc_U0_ap_continue();
    void thread_Loop_Loop3_proc_U0_ap_start();
    void thread_Loop_Loop3_proc_U0_start_full_n();
    void thread_Loop_Loop3_proc_U0_start_write();
    void thread_ap_channel_done_temp1();
    void thread_ap_channel_done_temp2();
    void thread_ap_channel_done_temp3();
    void thread_ap_channel_done_temp4();
    void thread_ap_channel_done_tmp1_loc_channel();
    void thread_ap_channel_done_tmp2_loc_channel();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sync_Block_codeRepl8_proc_U0_ap_ready();
    void thread_ap_sync_Loop_Loop1_proc_U0_ap_ready();
    void thread_ap_sync_channel_write_temp1();
    void thread_ap_sync_channel_write_temp2();
    void thread_ap_sync_channel_write_temp3();
    void thread_ap_sync_channel_write_temp4();
    void thread_ap_sync_channel_write_tmp1_loc_channel();
    void thread_ap_sync_channel_write_tmp2_loc_channel();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_data_in_address0();
    void thread_data_in_address1();
    void thread_data_in_ce0();
    void thread_data_in_ce1();
    void thread_data_in_d0();
    void thread_data_in_d1();
    void thread_data_in_we0();
    void thread_data_in_we1();
    void thread_data_out_address0();
    void thread_data_out_address1();
    void thread_data_out_ce0();
    void thread_data_out_ce1();
    void thread_data_out_d0();
    void thread_data_out_d1();
    void thread_data_out_we0();
    void thread_data_out_we1();
    void thread_scale_address0();
    void thread_scale_address1();
    void thread_scale_ce0();
    void thread_scale_ce1();
    void thread_scale_d0();
    void thread_scale_d1();
    void thread_scale_we0();
    void thread_scale_we1();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
