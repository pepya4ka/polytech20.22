-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lab3_z2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    D_I_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    D_I_ce0 : OUT STD_LOGIC;
    D_I_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_I_req_din : OUT STD_LOGIC;
    C_I_req_full_n : IN STD_LOGIC;
    C_I_req_write : OUT STD_LOGIC;
    C_I_rsp_empty_n : IN STD_LOGIC;
    C_I_rsp_read : OUT STD_LOGIC;
    C_I_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_I_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    C_I_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_I_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    D_O_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    D_O_ce0 : OUT STD_LOGIC;
    D_O_we0 : OUT STD_LOGIC;
    D_O_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of lab3_z2 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "lab3_z2,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12t-csg325-1Q,HLS_INPUT_CLOCK=6.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.900000,HLS_SYN_LAT=17153,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=274,HLS_SYN_LUT=174,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_127_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_158 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln6_fu_133_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln6_reg_163 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln5_fu_121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_fu_144_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_181 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln7_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4 : BOOLEAN;
    signal C_I_read_reg_186 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_150_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_0_reg_88 : STD_LOGIC_VECTOR (8 downto 0);
    signal macc_0_reg_99 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_reg_110 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component lab3_z2_mul_32s_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    lab3_z2_mul_32s_3bkb_U1 : component lab3_z2_mul_32s_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => C_I_read_reg_186,
        din1 => macc_0_reg_99,
        ce => ap_const_logic_1,
        dout => grp_fu_150_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln7_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_0 = C_I_rsp_empty_n))) and (icmp_ln7_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_0_reg_88 <= i_reg_158;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_88 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_0_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j_0_reg_110 <= j_reg_181;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_0_reg_110 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    macc_0_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                macc_0_reg_99 <= grp_fu_150_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                macc_0_reg_99 <= D_I_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln7_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_0 = C_I_rsp_empty_n))) and (icmp_ln7_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                C_I_read_reg_186 <= C_I_datain;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_158 <= i_fu_127_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln7_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_0 = C_I_rsp_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                j_reg_181 <= j_fu_144_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln5_fu_121_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln6_reg_163(8 downto 0) <= zext_ln6_fu_133_p1(8 downto 0);
            end if;
        end if;
    end process;
    zext_ln6_reg_163(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, C_I_rsp_empty_n, ap_CS_fsm_state2, icmp_ln5_fu_121_p2, ap_CS_fsm_state4, icmp_ln7_fu_138_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln5_fu_121_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if ((not(((icmp_ln7_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_0 = C_I_rsp_empty_n))) and (icmp_ln7_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((icmp_ln7_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_0 = C_I_rsp_empty_n))) and (icmp_ln7_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    C_I_address <= ap_const_lv32_0;
    C_I_dataout <= ap_const_lv32_0;
    C_I_req_din <= ap_const_logic_0;

    C_I_req_write_assign_proc : process(ap_CS_fsm_state2, icmp_ln5_fu_121_p2)
    begin
        if (((icmp_ln5_fu_121_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            C_I_req_write <= ap_const_logic_1;
        else 
            C_I_req_write <= ap_const_logic_0;
        end if; 
    end process;


    C_I_rsp_read_assign_proc : process(C_I_rsp_empty_n, ap_CS_fsm_state4, icmp_ln7_fu_138_p2)
    begin
        if ((not(((icmp_ln7_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_0 = C_I_rsp_empty_n))) and (icmp_ln7_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            C_I_rsp_read <= ap_const_logic_1;
        else 
            C_I_rsp_read <= ap_const_logic_0;
        end if; 
    end process;

    C_I_size <= ap_const_lv32_10;
    D_I_address0 <= zext_ln6_fu_133_p1(8 - 1 downto 0);

    D_I_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            D_I_ce0 <= ap_const_logic_1;
        else 
            D_I_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    D_O_address0 <= zext_ln6_reg_163(8 - 1 downto 0);

    D_O_ce0_assign_proc : process(C_I_rsp_empty_n, ap_CS_fsm_state4, icmp_ln7_fu_138_p2)
    begin
        if ((not(((icmp_ln7_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_0 = C_I_rsp_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            D_O_ce0 <= ap_const_logic_1;
        else 
            D_O_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    D_O_d0 <= macc_0_reg_99;

    D_O_we0_assign_proc : process(C_I_rsp_empty_n, ap_CS_fsm_state4, icmp_ln7_fu_138_p2)
    begin
        if ((not(((icmp_ln7_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_0 = C_I_rsp_empty_n))) and (icmp_ln7_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            D_O_we0 <= ap_const_logic_1;
        else 
            D_O_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_block_state4_assign_proc : process(C_I_rsp_empty_n, icmp_ln7_fu_138_p2)
    begin
                ap_block_state4 <= ((icmp_ln7_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_0 = C_I_rsp_empty_n));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln5_fu_121_p2)
    begin
        if (((icmp_ln5_fu_121_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln5_fu_121_p2)
    begin
        if (((icmp_ln5_fu_121_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_127_p2 <= std_logic_vector(unsigned(i_0_reg_88) + unsigned(ap_const_lv9_1));
    icmp_ln5_fu_121_p2 <= "1" when (i_0_reg_88 = ap_const_lv9_100) else "0";
    icmp_ln7_fu_138_p2 <= "1" when (j_0_reg_110 = ap_const_lv5_10) else "0";
    j_fu_144_p2 <= std_logic_vector(unsigned(j_0_reg_110) + unsigned(ap_const_lv5_1));
    zext_ln6_fu_133_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_88),64));
end behav;
