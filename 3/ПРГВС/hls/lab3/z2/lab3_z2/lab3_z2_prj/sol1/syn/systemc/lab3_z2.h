// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _lab3_z2_HH_
#define _lab3_z2_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "lab3_z2_mul_32s_3bkb.h"

namespace ap_rtl {

struct lab3_z2 : public sc_module {
    // Port declarations 22
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<8> > D_I_address0;
    sc_out< sc_logic > D_I_ce0;
    sc_in< sc_lv<32> > D_I_q0;
    sc_out< sc_logic > C_I_req_din;
    sc_in< sc_logic > C_I_req_full_n;
    sc_out< sc_logic > C_I_req_write;
    sc_in< sc_logic > C_I_rsp_empty_n;
    sc_out< sc_logic > C_I_rsp_read;
    sc_out< sc_lv<32> > C_I_address;
    sc_in< sc_lv<32> > C_I_datain;
    sc_out< sc_lv<32> > C_I_dataout;
    sc_out< sc_lv<32> > C_I_size;
    sc_out< sc_lv<8> > D_O_address0;
    sc_out< sc_logic > D_O_ce0;
    sc_out< sc_logic > D_O_we0;
    sc_out< sc_lv<32> > D_O_d0;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    lab3_z2(sc_module_name name);
    SC_HAS_PROCESS(lab3_z2);

    ~lab3_z2();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    lab3_z2_mul_32s_3bkb<1,3,32,32,32>* lab3_z2_mul_32s_3bkb_U1;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<9> > i_fu_127_p2;
    sc_signal< sc_lv<9> > i_reg_158;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<64> > zext_ln6_fu_133_p1;
    sc_signal< sc_lv<64> > zext_ln6_reg_163;
    sc_signal< sc_lv<1> > icmp_ln5_fu_121_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<5> > j_fu_144_p2;
    sc_signal< sc_lv<5> > j_reg_181;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > icmp_ln7_fu_138_p2;
    sc_signal< bool > ap_block_state4;
    sc_signal< sc_lv<32> > C_I_read_reg_186;
    sc_signal< sc_lv<32> > grp_fu_150_p2;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<9> > i_0_reg_88;
    sc_signal< sc_lv<32> > macc_0_reg_99;
    sc_signal< sc_lv<5> > j_0_reg_110;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<9> ap_const_lv9_100;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_C_I_address();
    void thread_C_I_dataout();
    void thread_C_I_req_din();
    void thread_C_I_req_write();
    void thread_C_I_rsp_read();
    void thread_C_I_size();
    void thread_D_I_address0();
    void thread_D_I_ce0();
    void thread_D_O_address0();
    void thread_D_O_ce0();
    void thread_D_O_d0();
    void thread_D_O_we0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i_fu_127_p2();
    void thread_icmp_ln5_fu_121_p2();
    void thread_icmp_ln7_fu_138_p2();
    void thread_j_fu_144_p2();
    void thread_zext_ln6_fu_133_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
