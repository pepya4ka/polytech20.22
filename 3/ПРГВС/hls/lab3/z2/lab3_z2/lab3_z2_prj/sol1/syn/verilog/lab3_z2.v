// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="lab3_z2,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12t-csg325-1Q,HLS_INPUT_CLOCK=6.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.900000,HLS_SYN_LAT=17153,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=274,HLS_SYN_LUT=174,HLS_VERSION=2020_1}" *)

module lab3_z2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        D_I_address0,
        D_I_ce0,
        D_I_q0,
        C_I_req_din,
        C_I_req_full_n,
        C_I_req_write,
        C_I_rsp_empty_n,
        C_I_rsp_read,
        C_I_address,
        C_I_datain,
        C_I_dataout,
        C_I_size,
        D_O_address0,
        D_O_ce0,
        D_O_we0,
        D_O_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] D_I_address0;
output   D_I_ce0;
input  [31:0] D_I_q0;
output   C_I_req_din;
input   C_I_req_full_n;
output   C_I_req_write;
input   C_I_rsp_empty_n;
output   C_I_rsp_read;
output  [31:0] C_I_address;
input  [31:0] C_I_datain;
output  [31:0] C_I_dataout;
output  [31:0] C_I_size;
output  [7:0] D_O_address0;
output   D_O_ce0;
output   D_O_we0;
output  [31:0] D_O_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg D_I_ce0;
reg C_I_req_write;
reg C_I_rsp_read;
reg D_O_ce0;
reg D_O_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] i_fu_127_p2;
reg   [8:0] i_reg_158;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln6_fu_133_p1;
reg   [63:0] zext_ln6_reg_163;
wire   [0:0] icmp_ln5_fu_121_p2;
wire    ap_CS_fsm_state3;
wire   [4:0] j_fu_144_p2;
reg   [4:0] j_reg_181;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln7_fu_138_p2;
reg    ap_block_state4;
reg  signed [31:0] C_I_read_reg_186;
wire   [31:0] grp_fu_150_p2;
wire    ap_CS_fsm_state7;
reg   [8:0] i_0_reg_88;
reg  signed [31:0] macc_0_reg_99;
reg   [4:0] j_0_reg_110;
wire    ap_CS_fsm_state5;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

lab3_z2_mul_32s_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
lab3_z2_mul_32s_3bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(C_I_read_reg_186),
    .din1(macc_0_reg_99),
    .ce(1'b1),
    .dout(grp_fu_150_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln7_fu_138_p2 == 1'd0) & (1'b0 == C_I_rsp_empty_n)) & (icmp_ln7_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_0_reg_88 <= i_reg_158;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_88 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j_0_reg_110 <= j_reg_181;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        j_0_reg_110 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        macc_0_reg_99 <= grp_fu_150_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        macc_0_reg_99 <= D_I_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln7_fu_138_p2 == 1'd0) & (1'b0 == C_I_rsp_empty_n)) & (icmp_ln7_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        C_I_read_reg_186 <= C_I_datain;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_158 <= i_fu_127_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln7_fu_138_p2 == 1'd0) & (1'b0 == C_I_rsp_empty_n)) & (1'b1 == ap_CS_fsm_state4))) begin
        j_reg_181 <= j_fu_144_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_fu_121_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln6_reg_163[8 : 0] <= zext_ln6_fu_133_p1[8 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln5_fu_121_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        C_I_req_write = 1'b1;
    end else begin
        C_I_req_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln7_fu_138_p2 == 1'd0) & (1'b0 == C_I_rsp_empty_n)) & (icmp_ln7_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        C_I_rsp_read = 1'b1;
    end else begin
        C_I_rsp_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        D_I_ce0 = 1'b1;
    end else begin
        D_I_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln7_fu_138_p2 == 1'd0) & (1'b0 == C_I_rsp_empty_n)) & (1'b1 == ap_CS_fsm_state4))) begin
        D_O_ce0 = 1'b1;
    end else begin
        D_O_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln7_fu_138_p2 == 1'd0) & (1'b0 == C_I_rsp_empty_n)) & (icmp_ln7_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        D_O_we0 = 1'b1;
    end else begin
        D_O_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln5_fu_121_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln5_fu_121_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln5_fu_121_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if ((~((icmp_ln7_fu_138_p2 == 1'd0) & (1'b0 == C_I_rsp_empty_n)) & (icmp_ln7_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((icmp_ln7_fu_138_p2 == 1'd0) & (1'b0 == C_I_rsp_empty_n)) & (icmp_ln7_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C_I_address = 32'd0;

assign C_I_dataout = 32'd0;

assign C_I_req_din = 1'b0;

assign C_I_size = 32'd16;

assign D_I_address0 = zext_ln6_fu_133_p1;

assign D_O_address0 = zext_ln6_reg_163;

assign D_O_d0 = macc_0_reg_99;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state4 = ((icmp_ln7_fu_138_p2 == 1'd0) & (1'b0 == C_I_rsp_empty_n));
end

assign i_fu_127_p2 = (i_0_reg_88 + 9'd1);

assign icmp_ln5_fu_121_p2 = ((i_0_reg_88 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_138_p2 = ((j_0_reg_110 == 5'd16) ? 1'b1 : 1'b0);

assign j_fu_144_p2 = (j_0_reg_110 + 5'd1);

assign zext_ln6_fu_133_p1 = i_0_reg_88;

always @ (posedge ap_clk) begin
    zext_ln6_reg_163[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
end

endmodule //lab3_z2
